module Main

exports
 context-free start-symbols pnml.element
  sorts
        Nettype.uri Operator BuiltInSort BuiltInOperator BuiltInConstant Bool BooleanOperator.content BooleanOperator And Or Not Imply Equality Inequality BooleanConstant Dot DotConstant MultisetOperator Add Subtract All Empty ScalarProduct NumberOf Cardinality CardinalityOf Contains Declarations Declaration.content Declaration VariableDeclaration SortDeclaration.content SortDeclaration OperatorDeclaration.content OperatorDeclaration Variable NamedSort NamedOperator Term.content Term Sort.content Sort MultisetSort ProductSort UserSort Operator.content BuiltInOperator.content BuiltInConstant.content MultisetOperator.content Tuple UserOperator Pnml.element Pnml.content Net.element Identifier.content Net.labels Basicobject.content Page.content Netobject.content Page.labels Place.content Place.labels Transition.content Transition.labels Node.content Reference Refplace.content Reftrans.content Refnode.content Arc.content Arc.labels Pagegraphics.content Nodegraphics.content Edgegraphics.content Simpletext.content Annotationstandard.content Simpletextlabel.content Name Annotationgraphics.content Position.element Offset.element Coordinate.attributes Dimension.element PositiveDecimal.content Fill.element Line.element Color.type Font.element Toolspecific.element AnyElement HLDeclaration Type HLMarking Condition HLAnnotation 
  context-free syntax
        type::"http://www.pnml.org/version-2009/grammar/pt-hlpng" -> Nettype.uri

        Equality -> Operator
        Inequality -> Operator

        Bool -> BuiltInSort

        BooleanOperator -> BuiltInOperator

        BooleanConstant -> BuiltInConstant

        bool:: -> Bool

        BuiltInOperator.content -> BooleanOperator.content

        And -> BooleanOperator
        Or -> BooleanOperator
        Imply -> BooleanOperator
        Not -> BooleanOperator

        and::BooleanOperator.content -> And

        or::BooleanOperator.content -> Or

        not::BooleanOperator.content -> Not

        imply::BooleanOperator.content -> Imply

        equality::Operator.content -> Equality

        inequality::Operator.content -> Inequality

        booleanconstant::(value::("true" | "false") BuiltInConstant.content) -> BooleanConstant

        Dot -> BuiltInSort

        DotConstant -> BuiltInConstant

        dot:: -> Dot

        dotconstant:: -> DotConstant

        Cardinality -> BuiltInOperator
        CardinalityOf -> BuiltInOperator
        Contains -> BuiltInOperator

        Add -> MultisetOperator
        All -> MultisetOperator
        NumberOf -> MultisetOperator
        Subtract -> MultisetOperator
        ScalarProduct -> MultisetOperator
        Empty -> MultisetOperator

        add::MultisetOperator.content -> Add

        subtract::MultisetOperator.content -> Subtract

        all::(MultisetOperator.content Sort) -> All

        empty::(MultisetOperator.content Sort) -> Empty

        scalarproduct::MultisetOperator.content -> ScalarProduct

        numberof::MultisetOperator.content -> NumberOf

        cardinality::BuiltInOperator.content -> Cardinality

        cardinalityof::BuiltInOperator.content -> CardinalityOf

        contains::BuiltInOperator.content -> Contains

        declarations::(Declaration*) -> Declarations

        id::STR name::STR -> Declaration.content

        SortDeclaration -> Declaration
        VariableDeclaration -> Declaration
        OperatorDeclaration -> Declaration

        variabledecl::(Declaration.content Sort) -> VariableDeclaration

        Declaration.content -> SortDeclaration.content

        NamedSort -> SortDeclaration

        Declaration.content -> OperatorDeclaration.content

        NamedOperator -> OperatorDeclaration

        variable::refvariable::STR -> Variable

        namedsort::(SortDeclaration.content Sort) -> NamedSort

        namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) -> NamedOperator

         -> Term.content

        Variable -> Term
        Operator -> Term

         -> Sort.content

        BuiltInSort -> Sort
        MultisetSort -> Sort
        ProductSort -> Sort
        UserSort -> Sort

         -> BuiltInSort

        multisetsort::Sort -> MultisetSort

        productsort::(Sort*) -> ProductSort

        usersort::declaration::STR -> UserSort

        subterm::Term* -> Operator.content

        BuiltInOperator -> Operator
        BuiltInConstant -> Operator
        MultisetOperator -> Operator
        Tuple -> Operator
        UserOperator -> Operator

        Operator.content -> BuiltInOperator.content

         -> BuiltInOperator

        Operator.content -> BuiltInConstant.content

         -> BuiltInConstant

        Operator.content -> MultisetOperator.content

         -> MultisetOperator

        tuple::Operator.content -> Tuple

        useroperator::(declaration::STR Operator.content) -> UserOperator

        pnml::(Pnml.content+) -> Pnml.element

        Net.element -> Pnml.content

        net::(Identifier.content Nettype.uri (Name? Net.labels Page.content+ Toolspecific.element*)) -> Net.element

        id::STR -> Identifier.content

        type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" -> Nettype.uri

         -> Net.labels

        Name? Toolspecific.element* -> Basicobject.content

        page::(Identifier.content (Basicobject.content Page.labels Netobject.content* graphics::Pagegraphics.content?)) -> Page.content

        Page.content -> Netobject.content
        Place.content -> Netobject.content
        Transition.content -> Netobject.content
        Refplace.content -> Netobject.content
        Reftrans.content -> Netobject.content
        Arc.content -> Netobject.content

         -> Page.labels

        place::(Identifier.content (Basicobject.content Place.labels Node.content)) -> Place.content

         -> Place.labels

        transition::(Identifier.content (Basicobject.content Transition.labels Node.content)) -> Transition.content

         -> Transition.labels

        graphics::Nodegraphics.content? -> Node.content

        ref::STR -> Reference

        referencePlace::Refnode.content -> Refplace.content

        referenceTransition::Refnode.content -> Reftrans.content

        Identifier.content Reference Basicobject.content Node.content -> Refnode.content

        arc::(Identifier.content source::STR target::STR (Name? Arc.labels graphics::Edgegraphics.content? Toolspecific.element*)) -> Arc.content

         -> Arc.labels

        Nodegraphics.content -> Pagegraphics.content

        Position.element Dimension.element? Fill.element? Line.element? -> Nodegraphics.content

        Position.element* Line.element? -> Edgegraphics.content

        text::STR? -> Simpletext.content

        graphics::Annotationgraphics.content? Toolspecific.element* -> Annotationstandard.content

        Simpletext.content Annotationstandard.content -> Simpletextlabel.content

        name::Simpletextlabel.content -> Name

        Offset.element (Fill.element? Line.element? Font.element?) -> Annotationgraphics.content

        position::Coordinate.attributes -> Position.element

        offset::Coordinate.attributes -> Offset.element

        x::INT y::INT -> Coordinate.attributes

        dimension::(x::PositiveDecimal.content y::PositiveDecimal.content) -> Dimension.element

        INT -> PositiveDecimal.content

        fill::(color::Color.type? gradient-color::Color.type? gradient-rotation::("vertical" | "horizontal" | "diagonal")? image::STR?) -> Fill.element

        line::(shape::("line" | "curve")? color::Color.type? width::PositiveDecimal.content? style::("solid" | "dash" | "dot")?) -> Line.element

        STR -> Color.type

        font::(family::STR? style::STR? weight::STR? size::STR? decoration::("underline" | "overline" | "line-through")? align::("left" | "center" | "right")? rotation::INT?) -> Font.element

        toolspecific::(tool::STR version::STR AnyElement*) -> Toolspecific.element

        (ANY | STR | AnyElement)* -> AnyElement

        HLDeclaration* -> Net.labels

        HLDeclaration* -> Page.labels

        Type? HLMarking? -> Place.labels

        Condition? -> Transition.labels

        HLAnnotation? -> Arc.labels

        declaration::(Simpletextlabel.content structure::Declarations?) -> HLDeclaration

        type::(Simpletextlabel.content structure::Sort?) -> Type

        hlinitialMarking::(Simpletextlabel.content structure::Term?) -> HLMarking

        condition::(Simpletextlabel.content structure::Term?) -> Condition

        hlinscription::(Simpletextlabel.content structure::Term?) -> HLAnnotation
