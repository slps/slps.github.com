Activity = orderedMessages::ANY+ incomingMessages::ANY+ outgoingMessages::ANY+ groups::ANY+ activityType::ANY eventHandlerFor::ANY lane::ANY looping::ANY ;
ActivityType = SubProcess:: ;
ActivityType = EventEndMultiple:: ;
ActivityType = EventEndMessage:: ;
ActivityType = EventIntermediateMessage:: ;
ActivityType = EventStartMultiple:: ;
ActivityType = EventIntermediateMultiple:: ;
ActivityType = GatewayParallel:: ;
ActivityType = EventStartTimer:: ;
ActivityType = EventStartEmpty:: ;
ActivityType = EventIntermediateCancel:: ;
ActivityType = EventEndError:: ;
ActivityType = EventStartRule:: ;
ActivityType = EventEndTerminate:: ;
ActivityType = EventStartLink:: ;
ActivityType = EventIntermediateLink:: ;
ActivityType = EventEndCancel:: ;
ActivityType = EventEndLink:: ;
ActivityType = EventIntermediateEmpty:: ;
ActivityType = EventIntermediateCompensation:: ;
ActivityType = Task:: ;
ActivityType = GatewayDataBasedExclusive:: ;
ActivityType = GatewayComplex:: ;
ActivityType = EventEndEmpty:: ;
ActivityType = EventIntermediateError:: ;
ActivityType = EventIntermediateTimer:: ;
ActivityType = EventEndCompensation:: ;
ActivityType = EventStartMessage:: ;
ActivityType = GatewayDataBasedInclusive:: ;
ActivityType = GatewayEventBasedExclusive:: ;
ActivityType = EventIntermediateRule:: ;
Artifact = associations::ANY+ artifactsContainer::ANY ;
ArtifactsContainer = artifacts::ANY+ ;
Association = direction::ANY source::ANY target::ANY ;
BpmnDiagram = pools::ANY+ messages::ANY+ author::ANY title::ANY ;
DataObject = ;
DirectionType = Both:: ;
DirectionType = From:: ;
DirectionType = To:: ;
DirectionType = None:: ;
Graph = vertices::ANY+ sequenceEdges::ANY+ ;
Group = activities::ANY+ ;
Identifiable = iD::ANY ;
IdentifiableNode = associations::ANY+ ;
Lane = activities::ANY+ pool::ANY ;
MessagingEdge = bpmnDiagram::ANY source::ANY target::ANY ;
NamedBpmnObject = documentation::ANY name::ANY ncname::ANY ;
Pool = lanes::ANY+ bpmnDiagram::ANY ;
SequenceEdge = graph::ANY isDefault::ANY source::ANY target::ANY ;
SubProcess = eventHandlers::ANY+ isTransaction::ANY ;
TextAnnotation = ;
Vertex = outgoingEdges::ANY+ incomingEdges::ANY+ graph::ANY ;
