LocatedElement = ;
Root = expressions::ANY+ ;
Expression = ;
Integ = val::ANY ;
Floa = val::ANY ;
Str = val::ANY ;
Ident = ;
ValidIdentifier = val::ANY ;
SlotName = val::ANY ;
JessVariable = val::ANY ;
TemplateExpression = templateName::ANY firstSlot::ANY slotOp::ANY+ ;
SlotOp = slotIdent::ANY operator::ANY exp::ANY ;
DefinitionExp = ;
GlobalDefinition = varDef::ANY+ ;
VarDefinition = jessVar::ANY eq::ANY expression::ANY ;
FunctionDefinition = funcName::ANY parameters::ANY+ expressions::ANY+ ;
AdviceDefinition = direction::ANY op::ANY advice::ANY+ ;
UnDefAdvice = op::ANY ;
FactDefinition = factName::ANY documentation::ANY fact::ANY+ ;
RuleDefinition = ruleName::ANY documentation::ANY declare::ANY conditions::ANY+ functionCall::ANY+ ;
DeclareRule = salience::ANY nodeIndexHash::ANY autoFocus::ANY noLoop::ANY ;
ModuleDefinition = moduleName::ANY documentation::ANY ;
QueryDefinition = queryName::ANY documentation::ANY declare::ANY expressions::ANY+ ;
DeclareVar = var::ANY+ node::ANY max::ANY ;
TemplateDefinition = templateName::ANY inherits::ANY+ documentation::ANY declareBloc::ANY slotDef::ANY+ ;
DeclareBloc = slotSpecific::ANY backchainReaction::ANY fromClass::ANY includeVariable::ANY order::ANY ;
ASlotDef = slotName::ANY optionals::ANY+ ;
SlotDef = ;
MultiSlotDef = ;
SlotOptions = type::ANY def::ANY defaultDyn::ANY allowedValues::ANY+ ;
UseFuncExp = ;
WhileExp = hasDo::ANY boolExp::ANY actions::ANY+ ;
ForExp = initializer::ANY condition::ANY increment::ANY expressions::ANY+ ;
ForeachExp = var::ANY list::ANY expressions::ANY+ ;
FuncCall = funcName::ANY funcParam::ANY+ ;
EngineExp =  ;
ExitExp =  ;
IfExpression = ifthen::ANY elifthen::ANY+ else::ANY+ ;
ConditionAction = condition::ANY actions::ANY+ ;
ElifConditionAction = condAct::ANY ;
Advice = before:: ;
Advice = after:: ;
