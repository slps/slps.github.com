ActionElement = kind::core/String codeElement::code/AbstractCodeElement+ actionRelation::action/AbstractActionRelationship+ ;
ControlFlow = to::action/ActionElement from::action/ActionElement ;
Calls = to::code/ControlElement from::action/ActionElement ;
Creates = to::code/Datatype from::action/ActionElement ;
Reads = to::code/DataElement from::action/ActionElement ;
Writes = to::code/DataElement from::action/ActionElement ;
CompliesTo = to::code/CodeItem from::action/ActionElement ;
Flow = ;
TrueFlow = ;
FalseFlow = ;
GuardedFlow = ;
UsesType = to::code/Datatype from::action/ActionElement ;
Addresses = to::code/ComputationalObject from::action/ActionElement ;
ActionRelationship = to::core/KDMEntity from::action/ActionElement ;
Throws = to::code/DataElement from::action/ActionElement ;
Dispatches = to::code/DataElement from::action/ActionElement ;
EntryFlow = to::action/ActionElement from::code/ControlElement ;
BlockUnit = ;
ExceptionUnit = ;
TryUnit = ;
FinallyUnit = ;
CatchUnit = ;
ExitFlow = to::action/ActionElement from::action/ActionElement ;
ExceptionFlow = to::action/ActionElement from::action/ActionElement ;
BuildResource = implementation::core/KDMEntity+ groupedBuild::build/AbstractBuildElement+ buildElement::build/AbstractBuildElement+ ;
BuildDescription = source::source/SourceRef+ text::core/String ;
SymbolicLink = ;
LinksTo = to::build/AbstractBuildElement from::build/SymbolicLink ;
Consumes = to::build/AbstractBuildElement from::build/BuildStep ;
BuildModel = buildElement::build/AbstractBuildElement+ ;
BuildComponent = ;
Supplier = ;
Tool = ;
BuildElement = ;
BuildRelationship = to::core/KDMEntity from::build/AbstractBuildElement ;
SuppliedBy = to::build/Supplier from::build/AbstractBuildElement ;
Library = ;
BuildStep = ;
Produces = to::build/AbstractBuildElement from::build/BuildStep ;
SupportedBy = to::build/Tool from::build/BuildStep ;
BuildProduct = ;
DescribedBy = to::build/BuildDescription from::build/BuildStep ;
ControlElement = type::code/Datatype entryFlow::action/EntryFlow+ codeElement::code/AbstractCodeElement+ ;
MethodUnit = kind::code/MethodKind export::code/ExportKind ;
Module = codeElement::code/AbstractCodeElement+ ;
CodeAssembly = ;
CallableUnit = kind::code/CallableKind ;
TemplateUnit = codeElement::code/CodeItem+ ;
TemplateParameter = ;
InstanceOf = to::code/TemplateUnit from::code/AbstractCodeElement ;
CompilationUnit = ;
CodeModel = codeElement::code/AbstractCodeElement+ ;
DerivedType = itemUnit::code/ItemUnit ;
ArrayType = size::core/Integer indexUnit::code/IndexUnit ;
PrimitiveType = ;
BooleanType = ;
CharType = ;
ClassUnit = isAbstract::core/Boolean codeElement::code/CodeItem+ ;
CompositeType = itemUnit::code/ItemUnit+ ;
RecordType = ;
EnumeratedType = value::code/Value+ ;
Extends = to::code/Datatype from::code/Datatype ;
ScaledType = ;
FloatType = ;
HasType = to::code/Datatype from::code/CodeItem ;
ImplementationOf = to::code/CodeItem from::code/CodeItem ;
Implements = to::code/CodeItem from::code/CodeItem ;
IntegerType = ;
InterfaceUnit = codeElement::code/CodeItem+ ;
PointerType = ;
TypeUnit = ;
RangeType = lower::core/Integer upper::core/Integer ;
Signature = parameterUnit::code/ParameterUnit+ ;
DataElement = type::code/Datatype ext::core/String size::core/Integer codeElement::code/Datatype+ ;
StringType = ;
ChoiceType = ;
NamespaceUnit = groupedCode::code/CodeItem+ ;
VisibleIn = to::code/CodeItem from::code/CodeItem ;
CommentUnit = text::core/String ;
SharedUnit = ;
DecimalType = ;
DateType = ;
TimeType = ;
MethodKind = operator:: ;
MethodKind = destructor:: ;
MethodKind = method:: ;
MethodKind = abstract:: ;
MethodKind = virtual:: ;
MethodKind = unknown:: ;
MethodKind = constructor:: ;
VoidType = ;
Value = ;
ValueList = valueElement::code/ValueElement+ ;
StorableUnit = kind::code/StorableKind ;
MemberUnit = export::code/ExportKind ;
ParameterUnit = kind::code/ParameterKind pos::core/Integer ;
ItemUnit = ;
IndexUnit = ;
SynonymType = ;
SequenceType = size::core/Integer ;
BagType = size::core/Integer ;
SetType = size::core/Integer ;
CodeElement = ;
CodeRelationship = to::core/KDMEntity from::code/CodeItem ;
ParameterKind = byReference:: ;
ParameterKind = unknown:: ;
ParameterKind = exception:: ;
ParameterKind = return:: ;
ParameterKind = byValue:: ;
ParameterKind = catchall:: ;
ParameterKind = byName:: ;
ParameterKind = throws:: ;
ParameterKind = variadic:: ;
ExportKind = private:: ;
ExportKind = unknown:: ;
ExportKind = public:: ;
ExportKind = protected:: ;
ExportKind = final:: ;
LanguageUnit = ;
OrdinalType = ;
BitstringType = ;
OctetType = ;
OctetstringType = ;
BitType = ;
StorableKind = global:: ;
StorableKind = external:: ;
StorableKind = static:: ;
StorableKind = unknown:: ;
StorableKind = register:: ;
StorableKind = local:: ;
CallableKind = external:: ;
CallableKind = regular:: ;
CallableKind = stored:: ;
CallableKind = operator:: ;
CallableKind = unknown:: ;
Imports = to::code/CodeItem from::code/CodeItem ;
Package = ;
ParameterTo = to::code/CodeItem from::code/AbstractCodeElement ;
TemplateType = ;
PreprocessorDirective = codeElement::code/AbstractCodeElement+ ;
MacroDirective = ;
MacroUnit = kind::code/MacroKind ;
ConditionalDirective = ;
IncludeDirective = ;
MacroKind = external:: ;
MacroKind = unknown:: ;
MacroKind = option:: ;
MacroKind = undefined:: ;
MacroKind = regular:: ;
VariantTo = to::code/PreprocessorDirective from::code/PreprocessorDirective ;
Expands = to::code/PreprocessorDirective from::code/PreprocessorDirective ;
Redefines = to::code/PreprocessorDirective from::code/PreprocessorDirective ;
GeneratedFrom = to::code/PreprocessorDirective from::code/AbstractCodeElement ;
Includes = to::code/AbstractCodeElement from::code/PreprocessorDirective ;
HasValue = to::code/CodeItem from::code/CodeItem ;
ConceptualModel = conceptualElement::conceptual/AbstractConceptualElement+ ;
TermUnit = ;
ConceptualContainer = conceptualElement::conceptual/AbstractConceptualElement+ ;
FactUnit = ;
ConceptualRelationship = to::core/KDMEntity from::conceptual/AbstractConceptualElement ;
BehaviorUnit = ;
RuleUnit = ;
ScenarioUnit = ;
ConceptualFlow = to::conceptual/ConceptualContainer from::conceptual/ConceptualContainer ;
ConceptualElement = ;
ConceptualRole = conceptualElement::conceptual/AbstractConceptualElement ;
AggregatedRelationship = from::core/KDMEntity to::core/KDMEntity relation::core/KDMRelationship+ density::core/Integer ;
String = STR ;
Integer = INT ;
Boolean = 'true' ;
Boolean = 'false' ;
DataModel = dataElement::data/AbstractDataElement+ ;
DataResource = ;
IndexElement = implementation::code/ItemUnit+ ;
UniqueKey = ;
Index = ;
KeyRelation = to::data/UniqueKey from::data/ReferenceKey ;
ReferenceKey = ;
DataContainer = dataElement::data/DataResource+ ;
Catalog = ;
RelationalSchema = codeElement::code/CodeItem+ ;
ColumnSet = itemUnit::code/ItemUnit+ ;
RelationalTable = ;
RelationalView = ;
RecordFile = ;
DataEvent = kind::core/String ;
XMLSchema = contentElement::data/AbstractContentElement+ ;
ComplexContentType = contentElement::data/AbstractContentElement+ ;
AllContent = ;
SeqContent = ;
ChoiceContent = ;
ContentItem = type::data/ComplexContentType contentElement::data/AbstractContentElement+ ;
GroupContent = ;
ContentRestriction = kind::core/String value::core/String ;
SimpleContentType = type::data/ComplexContentType+ kind::core/String ;
ExtendedDataElement = ;
DataRelationship = to::core/KDMEntity from::data/AbstractDataElement ;
MixedContent = ;
ContentReference = ;
DataAction = kind::core/String implementation::action/ActionElement+ dataElement::data/DataEvent+ ;
ReadsColumnSet = to::data/ColumnSet from::action/ActionElement ;
ContentAttribute = ;
TypedBy = to::data/ComplexContentType from::data/ContentItem ;
ReferenceTo = to::data/ContentItem from::data/ContentItem ;
RestrictionOf = to::data/ComplexContentType from::data/ComplexContentType ;
ExtensionTo = to::data/ComplexContentType from::data/ComplexContentType ;
DatatypeOf = to::code/Datatype from::data/ComplexContentType ;
HasContent = to::data/AbstractDataElement from::action/ActionElement ;
WritesColumnSet = to::data/ColumnSet from::action/ActionElement ;
ProducesDataEvent = to::data/DataEvent from::action/ActionElement ;
DataSegment = ;
ContentElement = ;
ManagesData = to::data/AbstractDataElement from::action/ActionElement ;
EventModel = eventElement::event/AbstractEventElement+ ;
Event = kind::core/String ;
EventRelationship = to::core/KDMEntity from::event/AbstractEventElement ;
EventResource = eventElement::event/AbstractEventElement+ ;
State = ;
Transition = ;
OnEntry = ;
OnExit = ;
EventAction = kind::core/String eventElement::event/Event+ ;
ReadsState = to::event/State from::action/ActionElement ;
ProducesEvent = to::event/Event from::action/ActionElement ;
ConsumesEvent = to::event/Event from::event/Transition ;
NextState = to::event/State from::event/Transition ;
InitialState = ;
EventElement = ;
HasState = to::event/AbstractEventElement from::action/ActionElement ;
SourceRef = region::source/SourceRegion+ language::core/String snippet::core/String ;
SourceRegion = file::source/SourceFile startLine::core/Integer startPosition::core/Integer endLine::core/Integer endPosition::core/Integer language::core/String path::core/String ;
InventoryModel = inventoryElement::source/AbstractInventoryElement+ ;
InventoryItem = version::core/String path::core/String ;
SourceFile = language::core/String encoding::core/String ;
Image = ;
ResourceDescription = ;
Configuration = ;
InventoryContainer = inventoryElement::source/AbstractInventoryElement+ ;
Directory = path::core/String ;
Project = ;
BinaryFile = ;
ExecutableFile = ;
DependsOn = to::source/AbstractInventoryElement from::source/AbstractInventoryElement ;
InventoryElement = ;
InventoryRelationship = to::core/KDMEntity from::source/AbstractInventoryElement ;
PlatformModel = platformElement::platform/AbstractPlatformElement+ ;
Requires = to::platform/AbstractPlatformElement from::platform/DeployedComponent ;
ResourceType = platformElement::platform/AbstractPlatformElement+ ;
NamingResource = ;
MarshalledResource = ;
MessagingResource = ;
FileResource = ;
ExecutionResource = ;
PlatformAction = kind::core/String platformElement::platform/PlatformEvent+ ;
ExternalActor = ;
DataManager = ;
BindsTo = to::platform/ResourceType from::platform/ResourceType ;
PlatformElement = ;
PlatformRelationship = to::core/KDMEntity from::platform/AbstractPlatformElement ;
PlatformEvent = kind::core/String ;
LockResource = ;
DeployedSoftwareSystem = groupedComponent::platform/DeployedComponent+ ;
Machine = deployedComponent::platform/DeployedComponent+ deployedResource::platform/DeployedResource+ ;
DeployedComponent = groupedCode::code/Module+ ;
DeployedResource = platformElement::platform/ResourceType+ ;
Loads = to::platform/DeployedComponent from::action/ActionElement ;
Spawns = to::platform/RuntimeResource from::action/ActionElement ;
RuntimeResource = ;
Thread = ;
Process = ;
ReadsResource = to::platform/ResourceType from::action/ActionElement ;
WritesResource = to::platform/ResourceType from::action/ActionElement ;
ManagesResource = to::platform/ResourceType from::action/ActionElement ;
DefinedBy = to::code/CodeItem from::action/ActionElement ;
StreamResource = ;
Subsystem = ;
Layer = ;
StructureModel = structureElement::structure/AbstractStructureElement+ ;
Component = ;
SoftwareSystem = ;
StructureRelationship = to::core/KDMEntity from::structure/AbstractStructureElement ;
ArchitectureView = ;
StructureElement = ;
Audit = description::core/String author::core/String date::core/String ;
Segment = segment::kdm/Segment+ model::kdm/KDMModel+ ;
Attribute = tag::core/String value::core/String ;
Annotation = text::core/String ;
TagDefinition = tag::core/String type::core/String ;
Stereotype = tag::kdm/TagDefinition+ name::core/String type::core/String ;
ExtensionFamily = stereotype::kdm/Stereotype+ name::core/String ;
TaggedRef = reference::core/ModelElement ;
TaggedValue = value::core/String ;
UIResource = UIElement::ui/AbstractUIElement+ ;
UIDisplay = ;
Screen = ;
Report = ;
UIModel = UIElement::ui/AbstractUIElement+ ;
UILayout = to::ui/UIResource from::ui/UIResource ;
UIField = ;
DisplaysImage = to::source/Image from::action/ActionElement ;
Displays = to::ui/UIResource from::action/ActionElement ;
UIFlow = to::ui/AbstractUIElement from::ui/AbstractUIElement ;
UIElement = ;
UIRelationship = to::core/KDMEntity from::ui/AbstractUIElement ;
UIAction = kind::core/String UIElement::ui/UIEvent+ ;
UIEvent = kind::core/String ;
ReadsUI = to::ui/UIResource from::action/ActionElement ;
WritesUI = to::ui/UIResource from::action/ActionElement ;
ManagesUI = to::ui/UIResource from::action/ActionElement ;
