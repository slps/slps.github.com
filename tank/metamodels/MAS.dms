Agent = service::Service+ non_Functionnal_Requirement::Non Functionnal Requirement+ requirement::Requirement+ belongs::Organization cooperationRules::CooperationRules+ fipa_Platform_Agent::FIPA-Platform Agent role::Role representation::Representation characteristic::Characteristic skill::Skill aptitude::Aptitude ;
Service = inputs::String outputs::String pre-conditions::String post-conditions::String ;
Non Functionnal Requirement = ;
Requirement = ;
Organization = observes::Organizational Structure+ organizational_Structure::Organizational Structure ;
Organizational Structure = SafetyRule ;
Organizational Structure = LivenessRule ;
Organizational Structure = organization::Organization+ ;
SafetyRule = ;
LivenessRule = ;
CooperationRules = ncs::NCS ;
NCS = cooperationRules::CooperationRules ;
FIPA-Platform Agent = agentF::Agent fipa_Platform_Task::FIPA-Platform Task+ ;
FIPA-Platform Task = fipa_Platform_AgentF::FIPA-Platform Agent task::Task ;
Task = name::String fipa_Platform_TaskT::FIPA-Platform Task ;
Role = agentR::Agent activity::Task+ actsOn::Resource+ scenario::Scenario+ participant::Communication+ has::Responsibility+ ;
Representation = agentRep::Agent ontology::Ontology environnement::Environnement ;
Characteristic = agentC::Agent ;
Skill = agentS::Agent ;
Aptitude = agentA::Agent ;
Ontology = Concept ;
Ontology = Predicat ;
Ontology = Action ;
Ontology = environnement::Environnement ;
Concept = ;
Predicat = ;
Action = ;
Environnement = resource::Resource ;
Responsibility = LivenessProperty ;
Responsibility = SafetyProperty ;
Responsibility = LivenessProperty ;
Responsibility = SafetyProperty ;
LivenessProperty = ;
SafetyProperty = ;
Resource = name::String environnement::Environnement action::Action ;
Communication = name::String Exchanged Knoledge::Ontology scenario::Scenario+ aip::AIP message::Message+ ;
AIP = name::String performative::Performative ;
Performative = aip::AIP ;
Message = communication::Communication Comm_Act::Performative ;
Scenario = ;
