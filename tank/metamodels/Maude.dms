MaudeSpec = els::MaudeTopEl+ printableEls::MaudeTopEl+ ;
MaudeTopEl = Theory ;
MaudeTopEl = Module ;
MaudeTopEl = View ;
ModExpression = InstModExp ;
ModExpression = RenModExp ;
ModExpression = CompModExp ;
ModExpression = ModuleIdModExp ;
ModExpression = TheoryIdModExp ;
ModExpression = Parameter ;
InstModExp = modExp::ModExpression views::View+ ;
RenModExp = modExp::ModExpression renamings::RenMapping+ ;
CompModExp = modExps::ModExpression ;
ModuleIdModExp = module::Module ;
TheoryIdModExp = theory::Theory ;
Parameter = label::String modExp::ModExpression ;
Theory = FTheory ;
Theory = STheory ;
FTheory = els::ModElement+ ;
STheory = els::ModElement+ ;
Module = FModule ;
Module = SModule ;
FModule = els::ModElement+ params::Parameter+ ;
SModule = els::ModElement+ params::Parameter+ ;
ModElement = ModImportation ;
ModElement = SubsortRel ;
ModElement = Operation ;
ModElement = Statement ;
ModImportation = imports::ModExpression mode::ImportationMode ;
ImportationMode = protecting:: ;
ImportationMode = including:: ;
ImportationMode = extending:: ;
Type = Kind ;
Sort = subsortRels::SubsortRel+ supersortRels::SubsortRel+ kind::Kind ;
Kind = sorts::Sort+ ;
SubsortRel = subsorts::Sort+ supersorts::Sort+ ;
Operation = name::String coarity::Type arity::Type+ atts::String+ ;
Statement = Membership ;
Statement = Equation ;
Statement = Rule ;
Membership = term::Term sort::Sort ;
Equation = lhs::Term rhs::Term ;
Rule = lhs::Term rhs::Term ;
Condition = EquationalCond ;
Condition = RewriteCond ;
EquationalCond = MembershipCond ;
EquationalCond = BooleanCond ;
EquationalCond = MatchingCond ;
EquationalCond = EqualCond ;
RewriteCond = rhs::Term ;
MembershipCond = rhs::Sort ;
BooleanCond =  ;
MatchingCond = rhs::Term ;
EqualCond = rhs::Term ;
Term = Constant ;
Term = RecTerm ;
Term = Variable ;
Constant = op::String ;
RecTerm = op::String args::Term+ ;
Variable = name::String ;
View = from::ModExpression to::ModExpression els::ViewMapping+ ;
ViewMapping = RenMapping ;
ViewMapping = TermMapping ;
RenMapping = SortMapping ;
RenMapping = OpTypedMapping ;
RenMapping = OpMapping ;
RenMapping = LabelMapping ;
TermMapping = from::Term to::Term ;
SortMapping = from::Sort to::String ;
OpTypedMapping = from::Operation to::String atts::String+ ;
OpMapping = from::Operation to::String ;
LabelMapping = from::String to::String ;
