MaudeSpec = els::ANY+ printableEls::ANY+ ;
MaudeTopEl = ;
ModExpression = ;
InstModExp = modExp::ANY views::ANY+ ;
RenModExp = modExp::ANY renamings::ANY+ ;
CompModExp = modExps::ANY ;
ModuleIdModExp = module::ANY ;
TheoryIdModExp = theory::ANY ;
Parameter = label::ANY modExp::ANY ;
Theory = ;
FTheory = els::ANY+ ;
STheory = els::ANY+ ;
Module = ;
FModule = els::ANY+ params::ANY+ ;
SModule = els::ANY+ params::ANY+ ;
ModElement = ;
ModImportation = imports::ANY mode::ANY ;
ImportationMode = protecting:: ;
ImportationMode = including:: ;
ImportationMode = extending:: ;
Type = ;
Sort = subsortRels::ANY+ supersortRels::ANY+ kind::ANY ;
Kind = sorts::ANY+ ;
SubsortRel = subsorts::ANY+ supersorts::ANY+ ;
Operation = name::ANY coarity::ANY arity::ANY+ atts::ANY+ ;
Statement = ;
Membership = term::ANY sort::ANY ;
Equation = lhs::ANY rhs::ANY ;
Rule = lhs::ANY rhs::ANY ;
Condition = ;
EquationalCond = ;
RewriteCond = rhs::ANY ;
MembershipCond = rhs::ANY ;
BooleanCond =  ;
MatchingCond = rhs::ANY ;
EqualCond = rhs::ANY ;
Term = ;
Constant = op::ANY ;
RecTerm = op::ANY args::ANY+ ;
Variable = name::ANY ;
View = from::ANY to::ANY els::ANY+ ;
ViewMapping = ;
RenMapping = ;
TermMapping = from::ANY to::ANY ;
SortMapping = from::ANY to::ANY ;
OpTypedMapping = from::ANY to::ANY atts::ANY+ ;
OpMapping = from::ANY to::ANY ;
LabelMapping = from::ANY to::ANY ;
