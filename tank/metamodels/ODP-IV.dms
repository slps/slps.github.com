InvariantSchema = constrainer_AT::ActionTemplate+ constrainer_ATy::ActionType+ constrainer_SC::StateChange+ constrainer_S::State+ constrainer_IOT::InformationObjectTemplate+ constrainer_IOTy::InformationObjectType+ ;
InformationObjectTemplate = IOT_IO::InformationObject+ IOT_constrainer::InvariantSchema+ ;
InformationObjectType = IOTy_IO::InformationObject+ IOTy_constrainer::InvariantSchema+ ;
InformationObject = describer::StaticSchema+ IO_IOT::InformationObjectTemplate+ IO_IOTy::InformationObjectType+ IO_A::Action+ IO_S::State ;
State = change::StateChange causeSC::StateChange S_IO::InformationObject S_constrainer::InvariantSchema+ ;
StateChange = startState::State endState::State specifier::DynamicSchema+ cause::Action+ SC_constrainer::InvariantSchema+ ;
DynamicSchema = dsStateChange::StateChange+ ;
StaticSchema = locationTime::Double SS_IO::InformationObject+ ;
Action = effect::StateChange+ A_AT::ActionTemplate+ participant::InformationObject+ A_ATy::ActionType+ ;
ActionType = ATy_A::Action+ ATy_constrainer::InvariantSchema+ ;
ActionTemplate = AT_A::Action+ AT_constrainer::InvariantSchema+ ;
