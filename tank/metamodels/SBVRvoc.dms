LocatedElement = Root ;
LocatedElement = VocabularyEntry ;
LocatedElement = Caption ;
LocatedElement = PrimaryRepresentation ;
LocatedElement = ConceptDefinition ;
LocatedElement = ConceptSource ;
LocatedElement = Note ;
LocatedElement = Sentence ;
LocatedElement = NameSpaceURI ;
LocatedElement = Word ;
LocatedElement = SBVRExpression ;
LocatedElement = SBVRPropWithKW ;
LocatedElement = ModalForm ;
LocatedElement = SimpleSBVRProp ;
LocatedElement = SubSBVRProp ;
LocatedElement = LinkSBVRConcept ;
LocatedElement = ConjConcept ;
LocatedElement = Concept ;
LocatedElement = NounConcept ;
LocatedElement = Qualification ;
LocatedElement = GeneralConcept ;
LocatedElement = Qualifier ;
LocatedElement = ModalBegin ;
Root = entries::VocabularyEntry+ ;
VocabularyEntry = primaryRep::PrimaryRepresentation caption::Caption+ ;
Caption = DefCaption ;
Caption = DescCaption ;
Caption = SrcCaption ;
Caption = DBCaption ;
Caption = GenCCaption ;
Caption = CTypCaption ;
Caption = Necessity ;
Caption = Possibility ;
Caption = RefSCaption ;
Caption = NoteCaption ;
Caption = ExCaption ;
Caption = SynCaption ;
Caption = SynFCaption ;
Caption = SeeCaption ;
Caption = SFCaption ;
Caption = NSURICaption ;
DefCaption = definition::ConceptDefinition ;
DescCaption = description::Note ;
SrcCaption = source::ConceptSource ;
DBCaption = dictionaryBasis::ConceptSource ;
GenCCaption = generalConcept::PrimaryRepresentation ;
CTypCaption = conceptType::PrimaryRepresentation+ ;
Necessity = exp::SBVRExpression ;
Possibility = exp::SBVRExpression ;
RefSCaption = referenceScheme::PrimaryRepresentation ;
NoteCaption = note::Note ;
ExCaption = example::SBVRExpression+ ;
SynCaption = synonym::PrimaryRepresentation+ ;
SynFCaption = synonymousForm::SBVRExpression+ ;
SeeCaption = see::PrimaryRepresentation ;
SFCaption = subjectField::PrimaryRepresentation ;
NSURICaption = namespaceURI::NameSpaceURI ;
PrimaryRepresentation = NotFactTypeRepresentation ;
PrimaryRepresentation = FactTypeFormRepresentation ;
NotFactTypeRepresentation = TermRepresentation ;
NotFactTypeRepresentation = NameRepresentation ;
TermRepresentation = term::StringWord+ ;
NameRepresentation = hasThe::Boolean name::NameWord+ ;
FactTypeFormRepresentation = primaryRep1::NotFactTypeRepresentation verbExp::Verb+ primaryRep2::NotFactTypeRepresentation ;
ConceptDefinition = exp::Concept conjexp::ConjConcept+ ;
ConceptSource = source::Word+ ;
Note = sentences::Sentence+ ;
Sentence = words::Word+ ;
NameSpaceURI = URI::Word+ ;
Word = StringWord ;
Word = QuotedStringWord ;
Word = NameWord ;
StringWord = val::String ;
QuotedStringWord = val::String ;
NameWord = val::String ;
Verb = is:: ;
Verb = relevant:: ;
Verb = comprises:: ;
Verb = to:: ;
Verb = work:: ;
Verb = in:: ;
Verb = trades:: ;
Verb = as:: ;
Verb = are:: ;
Verb = accepted:: ;
Verb = generally:: ;
Verb = important:: ;
Verb = across:: ;
Verb = share:: ;
Verb = sets:: ;
Verb = assigned:: ;
Verb = by:: ;
Verb = contains:: ;
Verb = for:: ;
Verb = has:: ;
Verb = specifies:: ;
Verb = specified:: ;
ConjonctionnalKeyWord = and:: ;
ConjonctionnalKeyWord = or:: ;
ConjonctionnalKeyWord = if:: ;
ConjonctionnalKeyWord = whether:: ;
ModalVerb = must:: ;
ModalVerb = may:: ;
ModalVerb = never:: ;
ModalVerb = always:: ;
Join = that:: ;
Join = who:: ;
Link = of:: ;
Link = quoteS:: ;
Qualif = the:: ;
Qualif = The:: ;
Qualif = a:: ;
Qualif = A:: ;
Qualif = an:: ;
Qualif = An:: ;
Qualif = Each:: ;
Qualif = each:: ;
Qualif = Some:: ;
Qualif = some:: ;
Qualif = At:: ;
Qualif = at:: ;
Qualif = Exactly:: ;
Qualif = exactly:: ;
EndOperator = given:: ;
EndOperator = thanone:: ;
EndOperator = one:: ;
EndOperator = isobligatorythat:: ;
EndOperator = ispermittedthat:: ;
EndOperator = isprohibitedthat:: ;
EndOperator = isnecessarythat:: ;
EndOperator = ispossiblethat:: ;
EndOperator = isimpossiblethat:: ;
EndOperator = isnotthecasethat:: ;
EndOperator = least:: ;
EndOperator = leastone:: ;
EndOperator = most:: ;
EndOperator = mostone:: ;
EndOperator = leastnandatmostm:: ;
EndOperator = andonlyif:: ;
EndOperator = ornot:: ;
EndOperator = not:: ;
EndOperator = of:: ;
SBVRExpression = hasPoint::Boolean firstProposition::SimpleSBVRProp nextProposition::SBVRPropWithKW+ ;
SBVRPropWithKW = conjonction::ConjonctionnalKeyWord endConj::EndOperator proposition::SimpleSBVRProp ;
ModalForm = modal::ModalVerb isNeg::Boolean ;
SimpleSBVRProp = modal::ModalBegin concept1::Concept modalVerb::ModalForm verbs::Verb+ concept2::Concept ;
SubSBVRProp = join::Join modalVerb::ModalVerb verbs::Verb+ concept2::Concept ;
LinkSBVRConcept = link::Link concept::Concept ;
ConjConcept = conjonction::ConjonctionnalKeyWord concept::Concept ;
Concept = NameConcept ;
Concept = ObjectConcept ;
Concept = StringConcept ;
NameConcept = the::Qualif name::NameWord+ ;
ObjectConcept = operatoredConcept::NounConcept qualify::Qualification ;
StringConcept = stringWord::QuotedStringWord+ ;
NounConcept = qualif::Qualifier noun::StringWord+ ;
Qualification = generalConcept::GeneralConcept+ ;
GeneralConcept = NameGConcept ;
GeneralConcept = NounGConcept ;
NameGConcept = name::NameConcept ;
NounGConcept = noun::StringWord+ ;
Qualifier = op::Qualif endOperator::EndOperator min::StringWord max::StringWord ;
ModalBegin = ModalBeginC ;
ModalBegin = endOperator::EndOperator ;
ModalBeginC = ;
