String = STR ;
Integer = INT ;
Boolean = 'true' ;
Boolean = 'false' ;
LocatedElement = Program ;
LocatedElement = Service ;
LocatedElement = Session ;
LocatedElement = MethodName ;
LocatedElement = Branch ;
LocatedElement = TypeExpression ;
LocatedElement = Declaration ;
LocatedElement = StructureProperty ;
LocatedElement = FunctionCall ;
LocatedElement = Statement ;
LocatedElement = SelectMember ;
LocatedElement = Expression ;
LocatedElement = MessageField ;
LocatedElement = Constant ;
LocatedElement = Response ;
Program = service::Service ;
Service = name::String declarations::Declaration+ sessions::Session+ ;
Session = Registration ;
Session = Dialog ;
Session = Event ;
Session = Method ;
Registration = declarations::Declaration+ sessions::Session+ ;
Dialog = declarations::Declaration+ methods::Method+ ;
Event = eventId::String declarations::Declaration+ methods::Method+ ;
Method = type::TypeExpression direction::Direction methodName::MethodName arguments::Argument+ statements::Statement+ branches::Branch+ ;
Argument = type::TypeExpression initExp::Expression ;
MethodName = SIPMethodName ;
MethodName = ControlMethodName ;
SIPMethodName = name::SIPMethod ;
ControlMethodName = name::ControlMethod ;
Branch = DefaultBranch ;
Branch = NamedBranch ;
Branch = statements::Statement+ ;
DefaultBranch = statements::Statement+ ;
NamedBranch = name::String+ ;
TypeExpression = SimpleType ;
TypeExpression = SequenceType ;
TypeExpression = DefinedType ;
SimpleType = type::PrimitiveType ;
SequenceType = modifier::Modifier type::PrimitiveType size::Integer ;
DefinedType = typeName::String ;
Declaration = VariableDeclaration ;
Declaration = FunctionDeclaration ;
Declaration = StructureDeclaration ;
VariableDeclaration = Argument ;
VariableDeclaration = WhenHeader ;
VariableDeclaration = type::TypeExpression initExp::Expression ;
FunctionDeclaration = RemoteFunctionDeclaration ;
FunctionDeclaration = LocalFunctionDeclaration ;
RemoteFunctionDeclaration = functionLocation::FunctionLocation ;
LocalFunctionDeclaration = statements::Statement+ ;
StructureDeclaration = properties::Argument+ ;
StructureProperty = name::String type::TypeExpression ;
FunctionCall = function::FunctionDeclaration parameters::Expression+ ;
Statement = CompoundStat ;
Statement = SetStat ;
Statement = DeclarationStat ;
Statement = ReturnStat ;
Statement = IfStat ;
Statement = WhenStat ;
Statement = ForeachStat ;
Statement = SelectStat ;
Statement = FunctionCallStat ;
Statement = ContinueStat ;
Statement = BreakStat ;
Statement = PushStat ;
CompoundStat = statements::Statement+ ;
SetStat = target::Place setValue::Expression ;
DeclarationStat = declaration::Declaration ;
ReturnStat = returnedValue::Expression branch::NamedBranch ;
IfStat = condition::Expression thenStatements::Statement+ elseStatements::Statement+ ;
WhenStat = idExp::Variable whenHeaders::WhenHeader+ statements::Statement+ elseStatements::Statement+ ;
ForeachStat = iteratorName::String sequenceExp::Expression statements::Statement+ ;
SelectStat = matchedExp::Expression selectCases::SelectCase+ selectDefault::SelectDefault ;
FunctionCallStat = functionCall::FunctionCall ;
ContinueStat =  ;
BreakStat =  ;
PushStat = target::Place pushedValue::Expression ;
WhenHeader = headerId::String value::Constant ;
SelectMember = SelectDefault ;
SelectMember = SelectCase ;
SelectDefault = statements::Statement+ ;
SelectCase = values::Constant+ ;
Expression = ConstantExp ;
Expression = OperatorExp ;
Expression = ForwardExp ;
Expression = WithExp ;
Expression = BlockExp ;
Expression = ReasonExp ;
Expression = BODYExp ;
Expression = RequestURIExp ;
Expression = PopExp ;
Expression = FunctionCallExp ;
Expression = Place ;
ConstantExp = value::Constant ;
OperatorExp = opName::String leftExp::Expression rightExp::Expression ;
ForwardExp = isParallel::Boolean exp::Expression ;
WithExp = exp::Expression msgFields::MessageField+ ;
BlockExp = exp::Expression ;
ReasonExp =  ;
BODYExp =  ;
RequestURIExp =  ;
PopExp = source::Place ;
FunctionCallExp = functionCall::FunctionCall ;
Place = SIPHeaderPlace ;
Place = VariablePlace ;
SIPHeaderPlace = header::SIPHeader ;
VariablePlace = PropertyCallPlace ;
VariablePlace = Variable ;
PropertyCallPlace = propName::String source::VariablePlace ;
Variable = source::Declaration ;
MessageField = ReasonMessageField ;
MessageField = HeadedMessageField ;
ReasonMessageField = exp::Expression ;
HeadedMessageField = headerId::String ;
Constant = BooleanConstant ;
Constant = IntegerConstant ;
Constant = StringConstant ;
Constant = URIConstant ;
Constant = SequenceConstant ;
Constant = ResponseConstant ;
BooleanConstant = value::Boolean ;
IntegerConstant = value::Integer ;
StringConstant = value::String ;
URIConstant = uri::String ;
SequenceConstant = values::Constant+ ;
ResponseConstant = response::Response ;
Response = SuccessResponse ;
Response = ErrorResponse ;
SuccessResponse = successKind::SuccessKind ;
ErrorResponse = ClientErrorResponse ;
ErrorResponse = GlobalErrorResponse ;
ErrorResponse = RedirectionErrorResponse ;
ErrorResponse = ServerErrorResponse ;
ErrorResponse = ClientErrorResponse ;
ErrorResponse = GlobalErrorResponse ;
ErrorResponse = RedirectionErrorResponse ;
ErrorResponse = ServerErrorResponse ;
ClientErrorResponse = errorKind::ClientErrorKind ;
GlobalErrorResponse = errorKind::GlobalErrorKind ;
RedirectionErrorResponse = errorKind::RedirectionErrorKind ;
ServerErrorResponse = errorKind::ServerErrorKind ;
Direction = inout:: ;
Direction = in:: ;
Direction = out:: ;
SIPMethod = ACK:: ;
SIPMethod = BYE:: ;
SIPMethod = CANCEL:: ;
SIPMethod = INVITE:: ;
SIPMethod = NOTIFY:: ;
SIPMethod = OPTIONS:: ;
SIPMethod = REACK:: ;
SIPMethod = REGISTER:: ;
SIPMethod = REINVITE:: ;
SIPMethod = REREGISTER:: ;
SIPMethod = RESUBSCRIBE:: ;
SIPMethod = SUBSCRIBE:: ;
ControlMethod = deploy:: ;
ControlMethod = undeploy:: ;
ControlMethod = uninvite:: ;
ControlMethod = unregister:: ;
ControlMethod = unsubscribe:: ;
PrimitiveType = void:: ;
PrimitiveType = bool:: ;
PrimitiveType = int:: ;
PrimitiveType = request:: ;
PrimitiveType = response:: ;
PrimitiveType = string:: ;
PrimitiveType = time:: ;
PrimitiveType = uri:: ;
Modifier = LIFO:: ;
Modifier = FIFO:: ;
FunctionLocation = remote:: ;
FunctionLocation = local:: ;
SIPHeader = CALL_ID:: ;
SIPHeader = CONTACT:: ;
SIPHeader = CSEQ:: ;
SIPHeader = EVENT:: ;
SIPHeader = FROM:: ;
SIPHeader = MAX_FORWARDS:: ;
SIPHeader = SUBSCRIPTION_STATE:: ;
SIPHeader = TO:: ;
SIPHeader = VIA:: ;
SuccessKind = OK:: ;
SuccessKind = ACCEPTED:: ;
ClientErrorKind = ADDRESS_INCOMPLETE:: ;
ClientErrorKind = AMBIGUOUS:: ;
ClientErrorKind = BAD_EXTENSION:: ;
ClientErrorKind = BAD_REQUEST:: ;
ClientErrorKind = BUSY_HERE:: ;
ClientErrorKind = CALL_OR_TRANSACTION_DOES_NOT_EXIST:: ;
ClientErrorKind = EXTENSION_REQUIRED:: ;
ClientErrorKind = FORBIDDEN:: ;
ClientErrorKind = GONE:: ;
ClientErrorKind = INTERVAL_TOO_BRIEF:: ;
ClientErrorKind = LOOP_DETECTED:: ;
ClientErrorKind = METHOD_NOT_ALLOWED:: ;
ClientErrorKind = NOT_ACCEPTABLE_HERE:: ;
ClientErrorKind = NOT_ACCEPTABLE:: ;
ClientErrorKind = NOT_FOUND:: ;
ClientErrorKind = PAYMENT_REQUIRED:: ;
ClientErrorKind = PROXY_AUTHENTICATION_REQUIRED:: ;
ClientErrorKind = REQUESTURI_TOO_LONG:: ;
ClientErrorKind = REQUEST_ENTITY_TOO_LARGE:: ;
ClientErrorKind = REQUEST_PENDING:: ;
ClientErrorKind = REQUEST_TERMINATED:: ;
ClientErrorKind = REQUEST_TIMEOUT:: ;
ClientErrorKind = TEMPORARILY_UNAVAILABLE:: ;
ClientErrorKind = TOO_MANY_HOPS:: ;
ClientErrorKind = UNAUTHORIZED:: ;
ClientErrorKind = UNDECIPHERABLE:: ;
ClientErrorKind = UNSUPPORTED_MEDIA_TYPE:: ;
ClientErrorKind = UNSUPPORTED_URI_SCHEME:: ;
GlobalErrorKind = BUSY_EVERYWHERE:: ;
GlobalErrorKind = DECLINE:: ;
GlobalErrorKind = DOES_NOT_EXIST_ANYWHERE:: ;
GlobalErrorKind = NOT_ACCEPTABLE:: ;
RedirectionErrorKind = ALTERNATIVE_SERVICE:: ;
RedirectionErrorKind = MOVED_PERMANENTLY:: ;
RedirectionErrorKind = MOVED_TEMPORARILY:: ;
RedirectionErrorKind = MULTIPLE_CHOICES:: ;
RedirectionErrorKind = USE_PROXY:: ;
ServerErrorKind = BAD_GATEWAY:: ;
ServerErrorKind = MESSAGE_TOO_LARGE:: ;
ServerErrorKind = NOT_IMPLEMENTED:: ;
ServerErrorKind = SERVER_INTERNAL_ERROR:: ;
ServerErrorKind = SERVER_TIMEOUT:: ;
ServerErrorKind = SERVICE_UNAVAILABLE:: ;
ServerErrorKind = VERSION_NOT_SUPPORTED:: ;
