UEMLObject = UEMLModel ;
UEMLObject = Port ;
UEMLObject = Flow ;
UEMLObject = Object ;
UEMLObject = has::Geometry model::UEMLModel ;
UEMLModel = contains::UEMLObject+ ;
Geometry = object::UEMLObject ;
Port = ResourceRole ;
Port = Anchor ;
Port = ResourceRole ;
Port = Anchor ;
Flow = ResourceFlow ;
Flow = IOFlow ;
Flow = ControlFlow ;
Flow = associationConnector::AssociationConnector ;
Activity = Process ;
Activity = Task ;
Activity = resourceRole::ResourceRole+ parent::Process hasOutput::OutputPort+ hasInput::InputPort+ activityType::ActivityType ;
Object = InformationObject ;
Object = Resource ;
Object = ioFlow::IOFlow ;
InformationObject = controlFlow::ControlFlow ;
Resource = PassiveObject ;
Resource = Service ;
Resource = Agent ;
Resource = carries::ResourceFlow plays::ResourceRole+ resourceType::ResourceType commitment::Commitment+ ;
MaterialResource = ;
HumanResource = ;
ResourceFlow = resourceCarries::Resource+ ;
IOFlow = carries::Object+ ;
ControlFlow = TriggerFlow ;
ControlFlow = ConstraintFlow ;
ControlFlow = carries::InformationObject+ ;
TriggerFlow = ;
ConstraintFlow = ;
ResourceRole = resourcePlays::Resource+ roleQualifier::RoleType in::Activity ;
RoleType = ;
Anchor = OutputPort ;
Anchor = InputPort ;
Anchor = OutputPort ;
Anchor = InputPort ;
OutputPort = activity::Activity ;
InputPort = activity::Activity ;
ConnectionOperator = ;
AssociationConnector = origin::FlowObject+ target::FlowObject+ classAssociation::Flow ;
FlowObject = Event ;
FlowObject = target::AssociationConnector origin::AssociationConnector ;
Event = ;
ResourceType = resource::Resource+ ;
ActivityType = activityT::Activity+ ;
PassiveObject = MaterialResource ;
PassiveObject = Commitment ;
PassiveObject = Contract ;
PassiveObject = MaterialResource ;
PassiveObject = Commitment ;
PassiveObject = Contract ;
Commitment = resource::Resource+ task::Task agentO::Agent agentC::Agent contract::Contract ;
Software = ;
Organisation = ;
Process = child::Activity fulfills::Contract+ realises::Service ;
Service = process::Process ;
Agent = HumanResource ;
Agent = Software ;
Agent = Organisation ;
Agent = obliger::Commitment claimer::Commitment has_parties::Contract ;
Contract = process::Process+ agent::Agent collection_of::Commitment+ ;
Task = fulfills::Commitment+ ;
