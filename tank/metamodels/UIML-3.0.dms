UIML = head::ANY templates::ANY+ interfaces::ANY+ peers::ANY+ ;
Header = metas::ANY+ ;
MetaData = name::ANY content::ANY ;
Peer = id::ANY how::ANY export::ANY source::ANY presentations::ANY+ logics::ANY+ ;
Presentation = id::ANY how::ANY export::ANY base::ANY source::ANY dClasses::ANY+ ;
Logic = id::ANY how::ANY export::ANY source::ANY dComponents::ANY+ ;
DComponent = id::ANY how::ANY export::ANY mapsTo::ANY location::ANY source::ANY dMethods::ANY+ ;
DClass = id::ANY how::ANY export::ANY mapsTo::ANY mapsType::ANY source::ANY dMethods::ANY+ dProperties::ANY+ events::ANY+ listeners::ANY+ ;
DProperty = id::ANY mapsType::ANY mapsTo::ANY returnType::ANY dMethods::ANY+ dParams::ANY+ ;
DMethod = id::ANY how::ANY export::ANY mapsTo::ANY returnType::ANY source::ANY dParams::ANY+ script::ANY ;
DParam = id::ANY type::ANY value::ANY ;
Script = id::ANY type::ANY how::ANY export::ANY value::ANY source::ANY ;
Listener = class::ANY attacher::ANY ;
UsedInTagKind = event:: ;
UsedInTagKind = listener:: ;
UsedInTagKind = part:: ;
MapsTypeKind = attribute:: ;
MapsTypeKind = getMethod:: ;
MapsTypeKind = setMethod:: ;
MapsTypeKind = method:: ;
ExtensibleElement = ;
Source = ;
LocalSource = source::ANY ;
RemoteSource = location::ANY ;
Interface = id::ANY how::ANY export::ANY source::ANY structure::ANY+ style::ANY+ content::ANY+ behavior::ANY+ ;
Structure = id::ANY how::ANY export::ANY source::ANY parts::ANY+ ;
Part = id::ANY how::ANY export::ANY class::ANY wherePart::ANY source::ANY style::ANY content::ANY behavior::ANY parts::ANY+ repeats::ANY+ ;
Style = id::ANY how::ANY export::ANY source::ANY properties::ANY+ ;
Property = name::ANY how::ANY export::ANY values::ANY+ parts::ANY+ events::ANY+ source::ANY constants::ANY+ properties::ANY+ references::ANY+ calls::ANY+ iterators::ANY+ ;
Content = id::ANY how::ANY export::ANY source::ANY constants::ANY+ ;
Behavior = id::ANY how::ANY export::ANY source::ANY rules::ANY+ ;
Repeat = iterator::ANY parts::ANY+ ;
Constant = id::ANY how::ANY export::ANY model::ANY value::ANY source::ANY constants::ANY+ ;
Reference = constant::ANY ;
Rule = id::ANY how::ANY export::ANY source::ANY condition::ANY action::ANY ;
Condition = ;
EventCondition = event::ANY ;
EqualCondition = equal::ANY ;
OpCondition = op::ANY ;
Action = ;
Action_1 = event::ANY properties::ANY+ calls::ANY+ restructures::ANY+ ;
Action_2 = whenTrue::ANY whenFalse::ANY byDefault::ANY ;
Call = name::ANY params::ANY+ ;
Parameter = ;
PropertyParameter = property::ANY ;
ReferenceParameter = reference::ANY ;
CallParameter = call::ANY ;
OperationParameter = op::ANY ;
EventParameter = event::ANY ;
ConstantParameter = constant::ANY ;
IteratorParameter = iterator::ANY ;
Iterator = ;
ConstantIterator = constant::ANY ;
PropertyIterator = property::ANY ;
CallIterator = call::ANY ;
TextIterator = value::ANY ;
Event = class::ANY parts::ANY+ ;
Equal = ;
EqualToConstant = constant::ANY ;
EqualToProperty = property::ANY ;
EqualToReference = reference::ANY ;
EqualToOperation = op::ANY ;
Operation = name::ANY constants::ANY+ properties::ANY+ references::ANY+ calls::ANY+ ops::ANY+ events::ANY+ ;
Restructure = how::ANY atPart::ANY wherePart::ANY source::ANY template::ANY ;
Branch = properties::ANY+ calls::ANY+ restructure::ANY op::ANY equal::ANY event::ANY ;
WhenTrue = ;
WhenFalse = ;
ByDefault = ;
HowKind = append:: ;
HowKind = cascade:: ;
HowKind = replace:: ;
HowKind = union:: ;
HowKind = delete:: ;
ExportKind = hidden:: ;
ExportKind = optional:: ;
ExportKind = required:: ;
WhereKind = first:: ;
WhereKind = last:: ;
WhereKind = before:: ;
WhereKind = after:: ;
Template = ;
BehaviorTemplate = behavior::ANY ;
DClassTemplate = dClass::ANY ;
DComponentTemplate = dComponent::ANY ;
ConstantTemplate = constant::ANY ;
ContentTemplate = content::ANY ;
InterfaceTemplate = interface::ANY ;
LogicTemplate = logic::ANY ;
PartTemplate = part::ANY ;
PeerTemplate = peer::ANY ;
PresentationTemplate = presentation::ANY ;
PropertyTemplate = property::ANY ;
RestructureTemplate = restructure::ANY ;
RuleTemplate = rule::ANY ;
ScriptTemplate = script::ANY ;
StructureTemplate = structure::ANY ;
StyleTemplate = style::ANY ;
