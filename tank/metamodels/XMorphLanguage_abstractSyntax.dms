VarScope = ;
AbstractVar = ;
VarUse = var::ANY ;
MOF::Property = part::ANY ;
Key = property::ANY+ transformation::ANY ;
PatternScope = ;
PatternDefn = scope::ANY parameter::ANY+ body::ANY ;
TRule = superseded::ANY+ superseder::ANY+ transformation::ANY extended::ANY+ extender::ANY+ term::ANY tgt::ANY+ ;
Transformation = keys::ANY+ tRule::ANY+ ;
Query = term::ANY parameter::ANY+ ;
Term = ;
TRuleVar = superseder::ANY+ superseded::ANY+ extended::ANY+ extender::ANY+ ;
PatternVar = query::ANY patternDefn::ANY ;
ExtentVar = src::ANY ;
CompoundTerm = ;
AndTerm = term::ANY+ ;
OrTerm = term::ANY+ ;
NotTerm = term::ANY+ ;
IfTerm = term::ANY+ ;
SimpleTerm = ;
TrackingUse = featureNames::ANY tracking::ANY ;
MOF::Class = tracking::ANY+ ;
PatternUse = tRuleST::ANY arg::ANY+ ;
MofTerm = ;
Condition = reason::ANY ;
MofInstance = isExactly::ANY typeName::ANY instance::ANY ;
MofOrder = lesser::ANY instance::ANY greater::ANY ;
Expression = ;
CoumpoundExpr = ;
CollectionExpr = unique::ANY ordered::ANY ;
FunctionExpr = function::ANY ;
FeatureExpr = collect::ANY featureName::ANY ;
InstanceRef = obj::ANY ;
MOF::Object = obj::ANY ;
SimpleExpr = ;
StringConstant = representation::ANY ;
IntConstant = representation::ANY ;
BooleanConstant = representation::ANY ;
EnumConstant = representation::ANY ;
