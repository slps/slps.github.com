Actuality = Representation ;
Actuality = Representation ;
StateOfAffairs = Actuality ;
StateOfAffairs = Actuality ;
Thing = StateOfAffairs ;
Thing = Meaning ;
Thing = BindableTarget ;
Thing = SemanticFormulation ;
Thing = Namespace ;
Thing = RoleBinding ;
Thing = ReferenceScheme ;
Thing = Set ;
Thing = BodyOfSharedConcepts ;
Thing = BodyOfSharedGuidance ;
Thing = CategorizationScheme ;
Thing = Community ;
Thing = ConceptualSchema ;
Thing = FactModel ;
Thing = Language ;
Thing = LevelOfEnforcement ;
Thing = Res ;
Thing = Situation ;
Thing = SubjectField ;
Thing = TerminologicalDictionary ;
Thing = Viewpoint ;
Thing = name::Name+ ;
Name = ;
Designation = Name ;
Designation = Placeholder ;
Designation = FactSymbol ;
Designation = FactTypeRoleDesignation ;
Designation = NonverbalDesignation ;
Designation = PreferredDesignation ;
Designation = ProhibitedDesignation ;
Designation = Term ;
Designation = implicitlyIsUnderstood::Boolean signifier::Expression ;
Representation = Designation ;
Representation = Definition ;
Representation = Statement ;
Representation = FactTypeForm ;
Representation = CommunicationContent ;
Representation = Description ;
Representation = DescriptiveExample ;
Representation = FormalRepresentation ;
Representation = InformalRepresentation ;
Representation = Note ;
Representation = Reference ;
Representation = meaning::Meaning expression::Expression ;
Meaning = Proposition ;
Meaning = Concept ;
Meaning = Question ;
Meaning = representation::Representation+ ;
Expression = Text ;
Expression = Text ;
BindableTarget = Expression ;
BindableTarget = Variable ;
BindableTarget = Expression ;
BindableTarget = Variable ;
AdoptedDefinition = ;
Definition = AdoptedDefinition ;
Definition = IntensionalDefinition ;
Definition = ExtensionalDefinition ;
Definition = OwnedDefinition ;
Definition = AdoptedDefinition ;
Definition = IntensionalDefinition ;
Definition = ExtensionalDefinition ;
Definition = OwnedDefinition ;
Advice = AdviceOfPossibility ;
Advice = AdviceOfPermission ;
Advice = AdviceOfPossibility ;
Advice = AdviceOfPermission ;
ElementOfGuidance = Advice ;
ElementOfGuidance = ElementOfGovernance ;
ElementOfGuidance = isPracticable::Boolean ;
Proposition = ElementOfGuidance ;
Proposition = Rule ;
Proposition = Fact ;
Proposition = isFalse::Boolean isTrue::Boolean statement::Statement+ isPossiblyTrue::Boolean isObligatedToBeTrue::Boolean isPermittedToBeTrue::Boolean isNecessarilyTrue::Boolean ;
Statement = GuidanceStatement ;
Statement = GuidanceStatement ;
AdviceOfContingency = ;
AdviceOfPossibility = AdviceOfContingency ;
AdviceOfPossibility = AdviceOfContingency ;
AdviceOfOptionality = ;
AdviceOfPermission = AdviceOfOptionality ;
AdviceOfPermission = AdviceOfOptionality ;
AdviceStatement = StatementOfAdviceOfPossibility ;
AdviceStatement = StatementOfAdviceOfPermission ;
AdviceStatement = StatementOfAdviceOfPossibility ;
AdviceStatement = StatementOfAdviceOfPermission ;
GuidanceStatement = AdviceStatement ;
GuidanceStatement = BusinessPolicyStatement ;
GuidanceStatement = RuleStatement ;
GuidanceStatement = AdviceStatement ;
GuidanceStatement = BusinessPolicyStatement ;
GuidanceStatement = RuleStatement ;
AggregationFormulation = ;
ProjectingFormulation = AggregationFormulation ;
ProjectingFormulation = AnswerNominalization ;
ProjectingFormulation = FactTypeNominalization ;
ProjectingFormulation = NounConceptNominalization ;
ProjectingFormulation = QuestionNominalization ;
ProjectingFormulation = projection::Projection ;
LogicalFormulation = ProjectingFormulation ;
LogicalFormulation = Quantification ;
LogicalFormulation = AtomicFormulation ;
LogicalFormulation = LogicalOperation ;
LogicalFormulation = InstantiationFormulation ;
LogicalFormulation = ModalFormulation ;
LogicalFormulation = Objectification ;
LogicalFormulation = PropositionNominalization ;
LogicalFormulation = ProjectingFormulation ;
LogicalFormulation = Quantification ;
LogicalFormulation = AtomicFormulation ;
LogicalFormulation = LogicalOperation ;
LogicalFormulation = InstantiationFormulation ;
LogicalFormulation = ModalFormulation ;
LogicalFormulation = Objectification ;
LogicalFormulation = PropositionNominalization ;
SemanticFormulation = LogicalFormulation ;
SemanticFormulation = Projection ;
SemanticFormulation = ClosedSemanticFormulation ;
SemanticFormulation = LogicalFormulation ;
SemanticFormulation = Projection ;
SemanticFormulation = ClosedSemanticFormulation ;
Projection = BagProjection ;
Projection = ClosedProjection ;
Projection = SetProjection ;
Projection = constrainingFormulation::LogicalFormulation projectionVariable::Variable+ auxiliaryVariable::AuxiliaryVariable+ ;
Variable = AuxiliaryVariable ;
Variable = restrictingFormulation::LogicalFormulation projectionPosition::PositiveInteger rangedoverConcept::Concept isUnitary::Boolean ;
PositiveInteger = ;
NonnegativeInteger = PositiveInteger ;
NonnegativeInteger = PositiveInteger ;
Integer = NonnegativeInteger ;
Integer = value::integer ;
Number = Integer ;
Number = Integer ;
Quantity = Number ;
Quantity = Number ;
NounConcept = Quantity ;
NounConcept = Role ;
NounConcept = ContextualizedConcept ;
NounConcept = Quantity ;
NounConcept = Role ;
NounConcept = ContextualizedConcept ;
Concept = NounConcept ;
Concept = FactType ;
Concept = CategorizationType ;
Concept = ObjectType ;
Concept = ConceptOfThingAsComposite ;
Concept = ConceptOfThingAsContinuant ;
Concept = ConceptOfThingAsDeveloped ;
Concept = ConceptOfThingAsOccurrent ;
Concept = ConceptOfThingAsPrimitive ;
Concept = ConceptOfThingAsUnitary ;
Concept = ConceptOfThingExistingDependently ;
Concept = ConceptOfThingExistingIndependently ;
Concept = DerivableConcept ;
Concept = attributiveNamespace::AttributiveNamespace+ definition::Definition+ moreGeneralConcept::Concept+ category::Concept+ essentialCharacteristic::Characteristic+ instance::Thing+ referenceScheme::ReferenceScheme+ impliedCharacteristic::Characteristic+ necessaryCharacteristic::Characteristic+ designation::Designation+ extension::Set ;
AttributiveNamespace = ;
Namespace = AttributiveNamespace ;
Namespace = VocabularyNamespace ;
Namespace = uri::Uri+ ;
Uri = ;
Text = Uri ;
Text = value::String ;
Characteristic = ;
FactType = Characteristic ;
FactType = AssociativeFactType ;
FactType = AssortmentFactType ;
FactType = BinaryFactType ;
FactType = SpecializationFactType ;
FactType = IsroleofFactType ;
FactType = factTypeForm::FactTypeForm+ role::FactTypeRole+ ;
FactTypeForm = NounForm ;
FactTypeForm = SententialForm ;
FactTypeForm = placeholder::Placeholder+ ;
Placeholder = startingCharacterPosition::PositiveInteger ;
FactTypeRole = roleBinding::RoleBinding+ ;
Role = FactTypeRole ;
Role = FactTypeRole ;
RoleBinding = ;
ReferenceScheme = simplyUsedRole::FactTypeRole+ identifyingCharacteristic::Characteristic+ extensionallyUsedRole::FactTypeRole+ ;
Set = BodyOfSharedMeanings ;
Set = Vocabulary ;
Set = Rulebook ;
Set = cardinality::NonnegativeInteger element::Thing+ ;
AuxiliaryVariable = ;
AnswerNominalization = ;
AssociativeFactType = IspropertyofFactType ;
AssociativeFactType = IspropertyofFactType ;
AssortmentFactType = ;
AtleastnQuantification = ExistentialQuantification ;
AtleastnQuantification = minimumCardinality::NonnegativeInteger ;
Quantification = AtleastnQuantification ;
Quantification = AtmostnQuantification ;
Quantification = ExactlynQuantification ;
Quantification = NumericRangeQuantification ;
Quantification = UniversalQuantification ;
Quantification = scopeFormulation::LogicalFormulation ;
AtmostnQuantification = AtmostoneQuantification ;
AtmostnQuantification = maximumCardinality::NonnegativeInteger ;
AtmostoneQuantification = ;
AtomicFormulation = roleBinding::RoleBinding+ ;
BagProjection = ;
BinaryFactType = PartitiveFactType ;
BinaryFactType = PartitiveFactType ;
BinaryLogicalOperation = Conjunction ;
BinaryLogicalOperation = Disjunction ;
BinaryLogicalOperation = Equivalence ;
BinaryLogicalOperation = ExclusiveDisjunction ;
BinaryLogicalOperation = Implication ;
BinaryLogicalOperation = NandFormulation ;
BinaryLogicalOperation = NorFormulation ;
BinaryLogicalOperation = WhetherornotFormulation ;
BinaryLogicalOperation = logicalOperand2::LogicalFormulation+ logicalOperand1::LogicalFormulation+ ;
LogicalOperation = BinaryLogicalOperation ;
LogicalOperation = LogicalNegation ;
LogicalOperation = logicalOperand::LogicalFormulation ;
BodyOfSharedConcepts = ;
BodyOfSharedGuidance = ;
BodyOfSharedMeanings = elementaryFactType::FactType+ ;
BusinessPolicy = ;
ElementOfGovernance = BusinessPolicy ;
ElementOfGovernance = isDirectlyEnforceable::Boolean ;
BusinessPolicyStatement = ;
BusinessRule = ;
Rule = StructuralRule ;
Rule = StructuralRule ;
BusinessVocabulary = ;
Vocabulary = BusinessVocabulary ;
Vocabulary = BusinessVocabulary ;
CategorizationFactType = ;
SpecializationFactType = CategorizationFactType ;
SpecializationFactType = ContextualizationFactType ;
SpecializationFactType = CategorizationFactType ;
SpecializationFactType = ContextualizationFactType ;
CategorizationScheme = Segmentation ;
CategorizationScheme = ExplicitnessOfRepresentation ;
CategorizationScheme = FactTypeTemplating ;
CategorizationScheme = KindOfGuidanceStatement ;
CategorizationScheme = RealworldNumericalCorrespondence ;
CategorizationScheme = Segmentation ;
CategorizationScheme = ExplicitnessOfRepresentation ;
CategorizationScheme = FactTypeTemplating ;
CategorizationScheme = KindOfGuidanceStatement ;
CategorizationScheme = RealworldNumericalCorrespondence ;
CategorizationType = ;
CharacteristicType = ;
ConceptType = CharacteristicType ;
ConceptType = CharacteristicType ;
ObjectType = ConceptType ;
ObjectType = FundamentalConcept ;
ObjectType = LogicalFormulationKind ;
ObjectType = categorizationScheme::CategorizationScheme+ categorizationType::CategorizationType+ ;
ClosedLogicalFormulation = ;
ClosedSemanticFormulation = ;
ClosedProjection = ;
CommunicationContent = ;
Community = SemanticCommunity ;
Community = SpeechCommunity ;
Community = uri::Uri+ subcommunity::Community+ ;
ConceptOfThingAsComposite = ;
ConceptOfThingAsContinuant = ;
ConceptOfThingAsDeveloped = ;
ConceptOfThingAsOccurrent = ;
ConceptOfThingAsPrimitive = ;
ConceptOfThingAsUnitary = ;
ConceptOfThingExistingDependently = ;
ConceptOfThingExistingIndependently = ;
ConceptualSchema = ;
Conjunction = ;
ContextOfThing = ;
Segmentation = ContextOfThing ;
Segmentation = RepresentationFormality ;
Segmentation = ThingInContext ;
Segmentation = ContextOfThing ;
Segmentation = RepresentationFormality ;
Segmentation = ThingInContext ;
ContextualizationFactType = IsfacetofFactType ;
ContextualizationFactType = IsfacetofFactType ;
ContextualizedConcept = Facet ;
ContextualizedConcept = Facet ;
ContingencyStatement = ;
StatementOfAdviceOfPossibility = ContingencyStatement ;
StatementOfAdviceOfPossibility = NonnecessityStatement ;
StatementOfAdviceOfPossibility = PossibilityStatement ;
StatementOfAdviceOfPossibility = ContingencyStatement ;
StatementOfAdviceOfPossibility = NonnecessityStatement ;
StatementOfAdviceOfPossibility = PossibilityStatement ;
DefiniteDescription = ;
IntensionalDefinition = DefiniteDescription ;
IntensionalDefinition = DefiniteDescription ;
DerivableConcept = ;
Description = ;
DescriptiveExample = ;
Disjunction = ;
Equivalence = ;
ExactlynQuantification = ExactlyoneQuantification ;
ExactlynQuantification = cardinality::NonnegativeInteger ;
ExactlyoneQuantification = ;
ExclusiveDisjunction = ;
ExistentialQuantification = ;
ExplicitnessOfRepresentation = ;
ExtensionalDefinition = ;
Facet = ;
Fact = ;
FactModel = ;
FactSymbol = ;
FactTypeHasFactInFactModel = factType::FactType fact::Fact factModel::FactModel ;
FactTypeNominalization = ;
FactTypeRoleDesignation = ;
FactTypeTemplating = ;
FormalRepresentation = ;
FundamentalConcept = ;
Icon = ;
NonverbalDesignation = Icon ;
NonverbalDesignation = Icon ;
Implication = consequent::LogicalFormulation+ antecedent::LogicalFormulation+ ;
ImpossibilityStatement = ;
StructuralRuleStatement = ImpossibilityStatement ;
StructuralRuleStatement = NecessityStatement ;
StructuralRuleStatement = RestrictedPossibilityStatement ;
StructuralRuleStatement = ImpossibilityStatement ;
StructuralRuleStatement = NecessityStatement ;
StructuralRuleStatement = RestrictedPossibilityStatement ;
RuleStatement = StructuralRuleStatement ;
RuleStatement = OperativeBusinessRuleStatement ;
RuleStatement = StructuralRuleStatement ;
RuleStatement = OperativeBusinessRuleStatement ;
IndividualConcept = ;
InformalRepresentation = ;
InstantiationFormulation = ;
IsfacetofFactType = ;
IspropertyofFactType = ;
IsroleofFactType = ;
KindOfGuidanceStatement = ;
Language = ;
LevelOfEnforcement = ;
LogicalFormulationKind = ;
LogicalNegation = ;
ModalFormulation = NecessityFormulation ;
ModalFormulation = ObligationFormulation ;
ModalFormulation = PermissibilityFormulation ;
ModalFormulation = PossibilityFormulation ;
ModalFormulation = NecessityFormulation ;
ModalFormulation = ObligationFormulation ;
ModalFormulation = PermissibilityFormulation ;
ModalFormulation = PossibilityFormulation ;
NandFormulation = ;
NecessityFormulation = ;
NecessityStatement = ;
NonnecessityStatement = ;
NonobligationStatement = ;
StatementOfAdviceOfPermission = NonobligationStatement ;
StatementOfAdviceOfPermission = OptionalityStatement ;
StatementOfAdviceOfPermission = PermissionStatement ;
StatementOfAdviceOfPermission = NonobligationStatement ;
StatementOfAdviceOfPermission = OptionalityStatement ;
StatementOfAdviceOfPermission = PermissionStatement ;
NorFormulation = ;
Note = ;
NounConceptNominalization = ;
NounForm = ;
NumericRangeQuantification = maximumCardinality::NonnegativeInteger minimumCardinality::NonnegativeInteger ;
Objectification = ;
ObligationFormulation = ;
ObligationStatement = ;
OperativeBusinessRuleStatement = ObligationStatement ;
OperativeBusinessRuleStatement = ProhibitionStatement ;
OperativeBusinessRuleStatement = RestrictedPermissionStatement ;
OperativeBusinessRuleStatement = ObligationStatement ;
OperativeBusinessRuleStatement = ProhibitionStatement ;
OperativeBusinessRuleStatement = RestrictedPermissionStatement ;
OperativeBusinessRule = levelOfEnforcement::LevelOfEnforcement+ ;
OptionalityStatement = ;
OwnedDefinition = ;
PartitiveFactType = ;
PermissibilityFormulation = ;
PermissionStatement = ;
PossibilityFormulation = ;
PossibilityStatement = ;
PreferredDesignation = ;
ProhibitedDesignation = ;
ProhibitionStatement = ;
PropositionNominalization = ;
Question = ;
QuestionNominalization = ;
RealworldNumericalCorrespondence = ;
Reference = ;
RepresentationFormality = ;
Res = ;
RestrictedPermissionStatement = ;
RestrictedPossibilityStatement = ;
Rulebook = ;
SemanticCommunity = speechCommunity::SpeechCommunity+ ;
SpeechCommunity = ;
SententialForm = ;
SetProjection = ;
Situation = ;
SituationalRole = ;
SpeechCommunityAdoptsAdoptedDefinitionCitingReference = speechCommunity::SpeechCommunity adoptedDefinition::AdoptedDefinition reference::Reference ;
StateOfAffairsInvolvesThingInRole = stateOfAffairs::StateOfAffairs thing::Thing role::Role ;
StructuralBusinessRule = ;
StructuralRule = ;
SubjectField = ;
Term = ;
TerminologicalDictionary = uri::Uri+ ;
ThingInContext = ;
UniversalQuantification = ;
Viewpoint = ;
VocabularyNamespace = ;
WhetherornotFormulation = inconsequent::LogicalFormulation+ consequent::LogicalFormulation+ ;
AtleastnQuantificationHasMinimumCardinality = atleastnQuantification::AtleastnQuantification minimumCardinality::NonnegativeInteger ;
AtmostnQuantificationHasMaximumCardinality = atmostnQuantification::AtmostnQuantification maximumCardinality::NonnegativeInteger ;
AtomicFormulationIsBasedOnFactType = atomicFormulation::AtomicFormulation factType::FactType ;
AttributiveNamespaceIsForSubjectConcept = attributiveNamespace::AttributiveNamespace subjectConcept::Concept ;
AttributiveNamespaceIsWithinVocabularyNamespace = attributiveNamespace::AttributiveNamespace vocabularyNamespace::VocabularyNamespace ;
BinaryLogicalOperationHasLogicalOperand1 = binaryLogicalOperation::BinaryLogicalOperation logicalOperand1::LogicalFormulation ;
BinaryLogicalOperationHasLogicalOperand2 = binaryLogicalOperation::BinaryLogicalOperation logicalOperand2::LogicalFormulation ;
BodyOfSharedMeaningsIncludesBodyOfSharedConcepts = bodyOfSharedMeanings::BodyOfSharedMeanings bodyOfSharedConcepts::BodyOfSharedConcepts ;
BodyOfSharedMeaningsIncludesBodyOfSharedGuidance = bodyOfSharedMeanings::BodyOfSharedMeanings bodyOfSharedGuidance::BodyOfSharedGuidance ;
BodyOfSharedMeaningsUnitesSemanticCommunity = bodyOfSharedMeanings::BodyOfSharedMeanings semanticCommunity::SemanticCommunity ;
BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2 = bodyOfSharedMeanings1::BodyOfSharedMeanings bodyOfSharedMeanings2::BodyOfSharedMeanings ;
BusinessPolicyIsBasisForAdvice = businessPolicy::BusinessPolicy advice::Advice ;
BusinessRuleIsDerivedFromBusinessPolicy = businessRule::BusinessRule businessPolicy::BusinessPolicy ;
CategorizationSchemeContainsCategory = categorizationScheme::CategorizationScheme category::Concept ;
CategorizationSchemeIsForGeneralConcept = categorizationScheme::CategorizationScheme generalConcept::ObjectType ;
CategorizationTypeIsForGeneralConcept = categorizationType::CategorizationType generalConcept::ObjectType ;
ClosedLogicalFormulationFormalizesStatement = closedLogicalFormulation::ClosedLogicalFormulation statement::Statement ;
ClosedLogicalFormulationMeansProposition = closedLogicalFormulation::ClosedLogicalFormulation proposition::Proposition ;
ClosedProjectionDefinesFactType = closedProjection::ClosedProjection factType::FactType ;
ClosedProjectionDefinesNounConcept = closedProjection::ClosedProjection nounConcept::NounConcept ;
ClosedProjectionFormalizesDefinition = closedProjection::ClosedProjection definition::Definition ;
ClosedProjectionMeansQuestion = closedProjection::ClosedProjection question::Question ;
ClosedSemanticFormulationFormulatesMeaning = closedSemanticFormulation::ClosedSemanticFormulation meaning::Meaning ;
CommunicationContentIsComposedOfRepresentation = communicationContent::CommunicationContent representation::Representation ;
CommunityHasSubcommunity = community::Community subcommunity::Community ;
CommunityHasUri = community::Community uri::Uri ;
ConceptHasDefinition = concept::Concept definition::Definition ;
ConceptHasDesignation = concept::Concept designation::Designation ;
ConceptHasExtension = concept::Concept extension::Set ;
ConceptHasImpliedCharacteristic = concept::Concept impliedCharacteristic::Characteristic ;
ConceptHasInstance = concept::Concept instance::Thing ;
ConceptHasNecessaryCharacteristic = concept::Concept necessaryCharacteristic::Characteristic ;
ConceptHasSharedUnderstandingBySemanticCommunity = concept::Concept semanticCommunity::SemanticCommunity ;
ConceptIncorporatesCharacteristic = concept::Concept characteristic::Characteristic ;
ConceptIsClosedInConceptualSchema = concept::Concept conceptualSchema::ConceptualSchema ;
ConceptIsIncludedInBodyOfSharedConcepts = concept::Concept bodyOfSharedConcepts::BodyOfSharedConcepts ;
Concept1IsCoextensiveWithConcept2 = concept1::Concept concept2::Concept ;
Concept1SpecializesConcept2 = concept1::Concept concept2::Concept ;
ConceptualSchemaIncludesConcept = conceptualSchema::ConceptualSchema concept::Concept ;
ConceptualSchemaIncludesFact = conceptualSchema::ConceptualSchema fact::Fact ;
DefinitionServesAsDesignation = definition::Definition designation::Designation ;
DescriptionPortraysMeaning = description::Description meaning::Meaning ;
DescriptiveExampleIllustratesMeaning = descriptiveExample::DescriptiveExample meaning::Meaning ;
DesignationHasSignifier = designation::Designation signifier::Expression ;
DesignationIsInNamespace = designation::Designation namespace::Namespace ;
ElementOfGuidanceAuthorizesStateOfAffairs = elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
ElementOfGuidanceIsIncludedInBodyOfSharedGuidance = elementOfGuidance::ElementOfGuidance bodyOfSharedGuidance::BodyOfSharedGuidance ;
ElementOfGuidanceObligatesStateOfAffairs = elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
ElementOfGuidanceProhibitsStateOfAffairs = elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
ExactlynQuantificationHasCardinality = exactlynQuantification::ExactlynQuantification cardinality::NonnegativeInteger ;
ExpressionRepresentsMeaning = expression::Expression meaning::Meaning ;
FactModelIncludesFact = factModel::FactModel fact::Fact ;
FactModelIsBasedOnConceptualSchema = factModel::FactModel conceptualSchema::ConceptualSchema ;
FactTypeFormDemonstratesDesignation = factTypeForm::FactTypeForm designation::Designation ;
FactTypeFormIncorporatesFactSymbol = factTypeForm::FactTypeForm factSymbol::FactSymbol ;
FactTypeFormIsInNamespace = factTypeForm::FactTypeForm namespace::Namespace ;
FactTypeHasFactTypeForm = factType::FactType factTypeForm::FactTypeForm ;
FactTypeInternallyIsClosedInConceptualSchema = factType::FactType conceptualSchema::ConceptualSchema ;
FactTypeIsElementaryInBodyOfSharedMeanings = factType::FactType bodyOfSharedMeanings::BodyOfSharedMeanings ;
FactTypeRoleHasRoleBinding = factTypeRole::FactTypeRole roleBinding::RoleBinding ;
FactTypeRoleIsInFactType = factTypeRole::FactTypeRole factType::FactType ;
ImplicationHasAntecedent = implication::Implication antecedent::LogicalFormulation ;
ImplicationHasConsequent = implication::Implication consequent::LogicalFormulation ;
InstantiationFormulationBindsToBindableTarget = instantiationFormulation::InstantiationFormulation bindableTarget::BindableTarget ;
InstantiationFormulationConsidersConcept = instantiationFormulation::InstantiationFormulation concept::Concept ;
IntensionalDefinitionUsesDelimitingCharacteristic = intensionalDefinition::IntensionalDefinition delimitingCharacteristic::Characteristic ;
LogicalFormulationConstrainsProjection = logicalFormulation::LogicalFormulation projection::Projection ;
LogicalFormulationRestrictsVariable = logicalFormulation::LogicalFormulation variable::Variable ;
LogicalOperationHasLogicalOperand = logicalOperation::LogicalOperation logicalOperand::LogicalFormulation ;
MeaningCorrespondsToThing = meaning::Meaning thing::Thing ;
ModalFormulationEmbedsLogicalFormulation = modalFormulation::ModalFormulation logicalFormulation::LogicalFormulation ;
NameReferencesThing = name::Name thing::Thing ;
NamespaceHasUri = namespace::Namespace uri::Uri ;
Namespace1IncorporatesNamespace2 = namespace1::Namespace namespace2::Namespace ;
NoteCommentsOnMeaning = note::Note meaning::Meaning ;
NumericRangeQuantificationHasMaximumCardinality = numericRangeQuantification::NumericRangeQuantification maximumCardinality::NonnegativeInteger ;
NumericRangeQuantificationHasMinimumCardinality = numericRangeQuantification::NumericRangeQuantification minimumCardinality::NonnegativeInteger ;
ObjectificationBindsToBindableTarget = objectification::Objectification bindableTarget::BindableTarget ;
ObjectificationConsidersLogicalFormulation = objectification::Objectification logicalFormulation::LogicalFormulation ;
OperativeBusinessRuleHasLevelOfEnforcement = operativeBusinessRule::OperativeBusinessRule levelOfEnforcement::LevelOfEnforcement ;
PlaceholderIsAtStartingCharacterPosition = placeholder::Placeholder startingCharacterPosition::PositiveInteger ;
PlaceholderIsInFactTypeForm = placeholder::Placeholder factTypeForm::FactTypeForm ;
PlaceholderUsesDesignation = placeholder::Placeholder designation::Designation ;
ProjectingFormulationBindsToBindableTarget = projectingFormulation::ProjectingFormulation bindableTarget::BindableTarget ;
ProjectingFormulationHasProjection = projectingFormulation::ProjectingFormulation projection::Projection ;
ProjectionHasAuxiliaryVariable = projection::Projection auxiliaryVariable::AuxiliaryVariable ;
ProjectionIsOnVariable = projection::Projection variable::Variable ;
PropositionIsBasedOnFactType = proposition::Proposition factType::FactType ;
PropositionNominalizationBindsToBindableTarget = propositionNominalization::PropositionNominalization bindableTarget::BindableTarget ;
PropositionNominalizationConsidersLogicalFormulation = propositionNominalization::PropositionNominalization logicalFormulation::LogicalFormulation ;
QuantificationIntroducesVariable = quantification::Quantification variable::Variable ;
QuantificationScopesOverLogicalFormulation = quantification::Quantification logicalFormulation::LogicalFormulation ;
Quantity1EqualsQuantity2 = quantity1::Quantity quantity2::Quantity ;
Quantity1IsLessThanQuantity2 = quantity1::Quantity quantity2::Quantity ;
ReferencePointsToInformationSource = reference::Reference informationSource::CommunicationContent ;
ReferenceSchemeExtensionallyUsesFactTypeRole = referenceScheme::ReferenceScheme factTypeRole::FactTypeRole ;
ReferenceSchemeIsForConcept = referenceScheme::ReferenceScheme concept::Concept ;
ReferenceSchemeSimplyUsesFactTypeRole = referenceScheme::ReferenceScheme factTypeRole::FactTypeRole ;
ReferenceSchemeUsesCharacteristic = referenceScheme::ReferenceScheme characteristic::Characteristic ;
ReferenceSupportsMeaning = reference::Reference meaning::Meaning ;
RepresentationHasExpression = representation::Representation expression::Expression ;
RepresentationIsInDesignationContext = representation::Representation designationContext::Concept ;
RepresentationIsInSubjectField = representation::Representation subjectField::SubjectField ;
RepresentationRepresentsMeaning = representation::Representation meaning::Meaning ;
RepresentationUsesVocabulary = representation::Representation vocabulary::Vocabulary ;
ResIsSensoryManifestationOfSignifier = res::Res signifier::Expression ;
RoleBindingBindsToBindableTarget = roleBinding::RoleBinding bindableTarget::BindableTarget ;
RoleBindingOccursInAtomicFormulation = roleBinding::RoleBinding atomicFormulation::AtomicFormulation ;
RoleRangesOverObjectType = role::Role objectType::ObjectType ;
RulebookIncludesRepresentation = rulebook::Rulebook representation::Representation ;
SemanticCommunityHasSpeechCommunity = semanticCommunity::SemanticCommunity speechCommunity::SpeechCommunity ;
SetHasCardinality = set::Set cardinality::NonnegativeInteger ;
SpeechCommunityDeterminesRulebook = speechCommunity::SpeechCommunity rulebook::Rulebook ;
SpeechCommunityOwnsOwnedDefinition = speechCommunity::SpeechCommunity ownedDefinition::OwnedDefinition ;
SpeechCommunityOwnsVocabulary = speechCommunity::SpeechCommunity vocabulary::Vocabulary ;
SpeechCommunityRegulatesItsUsageOfSignifier = speechCommunity::SpeechCommunity signifier::Expression ;
SpeechCommunityUsesLanguage = speechCommunity::SpeechCommunity language::Language ;
SpeechCommunityUsesVocabulary = speechCommunity::SpeechCommunity vocabulary::Vocabulary ;
StatementExpressesProposition = statement::Statement proposition::Proposition ;
TermDenotesThing = term::Term thing::Thing ;
TerminologicalDictionaryExpressesBodyOfSharedMeanings = terminologicalDictionary::TerminologicalDictionary bodyOfSharedMeanings::BodyOfSharedMeanings ;
TerminologicalDictionaryHasUri = terminologicalDictionary::TerminologicalDictionary uri::Uri ;
TerminologicalDictionaryPresentsVocabulary = terminologicalDictionary::TerminologicalDictionary vocabulary::Vocabulary ;
ThingIsInSet = thing::Thing set::Set ;
Thing1IsThing2 = thing1::Thing thing2::Thing ;
VariableHasProjectionPosition = variable::Variable projectionPosition::PositiveInteger ;
VariableIsFreesWithinSemanticFormulation = variable::Variable semanticFormulation::SemanticFormulation ;
VariableMapsToFactTypeRole = variable::Variable factTypeRole::FactTypeRole ;
VariableRangesOverConcept = variable::Variable concept::Concept ;
VocabularyIsDesignedForSpeechCommunity = vocabulary::Vocabulary speechCommunity::SpeechCommunity ;
VocabularyIsExpressedInLanguage = vocabulary::Vocabulary language::Language ;
VocabularyIsUsedToExpressBodyOfSharedMeanings = vocabulary::Vocabulary bodyOfSharedMeanings::BodyOfSharedMeanings ;
VocabularyNamespaceIsDerivedFromVocabulary = vocabularyNamespace::VocabularyNamespace vocabulary::Vocabulary ;
VocabularyNamespaceIsForLanguage = vocabularyNamespace::VocabularyNamespace language::Language ;
VocabularyNamespaceIsSpecificToDesignationContext = vocabularyNamespace::VocabularyNamespace designationContext::Concept ;
VocabularyNamespaceIsSpecificToSubjectField = vocabularyNamespace::VocabularyNamespace subjectField::SubjectField ;
Vocabulary1IncorporatesVocabulary2 = vocabulary1::Vocabulary vocabulary2::Vocabulary ;
WhetherornotFormulationHasConsequent = whetherornotFormulation::WhetherornotFormulation consequent::LogicalFormulation ;
WhetherornotFormulationHasInconsequent = whetherornotFormulation::WhetherornotFormulation inconsequent::LogicalFormulation ;
