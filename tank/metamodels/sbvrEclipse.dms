Actuality = ;
StateOfAffairs = ;
Thing = name::ANY+ ;
Name = ;
Designation = implicitlyIsUnderstood::ANY signifier::ANY ;
Representation = meaning::ANY expression::ANY ;
Meaning = representation::ANY+ ;
Expression = ;
BindableTarget = ;
AdoptedDefinition = ;
Definition = ;
Advice = ;
ElementOfGuidance = isPracticable::ANY ;
Proposition = isFalse::ANY isTrue::ANY statement::ANY+ isPossiblyTrue::ANY isObligatedToBeTrue::ANY isPermittedToBeTrue::ANY isNecessarilyTrue::ANY ;
Statement = ;
AdviceOfContingency = ;
AdviceOfPossibility = ;
AdviceOfOptionality = ;
AdviceOfPermission = ;
AdviceStatement = ;
GuidanceStatement = ;
AggregationFormulation = ;
ProjectingFormulation = projection::ANY ;
LogicalFormulation = ;
SemanticFormulation = ;
Projection = constrainingFormulation::ANY projectionVariable::ANY+ auxiliaryVariable::ANY+ ;
Variable = restrictingFormulation::ANY projectionPosition::ANY rangedoverConcept::ANY isUnitary::ANY ;
PositiveInteger = ;
NonnegativeInteger = ;
Integer = value::ANY ;
Number = ;
Quantity = ;
NounConcept = ;
Concept = attributiveNamespace::ANY+ definition::ANY+ moreGeneralConcept::ANY+ category::ANY+ essentialCharacteristic::ANY+ instance::ANY+ referenceScheme::ANY+ impliedCharacteristic::ANY+ necessaryCharacteristic::ANY+ designation::ANY+ extension::ANY ;
AttributiveNamespace = ;
Namespace = uri::ANY+ ;
Uri = ;
Text = value::ANY ;
Characteristic = ;
FactType = factTypeForm::ANY+ role::ANY+ ;
FactTypeForm = placeholder::ANY+ ;
Placeholder = startingCharacterPosition::ANY ;
FactTypeRole = roleBinding::ANY+ ;
Role = ;
RoleBinding = ;
ReferenceScheme = simplyUsedRole::ANY+ identifyingCharacteristic::ANY+ extensionallyUsedRole::ANY+ ;
Set = cardinality::ANY element::ANY+ ;
AuxiliaryVariable = ;
AnswerNominalization = ;
AssociativeFactType = ;
AssortmentFactType = ;
AtleastnQuantification = minimumCardinality::ANY ;
Quantification = scopeFormulation::ANY ;
AtmostnQuantification = maximumCardinality::ANY ;
AtmostoneQuantification = ;
AtomicFormulation = roleBinding::ANY+ ;
BagProjection = ;
BinaryFactType = ;
BinaryLogicalOperation = logicalOperand2::ANY+ logicalOperand1::ANY+ ;
LogicalOperation = logicalOperand::ANY ;
BodyOfSharedConcepts = ;
BodyOfSharedGuidance = ;
BodyOfSharedMeanings = elementaryFactType::ANY+ ;
BusinessPolicy = ;
ElementOfGovernance = isDirectlyEnforceable::ANY ;
BusinessPolicyStatement = ;
BusinessRule = ;
Rule = ;
BusinessVocabulary = ;
Vocabulary = ;
CategorizationFactType = ;
SpecializationFactType = ;
CategorizationScheme = ;
CategorizationType = ;
CharacteristicType = ;
ConceptType = ;
ObjectType = categorizationScheme::ANY+ categorizationType::ANY+ ;
ClosedLogicalFormulation = ;
ClosedSemanticFormulation = ;
ClosedProjection = ;
CommunicationContent = ;
Community = uri::ANY+ subcommunity::ANY+ ;
ConceptOfThingAsComposite = ;
ConceptOfThingAsContinuant = ;
ConceptOfThingAsDeveloped = ;
ConceptOfThingAsOccurrent = ;
ConceptOfThingAsPrimitive = ;
ConceptOfThingAsUnitary = ;
ConceptOfThingExistingDependently = ;
ConceptOfThingExistingIndependently = ;
ConceptualSchema = ;
Conjunction = ;
ContextOfThing = ;
Segmentation = ;
ContextualizationFactType = ;
ContextualizedConcept = ;
ContingencyStatement = ;
StatementOfAdviceOfPossibility = ;
DefiniteDescription = ;
IntensionalDefinition = ;
DerivableConcept = ;
Description = ;
DescriptiveExample = ;
Disjunction = ;
Equivalence = ;
ExactlynQuantification = cardinality::ANY ;
ExactlyoneQuantification = ;
ExclusiveDisjunction = ;
ExistentialQuantification = ;
ExplicitnessOfRepresentation = ;
ExtensionalDefinition = ;
Facet = ;
Fact = ;
FactModel = ;
FactSymbol = ;
FactTypeHasFactInFactModel = factType::ANY fact::ANY factModel::ANY ;
FactTypeNominalization = ;
FactTypeRoleDesignation = ;
FactTypeTemplating = ;
FormalRepresentation = ;
FundamentalConcept = ;
Icon = ;
NonverbalDesignation = ;
Implication = consequent::ANY+ antecedent::ANY+ ;
ImpossibilityStatement = ;
StructuralRuleStatement = ;
RuleStatement = ;
IndividualConcept = ;
InformalRepresentation = ;
InstantiationFormulation = ;
IsfacetofFactType = ;
IspropertyofFactType = ;
IsroleofFactType = ;
KindOfGuidanceStatement = ;
Language = ;
LevelOfEnforcement = ;
LogicalFormulationKind = ;
LogicalNegation = ;
ModalFormulation = ;
NandFormulation = ;
NecessityFormulation = ;
NecessityStatement = ;
NonnecessityStatement = ;
NonobligationStatement = ;
StatementOfAdviceOfPermission = ;
NorFormulation = ;
Note = ;
NounConceptNominalization = ;
NounForm = ;
NumericRangeQuantification = maximumCardinality::ANY minimumCardinality::ANY ;
Objectification = ;
ObligationFormulation = ;
ObligationStatement = ;
OperativeBusinessRuleStatement = ;
OperativeBusinessRule = levelOfEnforcement::ANY+ ;
OptionalityStatement = ;
OwnedDefinition = ;
PartitiveFactType = ;
PermissibilityFormulation = ;
PermissionStatement = ;
PossibilityFormulation = ;
PossibilityStatement = ;
PreferredDesignation = ;
ProhibitedDesignation = ;
ProhibitionStatement = ;
PropositionNominalization = ;
Question = ;
QuestionNominalization = ;
RealworldNumericalCorrespondence = ;
Reference = ;
RepresentationFormality = ;
Res = ;
RestrictedPermissionStatement = ;
RestrictedPossibilityStatement = ;
Rulebook = ;
SemanticCommunity = speechCommunity::ANY+ ;
SpeechCommunity = ;
SententialForm = ;
SetProjection = ;
Situation = ;
SituationalRole = ;
SpeechCommunityAdoptsAdoptedDefinitionCitingReference = speechCommunity::ANY adoptedDefinition::ANY reference::ANY ;
StateOfAffairsInvolvesThingInRole = stateOfAffairs::ANY thing::ANY role::ANY ;
StructuralBusinessRule = ;
StructuralRule = ;
SubjectField = ;
Term = ;
TerminologicalDictionary = uri::ANY+ ;
ThingInContext = ;
UniversalQuantification = ;
Viewpoint = ;
VocabularyNamespace = ;
WhetherornotFormulation = inconsequent::ANY+ consequent::ANY+ ;
AtleastnQuantificationHasMinimumCardinality = atleastnQuantification::ANY minimumCardinality::ANY ;
AtmostnQuantificationHasMaximumCardinality = atmostnQuantification::ANY maximumCardinality::ANY ;
AtomicFormulationIsBasedOnFactType = atomicFormulation::ANY factType::ANY ;
AttributiveNamespaceIsForSubjectConcept = attributiveNamespace::ANY subjectConcept::ANY ;
AttributiveNamespaceIsWithinVocabularyNamespace = attributiveNamespace::ANY vocabularyNamespace::ANY ;
BinaryLogicalOperationHasLogicalOperand1 = binaryLogicalOperation::ANY logicalOperand1::ANY ;
BinaryLogicalOperationHasLogicalOperand2 = binaryLogicalOperation::ANY logicalOperand2::ANY ;
BodyOfSharedMeaningsIncludesBodyOfSharedConcepts = bodyOfSharedMeanings::ANY bodyOfSharedConcepts::ANY ;
BodyOfSharedMeaningsIncludesBodyOfSharedGuidance = bodyOfSharedMeanings::ANY bodyOfSharedGuidance::ANY ;
BodyOfSharedMeaningsUnitesSemanticCommunity = bodyOfSharedMeanings::ANY semanticCommunity::ANY ;
BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2 = bodyOfSharedMeanings1::ANY bodyOfSharedMeanings2::ANY ;
BusinessPolicyIsBasisForAdvice = businessPolicy::ANY advice::ANY ;
BusinessRuleIsDerivedFromBusinessPolicy = businessRule::ANY businessPolicy::ANY ;
CategorizationSchemeContainsCategory = categorizationScheme::ANY category::ANY ;
CategorizationSchemeIsForGeneralConcept = categorizationScheme::ANY generalConcept::ANY ;
CategorizationTypeIsForGeneralConcept = categorizationType::ANY generalConcept::ANY ;
ClosedLogicalFormulationFormalizesStatement = closedLogicalFormulation::ANY statement::ANY ;
ClosedLogicalFormulationMeansProposition = closedLogicalFormulation::ANY proposition::ANY ;
ClosedProjectionDefinesFactType = closedProjection::ANY factType::ANY ;
ClosedProjectionDefinesNounConcept = closedProjection::ANY nounConcept::ANY ;
ClosedProjectionFormalizesDefinition = closedProjection::ANY definition::ANY ;
ClosedProjectionMeansQuestion = closedProjection::ANY question::ANY ;
ClosedSemanticFormulationFormulatesMeaning = closedSemanticFormulation::ANY meaning::ANY ;
CommunicationContentIsComposedOfRepresentation = communicationContent::ANY representation::ANY ;
CommunityHasSubcommunity = community::ANY subcommunity::ANY ;
CommunityHasUri = community::ANY uri::ANY ;
ConceptHasDefinition = concept::ANY definition::ANY ;
ConceptHasDesignation = concept::ANY designation::ANY ;
ConceptHasExtension = concept::ANY extension::ANY ;
ConceptHasImpliedCharacteristic = concept::ANY impliedCharacteristic::ANY ;
ConceptHasInstance = concept::ANY instance::ANY ;
ConceptHasNecessaryCharacteristic = concept::ANY necessaryCharacteristic::ANY ;
ConceptHasSharedUnderstandingBySemanticCommunity = concept::ANY semanticCommunity::ANY ;
ConceptIncorporatesCharacteristic = concept::ANY characteristic::ANY ;
ConceptIsClosedInConceptualSchema = concept::ANY conceptualSchema::ANY ;
ConceptIsIncludedInBodyOfSharedConcepts = concept::ANY bodyOfSharedConcepts::ANY ;
Concept1IsCoextensiveWithConcept2 = concept1::ANY concept2::ANY ;
Concept1SpecializesConcept2 = concept1::ANY concept2::ANY ;
ConceptualSchemaIncludesConcept = conceptualSchema::ANY concept::ANY ;
ConceptualSchemaIncludesFact = conceptualSchema::ANY fact::ANY ;
DefinitionServesAsDesignation = definition::ANY designation::ANY ;
DescriptionPortraysMeaning = description::ANY meaning::ANY ;
DescriptiveExampleIllustratesMeaning = descriptiveExample::ANY meaning::ANY ;
DesignationHasSignifier = designation::ANY signifier::ANY ;
DesignationIsInNamespace = designation::ANY namespace::ANY ;
ElementOfGuidanceAuthorizesStateOfAffairs = elementOfGuidance::ANY stateOfAffairs::ANY ;
ElementOfGuidanceIsIncludedInBodyOfSharedGuidance = elementOfGuidance::ANY bodyOfSharedGuidance::ANY ;
ElementOfGuidanceObligatesStateOfAffairs = elementOfGuidance::ANY stateOfAffairs::ANY ;
ElementOfGuidanceProhibitsStateOfAffairs = elementOfGuidance::ANY stateOfAffairs::ANY ;
ExactlynQuantificationHasCardinality = exactlynQuantification::ANY cardinality::ANY ;
ExpressionRepresentsMeaning = expression::ANY meaning::ANY ;
FactModelIncludesFact = factModel::ANY fact::ANY ;
FactModelIsBasedOnConceptualSchema = factModel::ANY conceptualSchema::ANY ;
FactTypeFormDemonstratesDesignation = factTypeForm::ANY designation::ANY ;
FactTypeFormIncorporatesFactSymbol = factTypeForm::ANY factSymbol::ANY ;
FactTypeFormIsInNamespace = factTypeForm::ANY namespace::ANY ;
FactTypeHasFactTypeForm = factType::ANY factTypeForm::ANY ;
FactTypeInternallyIsClosedInConceptualSchema = factType::ANY conceptualSchema::ANY ;
FactTypeIsElementaryInBodyOfSharedMeanings = factType::ANY bodyOfSharedMeanings::ANY ;
FactTypeRoleHasRoleBinding = factTypeRole::ANY roleBinding::ANY ;
FactTypeRoleIsInFactType = factTypeRole::ANY factType::ANY ;
ImplicationHasAntecedent = implication::ANY antecedent::ANY ;
ImplicationHasConsequent = implication::ANY consequent::ANY ;
InstantiationFormulationBindsToBindableTarget = instantiationFormulation::ANY bindableTarget::ANY ;
InstantiationFormulationConsidersConcept = instantiationFormulation::ANY concept::ANY ;
IntensionalDefinitionUsesDelimitingCharacteristic = intensionalDefinition::ANY delimitingCharacteristic::ANY ;
LogicalFormulationConstrainsProjection = logicalFormulation::ANY projection::ANY ;
LogicalFormulationRestrictsVariable = logicalFormulation::ANY variable::ANY ;
LogicalOperationHasLogicalOperand = logicalOperation::ANY logicalOperand::ANY ;
MeaningCorrespondsToThing = meaning::ANY thing::ANY ;
ModalFormulationEmbedsLogicalFormulation = modalFormulation::ANY logicalFormulation::ANY ;
NameReferencesThing = name::ANY thing::ANY ;
NamespaceHasUri = namespace::ANY uri::ANY ;
Namespace1IncorporatesNamespace2 = namespace1::ANY namespace2::ANY ;
NoteCommentsOnMeaning = note::ANY meaning::ANY ;
NumericRangeQuantificationHasMaximumCardinality = numericRangeQuantification::ANY maximumCardinality::ANY ;
NumericRangeQuantificationHasMinimumCardinality = numericRangeQuantification::ANY minimumCardinality::ANY ;
ObjectificationBindsToBindableTarget = objectification::ANY bindableTarget::ANY ;
ObjectificationConsidersLogicalFormulation = objectification::ANY logicalFormulation::ANY ;
OperativeBusinessRuleHasLevelOfEnforcement = operativeBusinessRule::ANY levelOfEnforcement::ANY ;
PlaceholderIsAtStartingCharacterPosition = placeholder::ANY startingCharacterPosition::ANY ;
PlaceholderIsInFactTypeForm = placeholder::ANY factTypeForm::ANY ;
PlaceholderUsesDesignation = placeholder::ANY designation::ANY ;
ProjectingFormulationBindsToBindableTarget = projectingFormulation::ANY bindableTarget::ANY ;
ProjectingFormulationHasProjection = projectingFormulation::ANY projection::ANY ;
ProjectionHasAuxiliaryVariable = projection::ANY auxiliaryVariable::ANY ;
ProjectionIsOnVariable = projection::ANY variable::ANY ;
PropositionIsBasedOnFactType = proposition::ANY factType::ANY ;
PropositionNominalizationBindsToBindableTarget = propositionNominalization::ANY bindableTarget::ANY ;
PropositionNominalizationConsidersLogicalFormulation = propositionNominalization::ANY logicalFormulation::ANY ;
QuantificationIntroducesVariable = quantification::ANY variable::ANY ;
QuantificationScopesOverLogicalFormulation = quantification::ANY logicalFormulation::ANY ;
Quantity1EqualsQuantity2 = quantity1::ANY quantity2::ANY ;
Quantity1IsLessThanQuantity2 = quantity1::ANY quantity2::ANY ;
ReferencePointsToInformationSource = reference::ANY informationSource::ANY ;
ReferenceSchemeExtensionallyUsesFactTypeRole = referenceScheme::ANY factTypeRole::ANY ;
ReferenceSchemeIsForConcept = referenceScheme::ANY concept::ANY ;
ReferenceSchemeSimplyUsesFactTypeRole = referenceScheme::ANY factTypeRole::ANY ;
ReferenceSchemeUsesCharacteristic = referenceScheme::ANY characteristic::ANY ;
ReferenceSupportsMeaning = reference::ANY meaning::ANY ;
RepresentationHasExpression = representation::ANY expression::ANY ;
RepresentationIsInDesignationContext = representation::ANY designationContext::ANY ;
RepresentationIsInSubjectField = representation::ANY subjectField::ANY ;
RepresentationRepresentsMeaning = representation::ANY meaning::ANY ;
RepresentationUsesVocabulary = representation::ANY vocabulary::ANY ;
ResIsSensoryManifestationOfSignifier = res::ANY signifier::ANY ;
RoleBindingBindsToBindableTarget = roleBinding::ANY bindableTarget::ANY ;
RoleBindingOccursInAtomicFormulation = roleBinding::ANY atomicFormulation::ANY ;
RoleRangesOverObjectType = role::ANY objectType::ANY ;
RulebookIncludesRepresentation = rulebook::ANY representation::ANY ;
SemanticCommunityHasSpeechCommunity = semanticCommunity::ANY speechCommunity::ANY ;
SetHasCardinality = set::ANY cardinality::ANY ;
SpeechCommunityDeterminesRulebook = speechCommunity::ANY rulebook::ANY ;
SpeechCommunityOwnsOwnedDefinition = speechCommunity::ANY ownedDefinition::ANY ;
SpeechCommunityOwnsVocabulary = speechCommunity::ANY vocabulary::ANY ;
SpeechCommunityRegulatesItsUsageOfSignifier = speechCommunity::ANY signifier::ANY ;
SpeechCommunityUsesLanguage = speechCommunity::ANY language::ANY ;
SpeechCommunityUsesVocabulary = speechCommunity::ANY vocabulary::ANY ;
StatementExpressesProposition = statement::ANY proposition::ANY ;
TermDenotesThing = term::ANY thing::ANY ;
TerminologicalDictionaryExpressesBodyOfSharedMeanings = terminologicalDictionary::ANY bodyOfSharedMeanings::ANY ;
TerminologicalDictionaryHasUri = terminologicalDictionary::ANY uri::ANY ;
TerminologicalDictionaryPresentsVocabulary = terminologicalDictionary::ANY vocabulary::ANY ;
ThingIsInSet = thing::ANY set::ANY ;
Thing1IsThing2 = thing1::ANY thing2::ANY ;
VariableHasProjectionPosition = variable::ANY projectionPosition::ANY ;
VariableIsFreesWithinSemanticFormulation = variable::ANY semanticFormulation::ANY ;
VariableMapsToFactTypeRole = variable::ANY factTypeRole::ANY ;
VariableRangesOverConcept = variable::ANY concept::ANY ;
VocabularyIsDesignedForSpeechCommunity = vocabulary::ANY speechCommunity::ANY ;
VocabularyIsExpressedInLanguage = vocabulary::ANY language::ANY ;
VocabularyIsUsedToExpressBodyOfSharedMeanings = vocabulary::ANY bodyOfSharedMeanings::ANY ;
VocabularyNamespaceIsDerivedFromVocabulary = vocabularyNamespace::ANY vocabulary::ANY ;
VocabularyNamespaceIsForLanguage = vocabularyNamespace::ANY language::ANY ;
VocabularyNamespaceIsSpecificToDesignationContext = vocabularyNamespace::ANY designationContext::ANY ;
VocabularyNamespaceIsSpecificToSubjectField = vocabularyNamespace::ANY subjectField::ANY ;
Vocabulary1IncorporatesVocabulary2 = vocabulary1::ANY vocabulary2::ANY ;
WhetherornotFormulationHasConsequent = whetherornotFormulation::ANY consequent::ANY ;
WhetherornotFormulationHasInconsequent = whetherornotFormulation::ANY inconsequent::ANY ;
