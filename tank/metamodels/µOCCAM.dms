Process = ;
StopProcess =  ;
SkipProcess =  ;
Action = ;
Construction =  ;
Instance = name::ANY ;
Assignment = variable::ANY expression::ANY ;
Input = channel::ANY variable::ANY ;
Output = channel::ANY expression::ANY ;
Sequence = ;
NormalSequence = process::ANY ;
ReplicatorSequence = replicator::ANY ;
Conditional = ;
NormalConditional = choice::ANY ;
ReplicatorConditional = replicator::ANY ;
Loop = boolean::ANY process::ANY ;
Parallel = ;
NormalParallel = process::ANY ;
ReplicatorParallel = replicator::ANY ;
Alternation = alternative::ANY ;
NormalAlternation = process::ANY ;
ReplicatorAlternation = replicator::ANY ;
Choice = boolean::ANY process::ANY ;
BooleanRef = expression::ANY ;
Alternative = guard::ANY process::ANY ;
Guard = ;
InputGuard = input::ANY ;
BooleanGuard = boolean::ANY ;
Replicator = name::ANY base::ANY count::ANY ;
Base = expression::ANY ;
Count = expression::ANY ;
Type = primitiveType::ANY expression::ANY ;
PrimitiveType = isInt::ANY isChan::ANY ;
Literal = integer::ANY ;
Element = name::ANY subscript::ANY ;
Subscript = expression::ANY ;
Variable = element::ANY ;
Channel = element::ANY ;
Operand = ;
VariableOPerand = ;
LiteralOperand = ;
ExpressionOperand = operand::ANY ;
Expression = ;
MonadicExpression = monadicOperator::ANY ;
DyadicExpression = operandRight::ANY dyadicOperator::ANY ;
SimpleExpression = operand::ANY ;
Specification = ;
Declaration = ;
TypeDeclaration = type::ANY ;
IntDeclaration = name::ANY expression::ANY ;
ValDeclaration = name::ANY expression::ANY ;
Definition = name::ANY procedureBody::ANY ;
Formal = name::ANY primitiveType::ANY ;
ProcedureBody = name::ANY process::ANY ;
Actual = element::ANY ;
MonadicOperator = minus::ANY not::ANY ;
DyadicOperator = plus::ANY minus::ANY star::ANY slash::ANY or::ANY inverseSlash::ANY and::ANY eq::ANY ne::ANY lt::ANY gt::ANY le::ANY ge::ANY ;
