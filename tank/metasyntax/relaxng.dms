pattern = element::((name::STR | open-name-class) common-atts open-patterns) ;
pattern = attribute::(common-atts (name::STR | open-name-class) other pattern?) ;
pattern = group::(common-atts open-patterns) ;
pattern = interleave::(common-atts open-patterns) ;
pattern = choice::(common-atts open-patterns) ;
pattern = optional::(common-atts open-patterns) ;
pattern = zeroOrMore::(common-atts open-patterns) ;
pattern = oneOrMore::(common-atts open-patterns) ;
pattern = list::(common-atts open-patterns) ;
pattern = mixed::(common-atts open-patterns) ;
pattern = ref::(name::STR common-atts other) ;
pattern = parentRef::(name::STR common-atts other) ;
pattern = empty::(common-atts other) ;
pattern = text::(common-atts other) ;
pattern = value::(type::STR? common-atts STR) ;
pattern = data::(type::STR common-atts other param::(name::STR common-atts STR)* except::(common-atts open-patterns)?) ;
pattern = notAllowed::(common-atts other) ;
pattern = externalRef::(href::STR common-atts other) ;
pattern = grammar::(common-atts grammar-content) ;
grammar-content = other (start-element | define-element | div::(common-atts grammar-content) | include::(href::STR common-atts include-content))* ;
include-content = other (start-element | define-element | div::(common-atts include-content))* ;
start-element = start::(combine-att common-atts open-pattern) ;
define-element = define::(name::STR combine-att common-atts open-patterns) ;
combine-att = combine::('choice' | 'interleave')? ;
open-patterns = other pattern+ ;
open-pattern = other pattern ;
name-class = name::(common-atts STR) ;
name-class = anyName::(common-atts except-name-class) ;
name-class = nsName::(common-atts except-name-class) ;
name-class = choice::(common-atts open-name-classes) ;
except-name-class = other except::open-name-classes? ;
open-name-classes = other name-class+ ;
open-name-class = other name-class ;
common-atts = ns::STR? datatypeLibrary::STR? ANY* ;
other = (ANY | STR | any)** ;
any = (ANY | STR | any)* ;
