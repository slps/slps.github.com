Grammar:
        ContextFreePriorities("context-free" "priorities" Priorities)
Grammar:
        ImpSectionImpSection
Grammar:
        KernalStartSyms("start-symbols" Syms)
Grammar:
        Aliases("aliases" Aliases)
Grammar:
        Variables("variables" Prods)
Grammar:
        ContextFreeSyntax("context-free" "syntax" Prods)
Grammar:
        LexicalRestrictions("lexical" "restrictions" Restrictions)
Grammar:
        Sorts("sorts" Syms)
Grammar:
        ContextFreeStartSyms("context-free" "start-symbols" Syms)
Grammar:
        Syntax("syntax" Prods)
Grammar:
        Restrictions("restrictions" Restrictions)
Grammar:
        Priorities("priorities" Priorities)
Grammar:
        LexicalStartSyms("lexical" "start-symbols" Syms)
Grammar:
        LexicalVariables("lexical" "variables" Prods)
Grammar:
        ContextFreeRestrictions("context-free" "restrictions" Restrictions)
Grammar:
        LexicalPriorities("lexical" "priorities" Priorities)
Grammar:
        LexicalSyntax("lexical" "syntax" Prods)
Restrictions:
        DefaultRestriction*
Priority:
        Chain{Group ">"}+
Priority:
        Assoc(Group Assoc Group)
Section:
        Exports("exports" Grammar*)
Section:
        Hiddens("hiddens" Grammar*)
Import:
        Bracket("(" Import ")")
Import:
        ModuleModuleName
Import:
        RenamedModule(ModuleName Renamings)
Attrs:
        Attrs("{" {Attribute ","}* "}")
Attrs:
        NoAttrsEPSILON
Imports:
        Import*
Sections:
        Section*
Annotation:
        Default("{" {ATerm ","}+ "}")
ATermAttribute:
        DefaultEPSILON
Module:
        Module("module" ModuleName ImpSection* Sections)
ATerm:
        RealRealCon
ATerm:
        Appl(AFun "(" {ATerm ","}+ ")")
ATerm:
        Annotated(ATerm Annotation)
ATerm:
        Placeholder("<" ATerm ">")
ATerm:
        IntIntCon
ATerm:
        FunAFun
ATerm:
        List("[" {ATerm ","}* "]")
OptExp:
        Present("e" IntCon)
OptExp:
        AbsentEPSILON
Character:
        eof"\EOF"
Character:
        shortShortChar
Character:
        NumericNumChar
Character:
        top"\TOP"
Character:
        label_start"\LABEL_START"
Character:
        bot"\BOT"
Label:
        IdConEPSILON
Label:
        QuotedStrCon
SDF:
        Definition("definition" def::Definition)
Lookaheads:
        SingleLookahead
Lookaheads:
        Alt(Lookaheads "|" Lookaheads)
Lookaheads:
        List("[[" {Lookahead ","}* "]]")
Lookaheads:
        Bracket("(" Lookaheads ")")
Aliases:
        Alias*
Group:
        NonTransitive(Group ".")
Group:
        AssocGroup("{" Assoc ":" Prods "}")
Group:
        WithArguments(Group ArgumentIndicator)
Group:
        SimpleGroupProd
Group:
        ProdsGroup("{" Prods "}")
Prods:
        Prod*
Range:
        Range(Character "-" Character)
Range:
        Character
Renaming:
        production(Prod "=>" Prod)
Renaming:
        Sym(Sym "=>" Sym)
Class:
        SimpleCharClass("[" Range* "]")
Class:
        Bracket("(" Class ")")
Class:
        Comp("~" Class)
Class:
        Diff(Class "/" Class)
Class:
        ISect(Class "/\" Class)
Class:
        Union(Class "\/" Class)
ImpSection:
        Imports("imports" Imports)
Sym:
        Empty("(" ")")
Sym:
        LitStrCon
Sym:
        Opt(Sym "?")
Sym:
        Seq("(" Sym Sym+ ")")
Sym:
        Bracket("(" Sym ")")
Sym:
        CILitSingleQuotedStrCon
Sym:
        Varsym("<" Sym "-VAR" ">")
Sym:
        SortSort
Sym:
        Lex("<" Sym "-LEX" ">")
Sym:
        Layout"LAYOUT"
Sym:
        CF("<" Sym "-CF" ">")
Sym:
        ParameterizedSort(Sort "[[" {Sym ","}+ "]]")
Sym:
        IterStar(Sym "*")
Sym:
        IterStarSep("{" Sym Sym "}" "*")
Sym:
        Iter(Sym "+")
Sym:
        ClassClass
Sym:
        IterSep("{" Sym Sym "}" "+")
Sym:
        Alt(Sym "|" Sym)
Sym:
        Label(Label ":" Sym)
RealCon:
        RealCon(IntCon "." NatCon OptExp)
Lookahead:
        Classclass::Class
Lookahead:
        Seq(class::Class "." las::Lookaheads)
Priorities:
        {Priority ","}*
FunctionName:
        QuotedFunStrCon
FunctionName:
        UnquotedFunIdCon
Restriction:
        Follow(Syms "-/-" Lookaheads)
Syms:
        Sym*
Prod:
        Prod(Syms "->" Sym Attrs)
ModuleName:
        Parameterized(id::ModuleId "[" actuals::Syms "]")
ModuleName:
        UnparameterizedEPSILON
Assoc:
        NonAssoc"non-assoc"
Assoc:
        Assoc"assoc"
Assoc:
        Left"left"
Assoc:
        Right"right"
ArgumentIndicator:
        Default("<" {NatCon ","}+ ">")
IntCon:
        Negative("-" NatCon)
IntCon:
        NaturalNatCon
IntCon:
        Positive("+" NatCon)
Definition:
        modulesModule*
Alias:
        Alias(Sym "->" Sym)
AFun:
        QuotedStrCon
AFun:
        UnquotedEPSILON
Attribute:
        TermATermAttribute
Attribute:
        AssocAssoc
Attribute:
        Bracket"bracket"
Attribute:
        Id("id" "(" ModuleName ")")
Attribute:
        Avoid"avoid"
Attribute:
        Prefer"prefer"
Attribute:
        Reject"reject"
Renamings:
        Renamings("[" Renaming* "]")
