Grammar = 'context-free' 'priorities' Priorities ;
Grammar = ImpSection ;
Grammar = 'start-symbols' Syms ;
Grammar = 'aliases' Aliases ;
Grammar = 'variables' Prods ;
Grammar = 'context-free' 'syntax' Prods ;
Grammar = 'lexical' 'restrictions' Restrictions ;
Grammar = 'sorts' Syms ;
Grammar = 'context-free' 'start-symbols' Syms ;
Grammar = 'syntax' Prods ;
Grammar = 'restrictions' Restrictions ;
Grammar = 'priorities' Priorities ;
Grammar = 'lexical' 'start-symbols' Syms ;
Grammar = 'lexical' 'variables' Prods ;
Grammar = 'context-free' 'restrictions' Restrictions ;
Grammar = 'lexical' 'priorities' Priorities ;
Grammar = 'lexical' 'syntax' Prods ;
Restrictions = Restriction* ;
Priority = Group'>' ;
Priority = Group Assoc Group ;
Section = 'exports' Grammar* ;
Section = 'hiddens' Grammar* ;
Import = '(' Import ')' ;
Import = ModuleName ;
Import = ModuleName Renamings ;
Attrs = '{' Attribute',' '}' ;
Attrs = ;
Imports = Import* ;
Sections = Section* ;
Annotation = '{' ATerm',' '}' ;
ATermAttribute = ;
Module = 'module' ModuleName ImpSection* Sections ;
ATerm = RealCon ;
ATerm = AFun '(' ATerm',' ')' ;
ATerm = ATerm Annotation ;
ATerm = '<' ATerm '>' ;
ATerm = IntCon ;
ATerm = AFun ;
ATerm = '[' ATerm',' ']' ;
OptExp = 'e' IntCon ;
OptExp = ;
Character = '\EOF' ;
Character = ShortChar ;
Character = NumChar ;
Character = '\TOP' ;
Character = '\LABEL_START' ;
Character = '\BOT' ;
Label = ;
Label = StrCon ;
SDF = 'definition' def::Definition ;
Lookaheads = Lookahead ;
Lookaheads = Lookaheads '|' Lookaheads ;
Lookaheads = '[[' Lookahead',' ']]' ;
Lookaheads = '(' Lookaheads ')' ;
Aliases = Alias* ;
Group = Group '.' ;
Group = '{' Assoc ':' Prods '}' ;
Group = Group ArgumentIndicator ;
Group = Prod ;
Group = '{' Prods '}' ;
Prods = Prod* ;
Range = Character '-' Character ;
Range = Character ;
Renaming = Prod '=>' Prod ;
Renaming = Sym '=>' Sym ;
Class = '[' Range* ']' ;
Class = '(' Class ')' ;
Class = '~' Class ;
Class = Class '/' Class ;
Class = Class '/\' Class ;
Class = Class '\/' Class ;
ImpSection = 'imports' Imports ;
Sym = '(' ')' ;
Sym = StrCon ;
Sym = Sym '?' ;
Sym = '(' Sym Sym+ ')' ;
Sym = '(' Sym ')' ;
Sym = SingleQuotedStrCon ;
Sym = '<' Sym '-VAR' '>' ;
Sym = Sort ;
Sym = '<' Sym '-LEX' '>' ;
Sym = 'LAYOUT' ;
Sym = '<' Sym '-CF' '>' ;
Sym = Sort '[[' Sym',' ']]' ;
Sym = Sym '*' ;
Sym = '{' Sym Sym '}' '*' ;
Sym = Sym '+' ;
Sym = Class ;
Sym = '{' Sym Sym '}' '+' ;
Sym = Sym '|' Sym ;
Sym = Label ':' Sym ;
RealCon = IntCon '.' NatCon OptExp ;
Lookahead = class::Class ;
Lookahead = class::Class '.' las::Lookaheads ;
Priorities = Priority',' ;
FunctionName = StrCon ;
FunctionName = IdCon ;
Restriction = Syms '-/-' Lookaheads ;
Syms = Sym* ;
Prod = Syms '->' Sym Attrs ;
ModuleName = id::ModuleId '[' actuals::Syms ']' ;
ModuleName = ;
Assoc = 'non-assoc' ;
Assoc = 'assoc' ;
Assoc = 'left' ;
Assoc = 'right' ;
ArgumentIndicator = '<' NatCon',' '>' ;
IntCon = '-' NatCon ;
IntCon = NatCon ;
IntCon = '+' NatCon ;
Definition = Module* ;
Alias = Sym '->' Sym ;
AFun = StrCon ;
AFun = ;
Attribute = ATermAttribute ;
Attribute = Assoc ;
Attribute = 'bracket' ;
Attribute = 'id' '(' ModuleName ')' ;
Attribute = 'avoid' ;
Attribute = 'prefer' ;
Attribute = 'reject' ;
Renamings = '[' Renaming* ']' ;
