module Main

exports
  sorts
        Grammar Restrictions Priority Section Import Attrs Imports Sections Annotation ATermAttribute Module ATerm OptExp Character Label SDF Lookaheads Aliases Group Prods Range Renaming Class ImpSection Sym RealCon Lookahead Priorities FunctionName Restriction Syms Prod ModuleName Assoc ArgumentIndicator IntCon Definition Alias AFun Attribute Renamings 
  context-free syntax
        ContextFreePriorities("context-free" "priorities" Priorities) -> Grammar

        ImpSectionImpSection -> Grammar

        KernalStartSyms("start-symbols" Syms) -> Grammar

        Aliases("aliases" Aliases) -> Grammar

        Variables("variables" Prods) -> Grammar

        ContextFreeSyntax("context-free" "syntax" Prods) -> Grammar

        LexicalRestrictions("lexical" "restrictions" Restrictions) -> Grammar

        Sorts("sorts" Syms) -> Grammar

        ContextFreeStartSyms("context-free" "start-symbols" Syms) -> Grammar

        Syntax("syntax" Prods) -> Grammar

        Restrictions("restrictions" Restrictions) -> Grammar

        Priorities("priorities" Priorities) -> Grammar

        LexicalStartSyms("lexical" "start-symbols" Syms) -> Grammar

        LexicalVariables("lexical" "variables" Prods) -> Grammar

        ContextFreeRestrictions("context-free" "restrictions" Restrictions) -> Grammar

        LexicalPriorities("lexical" "priorities" Priorities) -> Grammar

        LexicalSyntax("lexical" "syntax" Prods) -> Grammar

        DefaultRestriction* -> Restrictions

        ChainGroup">" -> Priority

        Assoc(Group Assoc Group) -> Priority

        Exports("exports" Grammar*) -> Section

        Hiddens("hiddens" Grammar*) -> Section

        Bracket("(" Import ")") -> Import

        ModuleModuleName -> Import

        RenamedModule(ModuleName Renamings) -> Import

        Attrs("{" Attribute"," "}") -> Attrs

        NoAttrs -> Attrs

        Import* -> Imports

        Section* -> Sections

        Default("{" ATerm"," "}") -> Annotation

        Default -> ATermAttribute

        Module("module" ModuleName ImpSection* Sections) -> Module

        RealRealCon -> ATerm

        Appl(AFun "(" ATerm"," ")") -> ATerm

        Annotated(ATerm Annotation) -> ATerm

        Placeholder("<" ATerm ">") -> ATerm

        IntIntCon -> ATerm

        FunAFun -> ATerm

        List("[" ATerm"," "]") -> ATerm

        Present("e" IntCon) -> OptExp

        Absent -> OptExp

        eof"\EOF" -> Character

        shortShortChar -> Character

        NumericNumChar -> Character

        top"\TOP" -> Character

        label_start"\LABEL_START" -> Character

        bot"\BOT" -> Character

        IdCon -> Label

        QuotedStrCon -> Label

        Definition("definition" def::Definition) -> SDF

        SingleLookahead -> Lookaheads

        Alt(Lookaheads "|" Lookaheads) -> Lookaheads

        List("[[" Lookahead"," "]]") -> Lookaheads

        Bracket("(" Lookaheads ")") -> Lookaheads

        Alias* -> Aliases

        NonTransitive(Group ".") -> Group

        AssocGroup("{" Assoc ":" Prods "}") -> Group

        WithArguments(Group ArgumentIndicator) -> Group

        SimpleGroupProd -> Group

        ProdsGroup("{" Prods "}") -> Group

        Prod* -> Prods

        Range(Character "-" Character) -> Range

        Character -> Range

        production(Prod "=>" Prod) -> Renaming

        Sym(Sym "=>" Sym) -> Renaming

        SimpleCharClass("[" Range* "]") -> Class

        Bracket("(" Class ")") -> Class

        Comp("~" Class) -> Class

        Diff(Class "/" Class) -> Class

        ISect(Class "/\" Class) -> Class

        Union(Class "\/" Class) -> Class

        Imports("imports" Imports) -> ImpSection

        Empty("(" ")") -> Sym

        LitStrCon -> Sym

        Opt(Sym "?") -> Sym

        Seq("(" Sym Sym+ ")") -> Sym

        Bracket("(" Sym ")") -> Sym

        CILitSingleQuotedStrCon -> Sym

        Varsym("<" Sym "-VAR" ">") -> Sym

        SortSort -> Sym

        Lex("<" Sym "-LEX" ">") -> Sym

        Layout"LAYOUT" -> Sym

        CF("<" Sym "-CF" ">") -> Sym

        ParameterizedSort(Sort "[[" Sym"," "]]") -> Sym

        IterStar(Sym "*") -> Sym

        IterStarSep("{" Sym Sym "}" "*") -> Sym

        Iter(Sym "+") -> Sym

        ClassClass -> Sym

        IterSep("{" Sym Sym "}" "+") -> Sym

        Alt(Sym "|" Sym) -> Sym

        Label(Label ":" Sym) -> Sym

        RealCon(IntCon "." NatCon OptExp) -> RealCon

        Classclass::Class -> Lookahead

        Seq(class::Class "." las::Lookaheads) -> Lookahead

        Priority"," -> Priorities

        QuotedFunStrCon -> FunctionName

        UnquotedFunIdCon -> FunctionName

        Follow(Syms "-/-" Lookaheads) -> Restriction

        Sym* -> Syms

        Prod(Syms "->" Sym Attrs) -> Prod

        Parameterized(id::ModuleId "[" actuals::Syms "]") -> ModuleName

        Unparameterized -> ModuleName

        NonAssoc"non-assoc" -> Assoc

        Assoc"assoc" -> Assoc

        Left"left" -> Assoc

        Right"right" -> Assoc

        Default("<" NatCon"," ">") -> ArgumentIndicator

        Negative("-" NatCon) -> IntCon

        NaturalNatCon -> IntCon

        Positive("+" NatCon) -> IntCon

        modulesModule* -> Definition

        Alias(Sym "->" Sym) -> Alias

        QuotedStrCon -> AFun

        Unquoted -> AFun

        TermATermAttribute -> Attribute

        AssocAssoc -> Attribute

        Bracket"bracket" -> Attribute

        Id("id" "(" ModuleName ")") -> Attribute

        Avoid"avoid" -> Attribute

        Prefer"prefer" -> Attribute

        Reject"reject" -> Attribute

        Renamings("[" Renaming* "]") -> Renamings
