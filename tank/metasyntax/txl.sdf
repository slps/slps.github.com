module Main

exports
  sorts
        Program Statement IncludeStatement KeysStatement Keyword CompoundsStatement Compound CommentsStatement CommentConvention TokensStatement TokenPattern DefineStatement RedefineStatement RedefineOrDefine RESET DotDotDotBar BarDotDotDot BarLiteralsAndTypes LiteralOrType Type FormatCues OptNL FormatCue FormatId TypeSpec TypeModifier TypeRepeater TypeidOrQuotedLiteral RuleStatement FunctionStatement DollarStar ExternalStatement FormalArgument ConstructDeconstructImportExportOrCondition Constructor Deconstructor Condition Importer Exporter SkippingType Pattern LiteralOrVariable Replacement LiteralOrExpression Expression RuleApplications RuleoptNL RuleApplication CommentNL NEWoptNL EachArgs VaridOrLiteral Literal QuotedLiteral UnquotedLiteral Varid Typeid Ruleid 
  context-free syntax
        Statement* -> Program

        IncludeStatement -> Statement
        KeysStatement -> Statement
        CompoundsStatement -> Statement
        CommentsStatement -> Statement
        TokensStatement -> Statement
        DefineStatement -> Statement
        RedefineStatement -> Statement
        RuleStatement -> Statement
        FunctionStatement -> Statement
        ExternalStatement -> Statement
        Comment NL -> Statement

        "include" Stringlit NL -> IncludeStatement

        "keys" NL IN Keyword* EX NL "end" "keys" NL NL -> KeysStatement

        Literal SP -> Keyword
        Key SP -> Keyword

        "compounds" NL IN Compound* EX NL "end" "compounds" NL NL -> CompoundsStatement

        Literal SP -> Compound

        "comments" NL IN CommentConvention* EX "end" "comments" NL NL -> CommentsStatement

        Literal SP Literal NL -> CommentConvention
        Literal NL -> CommentConvention

        "tokens" NL IN TokenPattern* EX "end" "tokens" NL NL -> TokensStatement

        Typeid TAB-24 Stringlit NL -> TokenPattern
        TAB-16 "|" TAB-24 Stringlit NL -> TokenPattern
        Typeid TAB-16 "..."? "|" TAB-24 Stringlit NL -> TokenPattern
        Typeid TAB-16 "+" TAB-24 Stringlit NL -> TokenPattern
        Comment NL -> TokenPattern

        "define" Typeid NL IN IN LiteralOrType* NL BarLiteralsAndTypes* EX EX "end" "define" NL NL RESET -> DefineStatement

        "redefine" Typeid NL IN IN DotDotDotBar? LiteralOrType* NL BarLiteralsAndTypes* BarDotDotDot? EX EX "end" RedefineOrDefine NL NL RESET -> RedefineStatement

        "redefine" -> RedefineOrDefine
        "define" -> RedefineOrDefine

        EX EX EX EX EX EX EX EX EX -> RESET

        "..." EX NL "|" TAB IN -> DotDotDotBar

        EX "|" TAB IN "..." NL -> BarDotDotDot

        EX "|" TAB IN LiteralOrType* NL -> BarLiteralsAndTypes

        Type SP -> LiteralOrType
        Literal SP -> LiteralOrType

        FormatCues -> Type
        "[" TypeSpec "]" -> Type

        IN IN FormatCue+ EX EX OptNL? -> FormatCues

        NL -> OptNL

        "[" FormatId "]" -> FormatCue

        "NL" -> FormatId
        "IN" IN -> FormatId
        "EX" EX -> FormatId

        TypeModifier? Typeid TypeRepeater? -> TypeSpec
        "!" -> TypeSpec

        "opt" -> TypeModifier
        "repeat" -> TypeModifier
        "list" -> TypeModifier
        "attr" -> TypeModifier
        "see" -> TypeModifier
        "not" -> TypeModifier
        "push" -> TypeModifier
        "pop" -> TypeModifier
        ":" -> TypeModifier
        "~" -> TypeModifier
        ">" -> TypeModifier
        "<" -> TypeModifier

        "+" -> TypeRepeater
        "*" -> TypeRepeater
        "?" -> TypeRepeater
        "," -> TypeRepeater
        ",+" -> TypeRepeater

        Typeid -> TypeidOrQuotedLiteral
        QuotedLiteral -> TypeidOrQuotedLiteral

        "rule" Ruleid FormalArgument* NL IN IN ConstructDeconstructImportExportOrCondition* EX SkippingType? "replace" DollarStar? SP Type NL IN Pattern ConstructDeconstructImportExportOrCondition* EX "by" NL IN Replacement EX EX "end" "rule" NL NL -> RuleStatement
        "rule" Ruleid FormalArgument* NL IN IN ConstructDeconstructImportExportOrCondition* EX SkippingType? "match" DollarStar? SP Type NL IN Pattern EX EX ConstructDeconstructImportExportOrCondition* "end" "rule" NL NL -> RuleStatement

        "function" Ruleid FormalArgument* NL IN IN ConstructDeconstructImportExportOrCondition* EX SkippingType? "replace" DollarStar? SP Type NL IN Pattern ConstructDeconstructImportExportOrCondition* EX "by" NL IN Replacement EX EX "end" "function" NL NL -> FunctionStatement
        "function" Ruleid FormalArgument* NL IN IN ConstructDeconstructImportExportOrCondition* EX SkippingType? "match" DollarStar? SP Type NL IN Pattern ConstructDeconstructImportExportOrCondition* EX EX "end" "function" NL NL -> FunctionStatement

        SP "$" -> DollarStar
        SP "*" -> DollarStar

        "external" "rule" Ruleid FormalArgument* NL NL -> ExternalStatement
        "external" "function" Ruleid FormalArgument* NL NL -> ExternalStatement

        Varid SP Type CommentNL* -> FormalArgument

        Constructor -> ConstructDeconstructImportExportOrCondition
        Deconstructor -> ConstructDeconstructImportExportOrCondition
        Condition -> ConstructDeconstructImportExportOrCondition
        Importer -> ConstructDeconstructImportExportOrCondition
        Exporter -> ConstructDeconstructImportExportOrCondition
        EX Comment NL IN -> ConstructDeconstructImportExportOrCondition

        EX "construct" Varid SP Type NL IN Replacement -> Constructor

        EX SkippingType? "deconstruct" "not"? "*"? Type? Varid NL IN Pattern -> Deconstructor

        EX "where" "not"? "all"? NL IN CommentNL* Expression NL -> Condition
        EX "assert" "not"? "all"? NL IN CommentNL* Expression NL -> Condition

        EX "import" Varid Type? NL IN Pattern? -> Importer

        EX "export" Varid Type? NL IN Replacement? -> Exporter

        "skipping" SP Type CommentNL* -> SkippingType

        LiteralOrVariable* NL -> Pattern

        Literal SP -> LiteralOrVariable
        Varid SP Type SP -> LiteralOrVariable
        Varid SP -> LiteralOrVariable

        LiteralOrExpression* NL -> Replacement

        Literal SP -> LiteralOrExpression
        Expression SP -> LiteralOrExpression

        Varid RuleApplications? -> Expression

        IN IN CommentNL* RuleApplication+ EX EX RuleoptNL? -> RuleApplications

        NL -> RuleoptNL

        SP "[" Ruleid VaridOrLiteral* EachArgs? "]" CommentNL* -> RuleApplication
        SP Lengthrule VaridOrLiteral* EachArgs? "]" CommentNL* -> RuleApplication

        SP SP Comment NEWoptNL? -> CommentNL

        NL -> NEWoptNL

        SP "each" VaridOrLiteral* -> EachArgs

        SP Varid -> VaridOrLiteral
        SP Literal -> VaridOrLiteral

        QuotedLiteral -> Literal
        UnquotedLiteral -> Literal
        SP Comment NEWoptNL? -> Literal

        "'" UnquotedLiteral -> QuotedLiteral
        "'" Key -> QuotedLiteral

        SP "'" -> UnquotedLiteral
        Token -> UnquotedLiteral

        Id -> Varid

        Id -> Typeid
        SP Literal -> Typeid

        Id -> Ruleid
        Special -> Ruleid
        "#" -> Ruleid
        Key -> Ruleid
