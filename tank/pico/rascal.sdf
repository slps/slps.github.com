module Main

exports
  sorts
        Program IdType Statement Type Expression Declarations 
  context-free syntax
        program("begin" decls::Declarations body::Statement";" "end") -> Program

        idtype(id::Id ":" t::Type) -> IdType

        cond("if" cond::Expression "then" thenPart::Statement";" "else" elsePart::Statement";" "fi") -> Statement

        assign(var::Id ":=" val::Expression) -> Statement

        cond("if" cond::Expression "then" thenPart::Statement";" "fi") -> Statement

        loop("while" cond::Expression "do" body::Statement";" "od") -> Statement

        string"string" -> Type

        natural"natural" -> Type

        nil"nil-type" -> Type

        "(" e::Expression ")" -> Expression

        natconnatcon::Natural -> Expression

        idname::Id -> Expression

        strconstring::String -> Expression

        concat(lhs::Expression "||" rhs::Expression) -> Expression

        add(lhs::Expression "+" rhs::Expression) -> Expression

        min(lhs::Expression "-" rhs::Expression) -> Expression

        "declare" decls::IdType"," ";" -> Declarations
