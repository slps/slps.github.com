Declarations = declarations::(Declaration*) ;
Declaration.content = id::STR name::STR ;
Declaration = SortDeclaration ;
Declaration = VariableDeclaration ;
Declaration = OperatorDeclaration ;
VariableDeclaration = variabledecl::(Declaration.content Sort) ;
SortDeclaration.content = Declaration.content ;
SortDeclaration = NamedSort ;
OperatorDeclaration.content = Declaration.content ;
OperatorDeclaration = NamedOperator ;
Variable = variable::refvariable::STR ;
NamedSort = namedsort::(SortDeclaration.content Sort) ;
NamedOperator = namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
Term.content = ;
Term = Variable ;
Term = Operator ;
Sort.content = ;
Sort = BuiltInSort ;
Sort = MultisetSort ;
Sort = ProductSort ;
Sort = UserSort ;
BuiltInSort = ;
MultisetSort = multisetsort::Sort ;
ProductSort = productsort::(Sort*) ;
UserSort = usersort::declaration::STR ;
Operator.content = subterm::Term* ;
Operator = BuiltInOperator ;
Operator = BuiltInConstant ;
Operator = MultisetOperator ;
Operator = Tuple ;
Operator = UserOperator ;
BuiltInOperator.content = Operator.content ;
BuiltInOperator = ;
BuiltInConstant.content = Operator.content ;
BuiltInConstant = ;
MultisetOperator.content = Operator.content ;
MultisetOperator = ;
Tuple = tuple::Operator.content ;
UserOperator = useroperator::(declaration::STR Operator.content) ;
