root = grammar tree ;
grammar = root::nonterminal* production* ;
nonterminal = STR ;
production = label::label? nonterminal::nonterminal expression ;
label = STR ;
expression = epsilon:: ;
expression = empty:: ;
expression = value::value ;
expression = any:: ;
expression = terminal::terminal ;
expression = nonterminal::nonterminal ;
expression = selectable::(selector::selector expression) ;
expression = marked::expression ;
expression = sequence::(expression+) ;
expression = choice::(expression+) ;
expression = allof::(expression+) ;
expression = not::expression ;
expression = optional::expression ;
expression = plus::expression ;
expression = star::expression ;
expression = seplistplus::(expression expression) ;
expression = sepliststar::(expression expression) ;
value = int:: ;
value = string:: ;
terminal = STR ;
selector = STR ;
tree = epsilon:: ;
tree = any::ANY ;
tree = terminal::terminal ;
tree = nonterminal::(production tree) ;
tree = selectable::(selector::selector tree) ;
tree = value::(int::INT | string::STR) ;
tree = sequence::(tree*) ;
tree = choice::(expression tree) ;
tree = optional::(tree?) ;
tree = plus::(tree+) ;
tree = star::(tree*) ;
