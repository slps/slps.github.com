sequence = (transformation | atomic)* ;
transformation = folding-unfolding-transformation ;
transformation = refactoring-transformation ;
transformation = increasing-decreasing-transformation ;
transformation = concrete-revising-transformation ;
transformation = abstract-revising-transformation ;
transformation = decorative-transformation ;
transformation = rename-rename ;
transformation = reroot-reroot ;
transformation = folding-unfolding-transformation ;
transformation = refactoring-transformation ;
transformation = increasing-transformation ;
transformation = decreasing-transformation ;
transformation = concrete-revising-transformation ;
transformation = abstract-revising-transformation ;
transformation = decorative-transformation ;
transformation = rename ;
transformation = reroot ;
transformation = strip ;
transformation = dump ;
transformation = bypass ;
folding-unfolding-transformation = unfold-fold ;
folding-unfolding-transformation = fold-unfold ;
folding-unfolding-transformation = inline-extract ;
folding-unfolding-transformation = extract-inline ;
folding-unfolding-transformation = abridge-detour ;
folding-unfolding-transformation = detour-abridge ;
folding-unfolding-transformation = unchain-chain ;
folding-unfolding-transformation = chain-unchain ;
folding-unfolding-transformation = unfold ;
folding-unfolding-transformation = fold ;
folding-unfolding-transformation = inline ;
folding-unfolding-transformation = extract ;
folding-unfolding-transformation = abridge ;
folding-unfolding-transformation = detour ;
folding-unfolding-transformation = unchain ;
folding-unfolding-transformation = chain ;
unfold-fold = nonterminal::nonterminal in::scope? ;
nonterminal = STR ;
nonterminal = STR ;
scope = label::label ;
scope = nonterminal::nonterminal ;
scope = label::label ;
scope = nonterminal::nonterminal ;
label = STR ;
label = STR ;
fold-unfold = nonterminal::nonterminal in::scope? ;
inline-extract = production in::scope? ;
production = label::label? nonterminal::nonterminal expression ;
production = label::label? nonterminal::nonterminal expression ;
expression = epsilon:: ;
expression = empty:: ;
expression = value::value ;
expression = any:: ;
expression = terminal::terminal ;
expression = nonterminal::nonterminal ;
expression = selectable::(selector::selector expression) ;
expression = marked::expression ;
expression = sequence::(expression+) ;
expression = choice::(expression+) ;
expression = allof::(expression+) ;
expression = not::expression ;
expression = optional::expression ;
expression = plus::expression ;
expression = star::expression ;
expression = seplistplus::(expression expression) ;
expression = sepliststar::(expression expression) ;
expression = epsilon:: ;
expression = empty:: ;
expression = value::value ;
expression = any:: ;
expression = terminal::terminal ;
expression = nonterminal::nonterminal ;
expression = selectable::(selector::selector expression) ;
expression = marked::expression ;
expression = sequence::(expression+) ;
expression = choice::(expression+) ;
expression = allof::(expression+) ;
expression = not::expression ;
expression = optional::expression ;
expression = plus::expression ;
expression = star::expression ;
expression = seplistplus::(expression expression) ;
expression = sepliststar::(expression expression) ;
value = int:: ;
value = string:: ;
value = int:: ;
value = string:: ;
terminal = STR ;
terminal = STR ;
selector = STR ;
selector = STR ;
extract-inline = production in::scope? ;
abridge-detour = production ;
detour-abridge = production ;
unchain-chain = production ;
chain-unchain = production ;
unfold = nonterminal::nonterminal in::scope? ;
fold = nonterminal::nonterminal in::scope? ;
inline = nonterminal ;
extract = production in::scope? ;
abridge = production ;
detour = production ;
unchain = production ;
chain = production ;
refactoring-transformation = massage-massage ;
refactoring-transformation = factor-factor ;
refactoring-transformation = deyaccify-yaccify ;
refactoring-transformation = yaccify-deyaccify ;
refactoring-transformation = eliminate-introduce ;
refactoring-transformation = introduce-eliminate ;
refactoring-transformation = vertical-horizontal ;
refactoring-transformation = horizontal-vertical ;
refactoring-transformation = assoc-iterate ;
refactoring-transformation = iterate-assoc ;
refactoring-transformation = equate-clone ;
refactoring-transformation = clone-equate ;
refactoring-transformation = massage ;
refactoring-transformation = distribute ;
refactoring-transformation = factor ;
refactoring-transformation = deyaccify ;
refactoring-transformation = yaccify ;
refactoring-transformation = eliminate ;
refactoring-transformation = introduce ;
refactoring-transformation = import ;
refactoring-transformation = vertical ;
refactoring-transformation = horizontal ;
refactoring-transformation = equate ;
refactoring-transformation = rassoc ;
refactoring-transformation = lassoc ;
refactoring-transformation = iterate ;
refactoring-transformation = splitT ;
massage-massage = expression expression in::scope? ;
factor-factor = expression expression in::scope? ;
deyaccify-yaccify = production+ ;
yaccify-deyaccify = production+ ;
eliminate-introduce = production+ ;
introduce-eliminate = production+ ;
vertical-horizontal = nonterminal::nonterminal ;
horizontal-vertical = nonterminal::nonterminal ;
assoc-iterate = production production ;
iterate-assoc = production production ;
equate-clone = align::(production+) with::nonterminal in::(scope+) ;
clone-equate = align::(production+) with::nonterminal in::(scope+) ;
massage = expression expression in::scope? ;
distribute = scope ;
factor = expression expression in::scope? ;
deyaccify = nonterminal::nonterminal ;
yaccify = production+ ;
eliminate = nonterminal::nonterminal ;
introduce = production+ ;
import = production+ ;
vertical = scope ;
horizontal = nonterminal::nonterminal ;
equate = align::nonterminal with::nonterminal ;
rassoc = production ;
lassoc = production ;
iterate = production ;
splitT = terminal::terminal into::(terminal::terminal+) in::scope? ;
increasing-decreasing-transformation = add-remove ;
increasing-decreasing-transformation = remove-add ;
increasing-decreasing-transformation = appear-disappear ;
increasing-decreasing-transformation = disappear-appear ;
increasing-decreasing-transformation = widen-narrow ;
increasing-decreasing-transformation = narrow-widen ;
increasing-decreasing-transformation = upgrade-downgrade ;
increasing-decreasing-transformation = downgrade-upgrade ;
increasing-decreasing-transformation = unite-split ;
increasing-decreasing-transformation = split-unite ;
add-remove = vertical::production ;
add-remove = horizontal::production ;
remove-add = vertical::production ;
remove-add = horizontal::production ;
appear-disappear = production ;
disappear-appear = production ;
widen-narrow = expression expression in::scope? ;
narrow-widen = expression expression in::scope? ;
upgrade-downgrade = production production ;
downgrade-upgrade = production production ;
unite-split = add::(production+) to::(production+) in::(scope+) ;
split-unite = add::(production+) to::(production+) in::(scope+) ;
concrete-revising-transformation = abstractize-concretize ;
concrete-revising-transformation = concretize-abstractize ;
concrete-revising-transformation = permute-permute ;
concrete-revising-transformation = abstractize ;
concrete-revising-transformation = concretize ;
concrete-revising-transformation = permute ;
abstractize-concretize = production ;
concretize-abstractize = production ;
permute-permute = production production ;
abstractize = production ;
concretize = production ;
permute = production ;
abstract-revising-transformation = define-undefine ;
abstract-revising-transformation = undefine-define ;
abstract-revising-transformation = inject-project ;
abstract-revising-transformation = project-inject ;
abstract-revising-transformation = replace-replace ;
abstract-revising-transformation = define ;
abstract-revising-transformation = undefine ;
abstract-revising-transformation = redefine ;
abstract-revising-transformation = inject ;
abstract-revising-transformation = project ;
abstract-revising-transformation = replace ;
define-undefine = production+ ;
undefine-define = production+ ;
inject-project = production ;
project-inject = production ;
replace-replace = expression expression in::scope? tag::STR ;
define = production+ tag::STR ;
undefine = nonterminal::nonterminal+ tag::STR ;
redefine = production+ tag::STR ;
inject = production tag::STR ;
project = production tag::STR ;
replace = expression expression in::scope? tag::STR ;
decorative-transformation = designate-unlabel ;
decorative-transformation = unlabel-designate ;
decorative-transformation = deanonymize-anonymize ;
decorative-transformation = anonymize-deanonymize ;
decorative-transformation = designate ;
decorative-transformation = unlabel ;
decorative-transformation = deanonymize ;
decorative-transformation = anonymize ;
designate-unlabel = production ;
unlabel-designate = production ;
deanonymize-anonymize = production ;
anonymize-deanonymize = production ;
designate = production ;
unlabel = label::label ;
deanonymize = production ;
anonymize = production ;
rename-rename = label::(from::label to::label) ;
rename-rename = nonterminal::(from::nonterminal to::nonterminal) ;
rename-rename = selector::(in::label? from::selector to::selector) ;
rename-rename = terminal::(from::terminal to::terminal) ;
reroot-reroot = from::roots to::roots ;
roots = root::nonterminal* ;
increasing-transformation = add ;
increasing-transformation = appear ;
increasing-transformation = widen ;
increasing-transformation = upgrade ;
increasing-transformation = unite ;
add = vertical::production ;
add = horizontal::production ;
appear = production ;
widen = expression expression in::scope? ;
upgrade = production production ;
unite = add::nonterminal to::nonterminal ;
decreasing-transformation = remove ;
decreasing-transformation = disappear ;
decreasing-transformation = narrow ;
decreasing-transformation = downgrade ;
decreasing-transformation = split ;
remove = vertical::production ;
remove = horizontal::production ;
disappear = production ;
narrow = expression expression in::scope? ;
downgrade = production production ;
split = nonterminal::nonterminal production+ scope* ;
rename = label::(from::label to::label) ;
rename = nonterminal::(from::nonterminal to::nonterminal) ;
rename = selector::(in::label? from::selector to::selector) ;
rename = terminal::(from::terminal to::terminal) ;
reroot = root::nonterminal* ;
strip = label::label ;
strip = allLabels:: ;
strip = selector::selector ;
strip = allSelectors:: ;
strip = terminal::terminal ;
strip = allTerminals:: ;
dump = ;
bypass = ;
atomic = transformation+ ;
