module Main

exports
  sorts
        Prog Header Decl ConstDecl VarDecl ProcDecl Parameter MainStat Stat Skip Assign Cond Loop ArithmeticExpr ExprLevel1 ExpExpr UnaryExpr Atom BracketedExpr CondExpr TestPart ProcApply Args BooleanExpr ConjunctionExpr BooleanAtom BooleanOperator Type EXPONENT DIGIT SEMI COLON COMMA CONDITION LPAR RPAR LCURLYPAR RCURLYPAR DONE SKIP TROLLEY CHECKOUT CONTAINS IF THEN ELSE WHILE DO CONST VAR PROC INT-TYPE DOUBLE-TYPE INT DOUBLE PLUS MINUS MULTIPLY DIVIDE EXPONENTIATE AND OR DEFINED-AS EQUAL NOT-EQUAL GREATER GREATER-EQUAL LESS LESS-EQUAL CONST-ID VAR-ID WS COMMENT 
  context-free syntax
        Header Decl MainStat -> Prog

        TROLLEY CONST-ID CONTAINS -> Header

        (ConstDecl | VarDecl | ProcDecl)* -> Decl

        CONST CONST-ID COLON Type DEFINED-AS ArithmeticExpr SEMI -> ConstDecl

        VAR VAR-ID COLON Type SEMI -> VarDecl

        PROC VAR-ID LPAR Parameter? RPAR COLON Type DEFINED-AS Stat -> ProcDecl

        i::VAR-ID COLON t::Type (COMMA Parameter)* -> Parameter

        CHECKOUT Stat DONE SEMI -> MainStat

        Skip -> Stat
        Assign -> Stat
        Cond -> Stat
        Loop -> Stat
        LCURLYPAR Stat* RCURLYPAR SEMI -> Stat

        SKIP SEMI -> Skip

        VAR-ID DEFINED-AS ArithmeticExpr SEMI -> Assign

        IF LPAR b::BooleanExpr RPAR THEN ts::Stat (ELSE es::Stat)? -> Cond

        WHILE LPAR b::BooleanExpr RPAR DO s::Stat -> Loop

        ExprLevel1 ((PLUS | MINUS) ExprLevel1)* -> ArithmeticExpr

        ExpExpr ((MULTIPLY | DIVIDE) ExpExpr)* -> ExprLevel1

        UnaryExpr (EXPONENTIATE UnaryExpr)* -> ExpExpr

        MINUS Atom -> UnaryExpr
        PLUS Atom -> UnaryExpr
        Atom -> UnaryExpr

        INT -> Atom
        DOUBLE -> Atom
        CONST-ID -> Atom
        VAR-ID -> Atom
        LPAR BracketedExpr RPAR -> Atom
        ProcApply -> Atom

        CondExpr -> BracketedExpr
        ArithmeticExpr -> BracketedExpr

        TestPart e1::ArithmeticExpr COLON e2::ArithmeticExpr -> CondExpr

        BooleanExpr CONDITION -> TestPart

        VAR-ID LPAR Args? RPAR -> ProcApply

        ArithmeticExpr (COMMA ArithmeticExpr)* -> Args

        ConjunctionExpr (OR ConjunctionExpr)* -> BooleanExpr

        BooleanAtom (AND BooleanAtom)* -> ConjunctionExpr

        ArithmeticExpr BooleanOperator ArithmeticExpr -> BooleanAtom
        LPAR BooleanExpr RPAR -> BooleanAtom

        EQUAL -> BooleanOperator
        NOT-EQUAL -> BooleanOperator
        GREATER -> BooleanOperator
        GREATER-EQUAL -> BooleanOperator
        LESS -> BooleanOperator
        LESS-EQUAL -> BooleanOperator

        INT-TYPE -> Type
        DOUBLE-TYPE -> Type

        ("e" | "E") ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> EXPONENT

        "0" -> DIGIT
        "1" -> DIGIT
        "2" -> DIGIT
        "3" -> DIGIT
        "4" -> DIGIT
        "5" -> DIGIT
        "6" -> DIGIT
        "7" -> DIGIT
        "8" -> DIGIT
        "9" -> DIGIT

        ";" -> SEMI

        ":" -> COLON

        "," -> COMMA

        "?" -> CONDITION

        "(" -> LPAR

        ")" -> RPAR

        "{" -> LCURLYPAR

        "}" -> RCURLYPAR

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "int" -> INT-TYPE

        "double" -> DOUBLE-TYPE

        DIGIT+ -> INT

        DIGIT* "." DIGIT* EXPONENT? -> DOUBLE

        "+" -> PLUS

        "-" -> MINUS

        "*" -> MULTIPLY

        "/" -> DIVIDE

        "**" -> EXPONENTIATE

        "/\\" -> AND

        "\\/" -> OR

        ":=" -> DEFINED-AS

        "==" -> EQUAL

        "!=" -> NOT-EQUAL

        ">" -> GREATER

        ">=" -> GREATER-EQUAL

        "<" -> LESS

        "<=" -> LESS-EQUAL

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | DIGIT | "_")* -> CONST-ID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | DIGIT | "_")* -> VAR-ID

        (" " | "\t" | "\r" | "\n" | "\u000C")+ -> WS

        "/*" ANY* "*/" -> COMMENT
