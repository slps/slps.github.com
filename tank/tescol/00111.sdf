module Main

exports
  sorts
        Prog Declaration Identifier VarDeclaration ProcDeclaration ConstDeclaration Type ArithEx ParameterList ProcedureApplication CommaSeparatedArithEx Atom Expr ProdExpr ExponentialExpr Unary ConjBooleanExpr DisjBooleanExpr BooleanExpr ConditionalExpr CompoundStatement Statement Assignment Conditional Consequent Alternative Loop NEWLINE SEMI COMMA COLON QUESTION EQUALITY NON-EQUALITY LESS LESS-EQUAL GREATER-EQUAL GREATER CONJUNCTION DISJUNCTION COLON-EQUALS ADDITION SUBTRACTION DIVISION MULTIPLICATION EXPONENTIATION IF THEN ELSE WHILE DO DONE TROLLEY CONTAINS SKIP CHECKOUT INT DOUBLE CONST VAR PROC LBRACE RBRACE LPAREN RPAREN INT-NUMBER DOUBLE-NUMBER CID ID WS COMMENT 
  context-free syntax
        TROLLEY CID CONTAINS Declaration* CHECKOUT CompoundStatement SEMI DONE SEMI -> Prog

        (ConstDeclaration | VarDeclaration | ProcDeclaration) SEMI -> Declaration

        ID -> Identifier
        CID -> Identifier

        VAR Identifier COLON Type -> VarDeclaration

        PROC Identifier LPAREN ParameterList? RPAREN COLON Type COLON-EQUALS CompoundStatement -> ProcDeclaration

        CONST CID COLON Type COLON-EQUALS ArithEx -> ConstDeclaration

        INT -> Type
        DOUBLE -> Type

        Expr -> ArithEx
        ProcedureApplication -> ArithEx

        firstID::Identifier COLON firstType::Type (COMMA followID::Identifier COLON followType::Type)* -> ParameterList

        Identifier LPAREN CommaSeparatedArithEx RPAREN -> ProcedureApplication

        (ArithEx (COMMA ArithEx)*)? -> CommaSeparatedArithEx

        INT-NUMBER -> Atom
        DOUBLE-NUMBER -> Atom
        Identifier -> Atom
        LPAREN ConditionalExpr RPAREN -> Atom

        ProdExpr ((ADDITION | SUBTRACTION) ProdExpr)* -> Expr

        ExponentialExpr ((MULTIPLICATION | DIVISION) ExponentialExpr)* -> ProdExpr

        Unary (EXPONENTIATION Unary)? -> ExponentialExpr

        (ADDITION | SUBTRACTION)? Atom -> Unary

        BooleanExpr (CONJUNCTION BooleanExpr)* -> ConjBooleanExpr

        ConjBooleanExpr (DISJUNCTION ConjBooleanExpr)* -> DisjBooleanExpr

        ArithEx ((EQUALITY | NON-EQUALITY | LESS | LESS-EQUAL | GREATER | GREATER-EQUAL) ArithEx)? -> BooleanExpr

        DisjBooleanExpr (QUESTION ConditionalExpr COLON ConditionalExpr)? -> ConditionalExpr

        LBRACE Statement (SEMI Statement)* RBRACE -> CompoundStatement
        Statement -> CompoundStatement

        SKIP -> Statement
        Assignment -> Statement
        Conditional -> Statement
        Loop -> Statement

        Identifier COLON-EQUALS ConditionalExpr -> Assignment

        IF ConditionalExpr THEN Consequent ELSE Alternative -> Conditional

        CompoundStatement -> Consequent

        CompoundStatement -> Alternative

        WHILE BooleanExpr DO CompoundStatement -> Loop

        "\r"? "\n" -> NEWLINE

        ";" -> SEMI

        "," -> COMMA

        ":" -> COLON

        "?" -> QUESTION

        "==" -> EQUALITY

        "!=" -> NON-EQUALITY

        "<" -> LESS

        "<=" -> LESS-EQUAL

        ">=" -> GREATER-EQUAL

        ">" -> GREATER

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        ":=" -> COLON-EQUALS

        "+" -> ADDITION

        "-" -> SUBTRACTION

        "/" -> DIVISION

        "*" -> MULTIPLICATION

        "**" -> EXPONENTIATION

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        "done" -> DONE

        "trolley" -> TROLLEY

        "contains" -> CONTAINS

        "skip" -> SKIP

        "checkout" -> CHECKOUT

        "int" -> INT

        "double" -> DOUBLE

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "{" -> LBRACE

        "}" -> RBRACE

        "(" -> LPAREN

        ")" -> RPAREN

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT-NUMBER

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") ("-" | "+")? INT-NUMBER)? -> DOUBLE-NUMBER

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        " " -> WS
        "\r" -> WS
        "\t" -> WS
        "\u000C" -> WS

        "/*" ANY* "*/" -> COMMENT
