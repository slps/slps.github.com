module Main

exports
  sorts
        Program Trolley Checkout Decleration Const-dec Var-dec Proc-dec Proc-para Parameter Proc-becomes Atom Negation Exponential Multiplication-division Arithmetic-expression Bool-atom Bool-conjunction Bool-disjunction Mix-fix Procedure-call Parameters Statement Skip Conditional Then-statement Else-statement Loop Do-statement Cond-statements Assignment VarIDs ConIDs DOUBLE INT COMMENT TYPE DONE SKIP TROLLEY CHECKOUT CONTAINS VAR CONSTANT PROCEDURE TROLLY COMMA SEMI COLON ADD SUB DIV MUL EXP BECOMES MIX-FIX EQUALITY NONEQUALITY LESSTHEN MORETHEN LESSOREQUAL MOREOREQUAL CONJUNCTION DISJUNCTION BEGINCOMMENT ENDCOMMENT OPENBRACKET CLOSEDBRACKET OPENPARENTHESIS CLOSEDPARENTHESIS IF THEN ELSE WHILE DO CID ID WS 
  context-free syntax
        Trolley Checkout -> Program

        TROLLEY VarIDs CONTAINS Decleration -> Trolley

        CHECKOUT OPENBRACKET Statement* CLOSEDBRACKET SEMI DONE SEMI -> Checkout

        (Const-dec | Var-dec | Proc-dec)* -> Decleration

        CONSTANT ConIDs COLON TYPE BECOMES Mix-fix SEMI -> Const-dec

        VAR VarIDs COLON TYPE SEMI -> Var-dec

        PROCEDURE Proc-para COLON TYPE Proc-becomes -> Proc-dec

        VarIDs OPENPARENTHESIS (Parameter COMMA?)* CLOSEDPARENTHESIS -> Proc-para

        VarIDs COLON TYPE -> Parameter

        BECOMES Cond-statements -> Proc-becomes

        Procedure-call -> Atom
        CID -> Atom
        ID -> Atom
        OPENPARENTHESIS Mix-fix CLOSEDPARENTHESIS -> Atom
        INT -> Atom
        DOUBLE -> Atom

        SUB Atom -> Negation
        Atom -> Negation

        Negation (EXP Negation)* -> Exponential

        Exponential ((MUL | DIV) Exponential)* -> Multiplication-division

        Multiplication-division ((ADD | SUB) Multiplication-division)* -> Arithmetic-expression

        Arithmetic-expression ((NONEQUALITY | EQUALITY | MOREOREQUAL | LESSOREQUAL | MORETHEN | LESSTHEN) Arithmetic-expression)* -> Bool-atom

        Bool-atom (CONJUNCTION Bool-atom)* -> Bool-conjunction

        Bool-conjunction (DISJUNCTION Bool-conjunction)* -> Bool-disjunction

        Bool-disjunction (MIX-FIX Arithmetic-expression COLON Atom)? -> Mix-fix

        VarIDs OPENPARENTHESIS Parameters CLOSEDPARENTHESIS SEMI -> Procedure-call

        Mix-fix (COMMA Mix-fix)* -> Parameters

        Conditional -> Statement
        Loop -> Statement
        Assignment -> Statement
        Skip -> Statement
        Procedure-call -> Statement

        SKIP SEMI -> Skip

        IF OPENPARENTHESIS Bool-disjunction CLOSEDPARENTHESIS Then-statement Else-statement -> Conditional

        THEN Cond-statements -> Then-statement

        ELSE Cond-statements -> Else-statement

        WHILE Bool-disjunction Do-statement -> Loop

        DO Cond-statements -> Do-statement

        OPENBRACKET Statement* CLOSEDBRACKET -> Cond-statements
        Statement -> Cond-statements

        VarIDs BECOMES Mix-fix SEMI -> Assignment

        CID -> VarIDs
        ID -> VarIDs

        CID -> ConIDs

        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") (ADD | SUB)? INT)? -> DOUBLE

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT

        BEGINCOMMENT ANY* ENDCOMMENT -> COMMENT

        "int" -> TYPE
        "double" -> TYPE

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "var" -> VAR

        "const" -> CONSTANT

        "proc" -> PROCEDURE

        "trolly" -> TROLLY

        "," -> COMMA

        ";" -> SEMI

        ":" -> COLON

        "+" -> ADD

        "-" -> SUB

        "/" -> DIV

        "*" -> MUL

        "**" -> EXP

        ":=" -> BECOMES

        "?" -> MIX-FIX

        "==" -> EQUALITY

        "!=" -> NONEQUALITY

        "<" -> LESSTHEN

        ">" -> MORETHEN

        "<=" -> LESSOREQUAL

        ">=" -> MOREOREQUAL

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        "/*" -> BEGINCOMMENT

        "*/" -> ENDCOMMENT

        "{" -> OPENBRACKET

        "}" -> CLOSEDBRACKET

        "(" -> OPENPARENTHESIS

        ")" -> CLOSEDPARENTHESIS

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        (" " | "\t" | "\r" | "\n")+ -> WS
