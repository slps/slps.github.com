module Main

exports
  sorts
        Program Declaration Variabledec Constantdec Proceduredec Type CondExpr BoolExpr AndExpr CompExpr Expr MultExpr ExponExpr Unaryneg Atom ProcedureList Mainstatement Statement SEMI COMMA ASSIGN DECIMAL STATEMENTOPEN STATEMENTCLOSE PARENOPEN PARENCLOSE ADDITION SUBTRACTION DIVISION MULTIPLICATION EXPONENTIATION MIXFIX COLON EQUALITY NONEQUALITY GREATER GREATEREQUAL LESS LESSEQUAL CONJUNCTION DISJUNCTION INT FLOAT DONE SKIP TROLLEY CHECKOUT CONTAINS CONSTANT VARIABLE PROCEDURE IF THEN ELSE WHILE DO CONSTANTID ID INTEGER FLOATINGPOINT WS COMMENT 
  context-free syntax
        TROLLEY CONSTANTID CONTAINS Declaration* CHECKOUT Mainstatement SEMI DONE SEMI -> Program

        Variabledec -> Declaration
        Constantdec -> Declaration
        Proceduredec -> Declaration

        VARIABLE ID COLON Type SEMI -> Variabledec

        CONSTANT CONSTANTID COLON Type ASSIGN CondExpr SEMI -> Constantdec

        PROCEDURE pid1::ID PARENOPEN (pid2::ID COLON Type (COMMA pid3::ID COLON Type)*)* PARENCLOSE COLON Type ASSIGN Mainstatement SEMI -> Proceduredec

        INT -> Type
        FLOAT -> Type

        BoolExpr (MIXFIX CondExpr COLON CondExpr)? -> CondExpr

        AndExpr (DISJUNCTION AndExpr)* -> BoolExpr

        CompExpr (CONJUNCTION CompExpr)* -> AndExpr

        Expr ((GREATEREQUAL | LESSEQUAL | GREATER | LESS | EQUALITY | NONEQUALITY) Expr)* -> CompExpr

        MultExpr ((ADDITION | SUBTRACTION) MultExpr)* -> Expr

        ExponExpr ((MULTIPLICATION | DIVISION) ExponExpr)* -> MultExpr

        Unaryneg EXPONENTIATION* -> ExponExpr

        SUBTRACTION* Atom -> Unaryneg

        INTEGER -> Atom
        FLOATINGPOINT -> Atom
        CONSTANTID -> Atom
        ID -> Atom
        PARENOPEN CondExpr PARENCLOSE -> Atom
        ProcedureList -> Atom

        ID PARENOPEN id1::CondExpr (COMMA id2::CondExpr)* PARENCLOSE -> ProcedureList

         -> Mainstatement
        Statement -> Mainstatement
        STATEMENTOPEN Statement (SEMI Statement)* STATEMENTCLOSE -> Mainstatement

        SKIP -> Statement
        ID ASSIGN CondExpr -> Statement
        IF BoolExpr THEN Statement ELSE Statement -> Statement
        WHILE BoolExpr DO Statement -> Statement

        ";" -> SEMI

        "," -> COMMA

        ":=" -> ASSIGN

        "." -> DECIMAL

        "{" -> STATEMENTOPEN

        "}" -> STATEMENTCLOSE

        "(" -> PARENOPEN

        ")" -> PARENCLOSE

        "+" -> ADDITION

        "-" -> SUBTRACTION

        "/" -> DIVISION

        "*" -> MULTIPLICATION

        "**" -> EXPONENTIATION

        "?" -> MIXFIX

        ":" -> COLON

        "==" -> EQUALITY

        "!=" -> NONEQUALITY

        ">" -> GREATER

        ">=" -> GREATEREQUAL

        "<" -> LESS

        "<=" -> LESSEQUAL

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        "int" -> INT

        "double" -> FLOAT

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "const" -> CONSTANT

        "var" -> VARIABLE

        "proc" -> PROCEDURE

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CONSTANTID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INTEGER

        INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ (("e" | "E") (ADDITION | SUBTRACTION)* INTEGER)? -> FLOATINGPOINT

        (" " | "\t" | "\r" | "\n")+ -> WS

        "/*" ANY* "*/" -> COMMENT
