module Main

exports
  sorts
        Program Declaration ConstDecl VarDecl ProcDecl Term Unary Exp Mult Add Relation Equality Disj Conj Expression ProcApp AppList Number Assign CondSt Loop ParamList ParamElem Statement StmtList StmtElem Type DONE SKIP TROLLEY CHECKOUT CONTAINS CONST VAR PROC IF THEN WHILE DO ELSE INT DOUB COLON DEFAS COMMA SEMI LPAR RPAR LBRACE RBRACE ADD SUB MULTOP MULT DIV EXP DISJUNC CONJUNC RELOP EQOP ET NET LT LTE GT GTE TE DIGIT UPPER LOWER INTEGER DOUBLE CONSTID ID WS 
  context-free syntax
        TROLLEY CONSTID CONTAINS (Declaration SEMI)* CHECKOUT Statement SEMI DONE SEMI -> Program

        ConstDecl -> Declaration
        VarDecl -> Declaration
        ProcDecl -> Declaration

        CONST CONSTID COLON t::Type DEFAS e::Expression -> ConstDecl

        VAR (a::ID | a::CONSTID) COLON t::Type -> VarDecl

        PROC (a::ID | a::CONSTID) LPAR p::ParamList RPAR COLON t::Type DEFAS st::Statement -> ProcDecl

        LPAR Expression RPAR -> Term
        CONSTID p::ProcApp -> Term
        ID p::ProcApp -> Term

        SUB* Term -> Unary

        a::Unary (EXP Unary)* -> Exp

        a::Exp (MULTOP b::Exp)* -> Mult

        a::Mult ((ADD | SUB) b::Mult)* -> Add

        a::Add (RELOP b::Add)? -> Relation

        a::Relation (EQOP b::Relation)? -> Equality

        a::Equality (DISJUNC b::Equality)* -> Disj

        a::Disj (CONJUNC b::Disj)* -> Conj

        a::Conj (TE b::Expression COLON c::Expression)? -> Expression

         -> ProcApp
        LPAR AppList RPAR -> ProcApp

         -> AppList
        e::Expression (COMMA f::Expression)* -> AppList

        INTEGER -> Number
        DOUBLE -> Number

        (a::ID | a::CONSTID) DEFAS e::Expression -> Assign

        IF e::Expression THEN Statement ELSE Statement -> CondSt

        WHILE e::Expression DO Statement -> Loop

         -> ParamList
        p::ParamElem (COMMA q::ParamElem)* -> ParamList

        ID COLON Type -> ParamElem

        StmtElem -> Statement
        StmtList -> Statement

        LBRACE s::StmtElem (SEMI t::StmtElem)* RBRACE -> StmtList

        SKIP -> StmtElem
        Assign -> StmtElem
        CondSt -> StmtElem
        Loop -> StmtElem

        INT -> Type
        DOUB -> Type

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "if" -> IF

        "then" -> THEN

        "while" -> WHILE

        "do" -> DO

        "else" -> ELSE

        "int" -> INT

        "double" -> DOUB

        ":" -> COLON

        ":=" -> DEFAS

        "," -> COMMA

        ";" -> SEMI

        "(" -> LPAR

        ")" -> RPAR

        "{" -> LBRACE

        "}" -> RBRACE

        "+" -> ADD

        "-" -> SUB

        MULT -> MULTOP
        DIV -> MULTOP

        "*" -> MULT

        "/" -> DIV

        "**" -> EXP

        "/\\" -> DISJUNC

        "\\/" -> CONJUNC

        LT -> RELOP
        LTE -> RELOP
        GT -> RELOP
        GTE -> RELOP

        ET -> EQOP
        NET -> EQOP

        "==" -> ET

        "!=" -> NET

        "<" -> LT

        "<=" -> LTE

        ">" -> GT

        ">=" -> GTE

        "?" -> TE

        "0" -> DIGIT
        "1" -> DIGIT
        "2" -> DIGIT
        "3" -> DIGIT
        "4" -> DIGIT
        "5" -> DIGIT
        "6" -> DIGIT
        "7" -> DIGIT
        "8" -> DIGIT
        "9" -> DIGIT

        "A" -> UPPER
        "B" -> UPPER
        "C" -> UPPER
        "D" -> UPPER
        "E" -> UPPER
        "F" -> UPPER
        "G" -> UPPER
        "H" -> UPPER
        "I" -> UPPER
        "J" -> UPPER
        "K" -> UPPER
        "L" -> UPPER
        "M" -> UPPER
        "N" -> UPPER
        "O" -> UPPER
        "P" -> UPPER
        "Q" -> UPPER
        "R" -> UPPER
        "S" -> UPPER
        "T" -> UPPER
        "U" -> UPPER
        "V" -> UPPER
        "W" -> UPPER
        "X" -> UPPER
        "Y" -> UPPER
        "Z" -> UPPER

        "a" -> LOWER
        "b" -> LOWER
        "c" -> LOWER
        "d" -> LOWER
        "e" -> LOWER
        "f" -> LOWER
        "g" -> LOWER
        "h" -> LOWER
        "i" -> LOWER
        "j" -> LOWER
        "k" -> LOWER
        "l" -> LOWER
        "m" -> LOWER
        "n" -> LOWER
        "o" -> LOWER
        "p" -> LOWER
        "q" -> LOWER
        "r" -> LOWER
        "s" -> LOWER
        "t" -> LOWER
        "u" -> LOWER
        "v" -> LOWER
        "w" -> LOWER
        "x" -> LOWER
        "y" -> LOWER
        "z" -> LOWER

        ("+" | "-")? DIGIT+ -> INTEGER

        INTEGER? "." DIGIT* (("e" | "E") INTEGER)? -> DOUBLE

        UPPER (UPPER | DIGIT | "_")* -> CONSTID

        (UPPER | LOWER) (UPPER | LOWER | DIGIT | "_")* -> ID

        (" " | "\t" | "\r" | "\n")+ -> WS
