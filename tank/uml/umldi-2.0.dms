Collaboration = usedCollaboration::ANY+ representedOperation::ANY representedClassifier::ANY interaction::ANY+ constrainingElement::ANY+ ;
ClassifierRole = availableContents::ANY+ base::ANY+ conformingInstance::ANY+ availableFeature::ANY+ multiplicity::ANY ;
AssociationRole = base::ANY conformingLink::ANY+ message::ANY+ multiplicity::ANY ;
AssociationEndRole = base::ANY availableQualifier::ANY+ collaborationMultiplicity::ANY ;
Message = interaction::ANY conformingStimulus::ANY+ action::ANY communicationConnection::ANY activator::ANY receiver::ANY sender::ANY predecessor::ANY+ ;
Interaction = message::ANY+ context::ANY ;
InteractionInstanceSet = interaction::ANY context::ANY participatingStimulus::ANY+ ;
CollaborationInstanceSet = collaboration::ANY constrainingElement::ANY+ participatingInstance::ANY+ interactionInstanceSet::ANY+ participatingLink::ANY+ ;
UseCase = include::ANY+ extend::ANY+ extensionPoint::ANY+ ;
Actor = powertypeRange::ANY+ feature::ANY+ ;
UseCaseInstance = ownedInstance::ANY+ linkEnd::ANY+ classifier::ANY+ componentInstance::ANY slot::ANY+ ownedLink::ANY+ ;
Extend = extensionPoint::ANY+ extension::ANY base::ANY condition::ANY ;
Include = addition::ANY base::ANY ;
ExtensionPoint = useCase::ANY location::ANY ;
AggregationKind = ak_none:: ;
AggregationKind = ak_aggregate:: ;
AggregationKind = ak_composite:: ;
CallConcurrencyKind = cck_sequential:: ;
CallConcurrencyKind = cck_guarded:: ;
CallConcurrencyKind = cck_concurrent:: ;
ChangeableKind = ck_changeable:: ;
ChangeableKind = ck_frozen:: ;
ChangeableKind = ck_addOnly:: ;
OrderingKind = ok_unordered:: ;
OrderingKind = ok_ordered:: ;
ParameterDirectionKind = pdk_in:: ;
ParameterDirectionKind = pdk_inout:: ;
ParameterDirectionKind = pdk_out:: ;
ParameterDirectionKind = pdk_return:: ;
ScopeKind = sk_instance:: ;
ScopeKind = sk_classifier:: ;
VisibilityKind = vk_public:: ;
VisibilityKind = vk_protected:: ;
VisibilityKind = vk_private:: ;
VisibilityKind = vk_package:: ;
Multiplicity = range::ANY+ ;
MultiplicityRange = multiplicity::ANY lower::ANY upper::ANY ;
Expression = language::ANY body::ANY ;
BooleanExpression = ;
TypeExpression = ;
MappingExpression = ;
ProcedureExpression = ;
ObjectSetExpression = ;
ActionExpression = ;
IterationExpression = ;
TimeExpression = ;
ArgListsExpression = ;
PseudostateKind = pk_choice:: ;
PseudostateKind = pk_deepHistory:: ;
PseudostateKind = pk_fork:: ;
PseudostateKind = pk_initial:: ;
PseudostateKind = pk_join:: ;
PseudostateKind = pk_junction:: ;
PseudostateKind = pk_shallowHistory:: ;
Instance = ;
Signal = powertypeRange::ANY+ feature::ANY+ ;
Action = ;
CreateAction = instantiation::ANY ;
DestroyAction = actualArgument::ANY+ actionSequence::ANY recurrence::ANY target::ANY isAsynchronous::ANY script::ANY ;
UninterpretedAction = actualArgument::ANY+ actionSequence::ANY recurrence::ANY target::ANY isAsynchronous::ANY script::ANY ;
AttributeLink = instance::ANY value::ANY linkEnd::ANY attribute::ANY ;
Object = ownedInstance::ANY+ linkEnd::ANY+ classifier::ANY+ componentInstance::ANY slot::ANY+ ownedLink::ANY+ ;
Link = association::ANY connection::ANY ;
LinkObject = ;
DataValue = ownedInstance::ANY+ linkEnd::ANY+ classifier::ANY+ componentInstance::ANY slot::ANY+ ownedLink::ANY+ ;
CallAction = operation::ANY ;
SendAction = signal::ANY ;
ActionSequence = action::ANY+ ;
Argument = action::ANY value::ANY ;
Reception = signal::ANY specification::ANY isRoot::ANY isLeaf::ANY isAbstract::ANY ;
LinkEnd = link::ANY qualifiedValue::ANY+ instance::ANY associationEnd::ANY ;
ReturnAction = actualArgument::ANY+ actionSequence::ANY recurrence::ANY target::ANY isAsynchronous::ANY script::ANY ;
TerminateAction = actualArgument::ANY+ actionSequence::ANY recurrence::ANY target::ANY isAsynchronous::ANY script::ANY ;
Stimulus = argument::ANY+ communicationLink::ANY receiver::ANY dispatchAction::ANY sender::ANY ;
Exception = ;
ComponentInstance = resident::ANY+ nodeInstance::ANY ;
NodeInstance = resident::ANY+ ;
SubsystemInstance = ownedInstance::ANY+ linkEnd::ANY+ classifier::ANY+ componentInstance::ANY slot::ANY+ ownedLink::ANY+ ;
ActivityGraph = partition::ANY+ ;
Partition = contents::ANY+ activityGraph::ANY ;
SubactivityState = isDynamic::ANY dynamicArguments::ANY dynamicMultiplicity::ANY ;
ActionState = isDynamic::ANY dynamicArguments::ANY dynamicMultiplicity::ANY ;
CallState = ;
ObjectFlowState = type::ANY parameter::ANY+ isSynch::ANY ;
ClassifierInState = inState::ANY+ type::ANY ;
StateMachine = context::ANY submachineState::ANY+ top::ANY transitions::ANY+ ;
Event = ;
StateVertex = ;
State = ;
TimeEvent = when::ANY ;
CallEvent = operation::ANY ;
SignalEvent = signal::ANY ;
Transition = target::ANY trigger::ANY stateMachine::ANY source::ANY effect::ANY guard::ANY ;
CompositeState = subvertex::ANY+ isConcurrent::ANY ;
ChangeEvent = changeExpression::ANY ;
Guard = transition::ANY expression::ANY ;
Pseudostate = kind::ANY ;
SimpleState = deferrableEvent::ANY+ internalTransition::ANY+ exit::ANY doActivity::ANY entry::ANY stateMachine::ANY ;
SubmachineState = submachine::ANY ;
SynchState = bound::ANY ;
StubState = referenceState::ANY ;
FinalState = deferrableEvent::ANY+ internalTransition::ANY+ exit::ANY doActivity::ANY entry::ANY stateMachine::ANY ;
Point = x::ANY y::ANY ;
Dimension = width::ANY height::ANY ;
BezierPoint = base::ANY control1::ANY control2::ANY ;
DiagramElement = ;
GraphElement = ;
SemanticModelBridge = ;
GraphEdge = anchor::ANY waypoints::ANY ;
GraphNode = size::ANY ;
GraphConnector = graphElement::ANY graphEdge::ANY+ position::ANY ;
LeafElement = ;
Reference = referenced::ANY ;
TextElement = text::ANY ;
GraphicPrimitive = ;
Polyline = waypoints::ANY closed::ANY ;
Ellipse = center::ANY radiusX::ANY radiusY::ANY rotation::ANY startAngle::ANY endAngle::ANY ;
Image = uri::ANY mimeType::ANY ;
Property = key::ANY value::ANY ;
SimpleSemanticModelElement = typeInfo::ANY ;
Uml1SemanticModelBridge = element::ANY ;
CoreSemanticModelBridge = diagram::ANY graphElement::ANY presentation::ANY ;
DiagramLink = graphElement::ANY diagram::ANY zoom::ANY viewport::ANY ;
Diagram = owner::ANY diagramLink::ANY+ name::ANY zoom::ANY viewport::ANY ;
Element = ;
ModelElement = ;
GeneralizableElement = ;
Namespace = ;
Classifier = ;
Class = isActive::ANY ;
DataType = powertypeRange::ANY+ feature::ANY+ ;
Feature = ;
StructuralFeature = ;
AssociationEnd = association::ANY specification::ANY+ participant::ANY qualifier::ANY+ isNavigable::ANY ordering::ANY aggregation::ANY targetScope::ANY multiplicity::ANY changeability::ANY ;
Interface = powertypeRange::ANY+ feature::ANY+ ;
Constraint = constrainedElement::ANY+ body::ANY ;
Relationship = ;
Association = connection::ANY ;
Attribute = associationEnd::ANY initialValue::ANY ;
BehavioralFeature = ;
Operation = concurrency::ANY isRoot::ANY isLeaf::ANY isAbstract::ANY specification::ANY ;
Parameter = type::ANY behavioralFeature::ANY defaultValue::ANY kind::ANY ;
Method = specification::ANY body::ANY ;
Generalization = parent::ANY powertype::ANY child::ANY discriminator::ANY ;
AssociationClass = ;
Dependency = client::ANY+ supplier::ANY+ ;
Abstraction = mapping::ANY ;
PresentationElement = ;
Usage = ;
Binding = argument::ANY+ ;
Component = deploymentLocation::ANY+ residentElement::ANY+ implementation::ANY+ ;
Node = deployedComponent::ANY+ ;
Permission = ;
Comment = annotatedElement::ANY+ body::ANY ;
Flow = source::ANY+ target::ANY+ ;
ElementResidence = container::ANY resident::ANY visibility::ANY ;
TemplateParameter = template::ANY parameter::ANY defaultElement::ANY ;
Primitive = ;
Enumeration = literal::ANY+ ;
EnumerationLiteral = enumeration::ANY ;
Stereotype = stereotypeConstraint::ANY+ definedTag::ANY+ icon::ANY baseClass::ANY+ ;
TagDefinition = owner::ANY tagType::ANY multiplicity::ANY ;
TaggedValue = type::ANY referenceValue::ANY+ modelElement::ANY dataValue::ANY+ ;
ProgrammingLanguageDataType = expression::ANY ;
Artifact = powertypeRange::ANY+ feature::ANY+ ;
TemplateArgument = binding::ANY modelElement::ANY ;
Package = elementImport::ANY+ ;
Model = ;
Subsystem = isInstantiable::ANY ;
ElementImport = package::ANY importedElement::ANY visibility::ANY alias::ANY isSpecification::ANY ;
