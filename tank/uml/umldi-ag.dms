Signal = powertypeRange::ANY+ feature::ANY+ ;
Action = ;
CreateAction = instantiation::ANY ;
DestroyAction = actualArgument::ANY+ actionSequence::ANY recurrence::ANY target::ANY isAsynchronous::ANY script::ANY ;
UninterpretedAction = actualArgument::ANY+ actionSequence::ANY recurrence::ANY target::ANY isAsynchronous::ANY script::ANY ;
CallAction = operation::ANY ;
SendAction = signal::ANY ;
ActionSequence = action::ANY+ ;
Argument = action::ANY value::ANY ;
ReturnAction = actualArgument::ANY+ actionSequence::ANY recurrence::ANY target::ANY isAsynchronous::ANY script::ANY ;
TerminateAction = actualArgument::ANY+ actionSequence::ANY recurrence::ANY target::ANY isAsynchronous::ANY script::ANY ;
Exception = ;
Element = ;
ModelElement = ;
GeneralizableElement = ;
Namespace = ;
Classifier = ;
Feature = ;
Relationship = ;
BehavioralFeature = ;
Operation = concurrency::ANY isRoot::ANY isLeaf::ANY isAbstract::ANY specification::ANY ;
Parameter = type::ANY behavioralFeature::ANY defaultValue::ANY kind::ANY ;
Generalization = parent::ANY powertype::ANY child::ANY discriminator::ANY ;
AggregationKind = ak_none:: ;
AggregationKind = ak_aggregate:: ;
AggregationKind = ak_composite:: ;
ChangeableKind = ck_changeable:: ;
ChangeableKind = ck_frozen:: ;
ChangeableKind = ck_addOnly:: ;
OrderingKind = ok_unordered:: ;
OrderingKind = ok_ordered:: ;
CallConcurrencyKind = cck_sequential:: ;
CallConcurrencyKind = cck_guarded:: ;
CallConcurrencyKind = cck_concurrent:: ;
ParameterDirectionKind = pdk_in:: ;
ParameterDirectionKind = pdk_inout:: ;
ParameterDirectionKind = pdk_out:: ;
ParameterDirectionKind = pdk_return:: ;
PseudostateKind = pk_choice:: ;
PseudostateKind = pk_deepHistory:: ;
PseudostateKind = pk_fork:: ;
PseudostateKind = pk_initial:: ;
PseudostateKind = pk_join:: ;
PseudostateKind = pk_junction:: ;
PseudostateKind = pk_shallowHistory:: ;
ScopeKind = sk_instance:: ;
ScopeKind = sk_classifier:: ;
VisibilityKind = vk_public:: ;
VisibilityKind = vk_protected:: ;
VisibilityKind = vk_private:: ;
VisibilityKind = vk_package:: ;
Multiplicity = range::ANY+ ;
MultiplicityRange = multiplicity::ANY lower::ANY upper::ANY ;
Expression = language::ANY body::ANY ;
BooleanExpression = ;
ObjectSetExpression = ;
ActionExpression = ;
IterationExpression = ;
TimeExpression = ;
ArgListsExpression = ;
StateMachine = context::ANY submachineState::ANY+ top::ANY transitions::ANY+ ;
Event = ;
StateVertex = ;
State = ;
TimeEvent = when::ANY ;
CallEvent = operation::ANY ;
SignalEvent = signal::ANY ;
Transition = target::ANY trigger::ANY stateMachine::ANY source::ANY effect::ANY guard::ANY ;
CompositeState = subvertex::ANY+ isConcurrent::ANY ;
ChangeEvent = changeExpression::ANY ;
Guard = transition::ANY expression::ANY ;
Pseudostate = kind::ANY ;
SimpleState = deferrableEvent::ANY+ internalTransition::ANY+ exit::ANY doActivity::ANY entry::ANY stateMachine::ANY ;
SubmachineState = submachine::ANY ;
SynchState = bound::ANY ;
StubState = referenceState::ANY ;
FinalState = deferrableEvent::ANY+ internalTransition::ANY+ exit::ANY doActivity::ANY entry::ANY stateMachine::ANY ;
ActivityGraph = partition::ANY+ ;
Partition = contents::ANY+ activityGraph::ANY ;
SubactivityState = isDynamic::ANY dynamicArguments::ANY dynamicMultiplicity::ANY ;
ActionState = isDynamic::ANY dynamicArguments::ANY dynamicMultiplicity::ANY ;
CallState = ;
ObjectFlowState = type::ANY parameter::ANY+ isSynch::ANY ;
ClassifierInState = inState::ANY+ type::ANY ;
