Instance = ComponentInstance ;
Instance = NodeInstance ;
Instance = UseCaseInstance ;
AttributeLink = instance::Instance value::Instance linkEnd::LinkEnd attribute::Attribute ;
Link = association::Association connection::LinkEnd ;
LinkEnd = link::Link qualifiedValue::AttributeLink+ instance::Instance associationEnd::AssociationEnd ;
ComponentInstance = resident::Instance+ nodeInstance::NodeInstance ;
NodeInstance = resident::ComponentInstance+ ;
UseCase = include::Include+ extend::Extend+ extensionPoint::ExtensionPoint+ ;
Actor = powertypeRange::Generalization+ feature::Feature+ ;
UseCaseInstance = ownedInstance::Instance+ linkEnd::LinkEnd+ classifier::Classifier+ componentInstance::ComponentInstance slot::AttributeLink+ ownedLink::Link+ ;
Extend = extensionPoint::ExtensionPoint+ extension::UseCase base::UseCase condition::BooleanExpression ;
Include = addition::UseCase base::UseCase ;
ExtensionPoint = useCase::UseCase location::String ;
Element = ModelElement ;
ModelElement = Instance ;
ModelElement = AttributeLink ;
ModelElement = Link ;
ModelElement = LinkEnd ;
ModelElement = ExtensionPoint ;
ModelElement = GeneralizableElement ;
ModelElement = Namespace ;
ModelElement = Feature ;
ModelElement = AssociationEnd ;
ModelElement = Relationship ;
Classifier = UseCase ;
Classifier = Actor ;
Feature = StructuralFeature ;
StructuralFeature = Attribute ;
AssociationEnd = association::Association specification::Classifier+ participant::Classifier qualifier::Attribute+ isNavigable::Boolean ordering::OrderingKind aggregation::AggregationKind targetScope::ScopeKind multiplicity::Multiplicity changeability::ChangeableKind ;
Relationship = Extend ;
Relationship = Include ;
Relationship = Generalization ;
Association = connection::AssociationEnd ;
Attribute = associationEnd::AssociationEnd initialValue::Expression ;
Generalization = parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
AggregationKind = ak_none:: ;
AggregationKind = ak_aggregate:: ;
AggregationKind = ak_composite:: ;
ChangeableKind = ck_changeable:: ;
ChangeableKind = ck_frozen:: ;
ChangeableKind = ck_addOnly:: ;
OrderingKind = ok_unordered:: ;
OrderingKind = ok_ordered:: ;
ScopeKind = sk_instance:: ;
ScopeKind = sk_classifier:: ;
VisibilityKind = vk_public:: ;
VisibilityKind = vk_protected:: ;
VisibilityKind = vk_private:: ;
VisibilityKind = vk_package:: ;
Multiplicity = range::MultiplicityRange+ ;
MultiplicityRange = multiplicity::Multiplicity lower::Integer upper::Integer ;
Expression = BooleanExpression ;
Expression = language::String body::String ;
BooleanExpression = ;
