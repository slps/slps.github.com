Instance = ;
AttributeLink = instance::ANY value::ANY linkEnd::ANY attribute::ANY ;
Link = association::ANY connection::ANY ;
LinkEnd = link::ANY qualifiedValue::ANY+ instance::ANY associationEnd::ANY ;
ComponentInstance = resident::ANY+ nodeInstance::ANY ;
NodeInstance = resident::ANY+ ;
UseCase = include::ANY+ extend::ANY+ extensionPoint::ANY+ ;
Actor = powertypeRange::ANY+ feature::ANY+ ;
UseCaseInstance = ownedInstance::ANY+ linkEnd::ANY+ classifier::ANY+ componentInstance::ANY slot::ANY+ ownedLink::ANY+ ;
Extend = extensionPoint::ANY+ extension::ANY base::ANY condition::ANY ;
Include = addition::ANY base::ANY ;
ExtensionPoint = useCase::ANY location::ANY ;
Element = ;
ModelElement = ;
GeneralizableElement = ;
Namespace = ;
Classifier = ;
Feature = ;
StructuralFeature = ;
AssociationEnd = association::ANY specification::ANY+ participant::ANY qualifier::ANY+ isNavigable::ANY ordering::ANY aggregation::ANY targetScope::ANY multiplicity::ANY changeability::ANY ;
Relationship = ;
Association = connection::ANY ;
Attribute = associationEnd::ANY initialValue::ANY ;
Generalization = parent::ANY powertype::ANY child::ANY discriminator::ANY ;
AggregationKind = ak_none:: ;
AggregationKind = ak_aggregate:: ;
AggregationKind = ak_composite:: ;
ChangeableKind = ck_changeable:: ;
ChangeableKind = ck_frozen:: ;
ChangeableKind = ck_addOnly:: ;
OrderingKind = ok_unordered:: ;
OrderingKind = ok_ordered:: ;
ScopeKind = sk_instance:: ;
ScopeKind = sk_classifier:: ;
VisibilityKind = vk_public:: ;
VisibilityKind = vk_protected:: ;
VisibilityKind = vk_private:: ;
VisibilityKind = vk_package:: ;
Multiplicity = range::ANY+ ;
MultiplicityRange = multiplicity::ANY lower::ANY upper::ANY ;
Expression = language::ANY body::ANY ;
BooleanExpression = ;
