module Main

exports
  sorts
        Program Identifier Wide-identifier Numeric-literal Character-literal String-literal Pragma Pragma-arguments Semi Blocksemi Unitsemi Eol Blockeol Colon Colon-equals Arrow Pragma-argument-association Identifier-arrow Basic-declaration Defining-identifier Type-declaration Full-type-declaration Type-definition Subtype-declaration Subtype-indication Subtype-mark Constraint Scalar-constraint Composite-constraint Object-declaration Subtype-access-or-array-type-definition Object-declaration-expression Defining-identifier-list Number-declaration Derived-type-definition Interface-and-record-extension-specification Range-constraint Range Enumeration-type-definition Enumeration-literal-specification Defining-character-literal Integer-type-definition Signed-integer-type-definition Modular-type-definition Real-type-definition Floating-point-definition Real-range-specification Fixed-point-definition Ordinary-fixed-point-definition Decimal-fixed-point-definition Digits-constraint Array-type-definition Unconstrained-array-definition Index-subtype-definition Constrained-array-definition Discrete-subtype-definition Component-definition Index-constraint Discrete-range Discriminant-part Unknown-discriminant-part Known-discriminant-part Discriminant-specification-list Semi-discriminant-specification Discriminant-specification Discriminant-specification-default Default-expression Discriminant-constraint Discriminant-association Discriminant-selector-name-arrow Or-selector-name Orbar Record-type-definition Record-type-definition-tagged Record-definition Component-list Component-item Component-declaration Component-declaration-default Variant-part Variant Discrete-choice-list Or-discrete-choice Discrete-choice Record-extension-part Abstract-subprogram-declaration Interface-type-definition Interface-type-definition-modifier Interface-type-definition-list Interface-list Access-type-definition Access-to-object-definition General-access-modifier Access-to-subprogram-definition Null-exclusion Access-definition Incomplete-type-declaration Incomplete-type-declaration-modifier Declarative-part Declarative-item Basic-declarative-item Body Proper-body Name Name-component Indexed-slice-type-conv-or-function-call-component Index-or-parameter-value Direct-name Prefix Explicit-dereference Explicit-dereference-component Implicit-dereference Indexed-component Indexed-component-component Index-expression Slice Slice-component Selected-component Selected-component-component Selector-name Attribute-reference Attribute-reference-component Attribute-designator Attribute-designator-expression Range-attribute-reference Range-attribute-designator Range-attribute-designator-expression Aggregate Record-aggregate Record-component-association-list Record-component-association Component-choice-list Extension-aggregate Ancestor-part Array-aggregate Positional-array-aggregate Comma-others Named-array-aggregate Array-component-association Expression-or-null Expression And-or-xor-relation And-or-xor Relation Relational-operator-simple-expression Simple-expression Binary-adding-operator-term Term Multiplying-operator-factor Factor Starstar-primary Primary If-expression Elsif-expression Else-expression Logical-operator Relational-operator Binary-adding-operator Unary-adding-operator Multiplying-operator Highest-precedence-operator Type-conversion Qualified-expression Expression-or-aggregate Allocator Sequence-of-statements Statement Unlabeled-statement Simple-statement Compound-statement Null-statement Label Statement-identifier Assignment-statement If-statement If-statement-elsif If-statement-else Condition Case-statement Case-statement-alternative Loop-statement Loop-statement-identifier Iteration-scheme Loop-parameter-specification Block-statement Block-statement-identifier-colon Declare-declarative-part Exit-statement Exit-statement-when-condition Goto-statement Subprogram-declaration Subprogram-specification Procedure-specification Function-specification Designator Designator-parent-unit-name Defining-designator Defining-program-unit-name Defining-program-unit-name-parent Operator-symbol Defining-operator-symbol Parameter-profile Parameter-and-result-profile Subtype-or-access-definition Formal-part Semi-parameter-specification Parameter-specification Parameter-type-specification Parameter-specification-default Mode Subprogram-body Procedure-call-statement Function-call Function-call-component Actual-parameter-part Parameter-association Parameter-association-selector-name Explicit-actual-parameter Simple-return-statement Extended-return-statement Extended-return-statement-expression Extended-return-statement-do Return-subtype-indication Null-procedure-declaration Package-declaration Package-specification Package-specification-private Package-specification-identifier Parent-name-dot Package-body Package-body-statements Package-body-identifier Private-type-declaration Private-type-declaration-tagged Private-extension-declaration Private-extension-declaration-modifier Private-extension-declaration-interface-list Overriding-indicator Use-clause Use-package-clause Used-name Use-type-clause Used-subtype-mark Renaming-declaration Object-renaming-declaration Exception-renaming-declaration Package-renaming-declaration Subprogram-renaming-declaration Generic-renaming-declaration Task-type-declaration Task-type-declaration-definition Task-type-declaration-definition-interface-list Single-task-declaration Single-task-declaration-definition Single-task-declaration-definition-interface-list Task-definition Task-definition-private Task-item Task-body Protected-type-declaration Protected-type-declaration-interface-list Single-protected-declaration Single-protected-declaration-interface-list Protected-definition Protected-definition-private Protected-operation-declaration Protected-element-declaration Protected-body Protected-operation-item Entry-declaration Entry-declaration-subtype Accept-statement Accept-statement-entry-index Accept-statement-statements Entry-index Entry-body Entry-body-formal-part Entry-body-formal-part-specification Entry-barrier Entry-index-specification Entry-call-statement Requeue-statement Requeue-statement-with-abort Delay-statement Delay-until-statement Delay-relative-statement Select-statement Selective-accept Selective-accept-or-alternative Selective-accept-else-alternative Guard Select-alternative Accept-alternative Delay-alternative Terminate-alternative Timed-entry-call Entry-call-alternative Procedure-or-entry-call Conditional-entry-call Asynchronous-select Triggering-alternative Triggering-statement Abortable-part Abort-statement Abort-name Compilation Compilation-unit Library-item Library-unit-declaration Library-unit-renaming-declaration Library-unit-body Parent-unit-name Context-clause Context-item With-clause Limited-with-clause With-name Nonlimited-with-clause Body-stub Subprogram-body-stub Package-body-stub Task-body-stub Protected-body-stub Subunit Exception-declaration Handled-sequence-of-statements Handled-sequence-of-statements-exception Exception-handler Exception-handler-specification Or-exception-choice Choice-parameter-specification Exception-choice Raise-statement Raise-statement-expression Generic-declaration Generic-subprogram-declaration Generic-package-declaration Generic-formal-part Generic-formal-parameter-declaration-or-use-clause Generic-formal-parameter-declaration Generic-instantiation Generic-instantiation-clause Generic-actual-part Generic-association Generic-association-selector-name Explicit-generic-actual-parameter Formal-object-declaration Formal-object-declaration-default Formal-type-declaration Formal-type-definition Formal-private-type-definition Formal-private-type-definition-tagged Formal-derived-type-definition Formal-derived-type-definition-modifier Formal-derived-type-definition-interface-list And-interface-list Formal-discrete-type-definition Formal-signed-integer-type-definition Formal-modular-type-definition Formal-floating-point-definition Formal-ordinary-fixed-point-definition Formal-decimal-fixed-point-definition Formal-array-type-definition Formal-access-type-definition Formal-interface-type-definition Formal-subprogram-declaration Formal-concrete-subprogram-declaration Formal-concrete-subprogram-declaration-default Formal-abstract-subprogram-declaration Subprogram-default Default-name Formal-package-declaration Formal-package-actual-part Others-arrow Comma-others-arrow-null Formal-package-association Aspect-clause Local-name Library-unit-name Attribute-definition-clause Enumeration-representation-clause Enumeration-aggregate Record-representation-clause Component-clause Position First-bit Last-bit Code-statement Restriction Arrow-restriction-parameter-argument Restriction-parameter-argument Delta-constraint At-clause Mod-clause 
  context-free syntax
        Compilation -> Program

        Id -> Identifier
        Wide-identifier -> Identifier

        "[" Stringlit "]" -> Wide-identifier

        Decimal-literal -> Numeric-literal
        Based-literal -> Numeric-literal

        Charlit -> Character-literal

        Stringlit -> String-literal

        "pragma" Id Blocksemi -> Pragma
        "pragma" Id Pragma-arguments Blocksemi -> Pragma

        "(" Pragma-argument-association"," ")" -> Pragma-arguments

        ";" NL -> Semi

        ";" NL -> Blocksemi

        ";" (NL NL) -> Unitsemi

        NL -> Eol

        NL -> Blockeol

        ":" -> Colon

        ":=" -> Colon-equals

        "=>" -> Arrow

        Identifier-arrow? Expression -> Pragma-argument-association

        Identifier Arrow -> Identifier-arrow

        Type-declaration -> Basic-declaration
        Subtype-declaration -> Basic-declaration
        Object-declaration -> Basic-declaration
        Number-declaration -> Basic-declaration
        Subprogram-declaration -> Basic-declaration
        Abstract-subprogram-declaration -> Basic-declaration
        Null-procedure-declaration -> Basic-declaration
        Package-declaration -> Basic-declaration
        Renaming-declaration -> Basic-declaration
        Exception-declaration -> Basic-declaration
        Generic-declaration -> Basic-declaration
        Generic-instantiation -> Basic-declaration
        Pragma -> Basic-declaration

        Identifier -> Defining-identifier

        Full-type-declaration -> Type-declaration
        Incomplete-type-declaration -> Type-declaration
        Private-type-declaration -> Type-declaration
        Private-extension-declaration -> Type-declaration

        "type" Defining-identifier Known-discriminant-part? "is" Type-definition Blocksemi -> Full-type-declaration
        Task-type-declaration -> Full-type-declaration
        Protected-type-declaration -> Full-type-declaration

        Enumeration-type-definition -> Type-definition
        Integer-type-definition -> Type-definition
        Real-type-definition -> Type-definition
        Array-type-definition -> Type-definition
        Record-type-definition -> Type-definition
        Access-type-definition -> Type-definition
        Derived-type-definition -> Type-definition
        Interface-type-definition -> Type-definition

        "subtype" Defining-identifier "is" Subtype-indication Semi -> Subtype-declaration

        Null-exclusion? Subtype-mark Constraint? -> Subtype-indication

        Name -> Subtype-mark

        Scalar-constraint -> Constraint
        Composite-constraint -> Constraint

        Range-constraint -> Scalar-constraint
        Digits-constraint -> Scalar-constraint
        Delta-constraint -> Scalar-constraint

        Index-constraint -> Composite-constraint
        Discriminant-constraint -> Composite-constraint

        Defining-identifier-list Colon "aliased"? "constant"? Subtype-access-or-array-type-definition Object-declaration-expression? Semi -> Object-declaration
        Single-task-declaration -> Object-declaration
        Single-protected-declaration -> Object-declaration

        Subtype-indication -> Subtype-access-or-array-type-definition
        Access-definition -> Subtype-access-or-array-type-definition
        Array-type-definition -> Subtype-access-or-array-type-definition

        Colon-equals Expression -> Object-declaration-expression

        Defining-identifier"," -> Defining-identifier-list

        Defining-identifier-list Colon "constant" Colon-equals Expression Semi -> Number-declaration

        "abstract"? "limited"? "new" Subtype-indication Interface-and-record-extension-specification? -> Derived-type-definition

        "and" Interface-list Record-extension-part? -> Interface-and-record-extension-specification
        Record-extension-part -> Interface-and-record-extension-specification

        "range" Range -> Range-constraint

        Range-attribute-reference -> Range
        Simple-expression SP ".." SP Simple-expression -> Range

        "(" Enumeration-literal-specification"," ")" -> Enumeration-type-definition

        Defining-identifier -> Enumeration-literal-specification
        Defining-character-literal -> Enumeration-literal-specification

        Character-literal -> Defining-character-literal

        Signed-integer-type-definition -> Integer-type-definition
        Modular-type-definition -> Integer-type-definition

        "range" Simple-expression SP ".." SP Simple-expression -> Signed-integer-type-definition

        "mod" Expression -> Modular-type-definition

        Floating-point-definition -> Real-type-definition
        Fixed-point-definition -> Real-type-definition

        "digits" Expression Real-range-specification? -> Floating-point-definition

        "range" Simple-expression SP ".." SP Simple-expression -> Real-range-specification

        Ordinary-fixed-point-definition -> Fixed-point-definition
        Decimal-fixed-point-definition -> Fixed-point-definition

        "delta" Expression Real-range-specification -> Ordinary-fixed-point-definition

        "delta" Expression "digits" Expression Real-range-specification? -> Decimal-fixed-point-definition

        "digits" Expression Range-constraint? -> Digits-constraint

        Unconstrained-array-definition -> Array-type-definition
        Constrained-array-definition -> Array-type-definition

        "array" "(" Index-subtype-definition"," ")" "of" Component-definition -> Unconstrained-array-definition

        Subtype-mark "range" "<>" -> Index-subtype-definition

        "array" "(" Discrete-subtype-definition"," ")" "of" Component-definition -> Constrained-array-definition

        Subtype-indication -> Discrete-subtype-definition
        Range -> Discrete-subtype-definition

        "aliased"? Subtype-indication -> Component-definition
        "aliased"? Access-definition -> Component-definition

        "(" Discrete-range"," ")" -> Index-constraint

        Subtype-indication -> Discrete-range
        Range -> Discrete-range

        Unknown-discriminant-part -> Discriminant-part
        Known-discriminant-part -> Discriminant-part

        "(" "<>" ")" -> Unknown-discriminant-part

        "(" Discriminant-specification-list ")" -> Known-discriminant-part

        Discriminant-specification Semi-discriminant-specification* -> Discriminant-specification-list

        ";" Discriminant-specification -> Semi-discriminant-specification

        Defining-identifier-list Colon Null-exclusion? Subtype-mark Discriminant-specification-default? -> Discriminant-specification
        Defining-identifier-list Colon Access-definition Discriminant-specification-default? -> Discriminant-specification

        Colon-equals Default-expression -> Discriminant-specification-default

        Expression -> Default-expression

        "(" Discriminant-association"," ")" -> Discriminant-constraint

        Discriminant-selector-name-arrow? Expression -> Discriminant-association

        Selector-name Or-selector-name* Arrow -> Discriminant-selector-name-arrow

        Orbar Selector-name -> Or-selector-name

        "|" -> Orbar
        "!" -> Orbar

        Record-type-definition-tagged? "limited"? Record-definition -> Record-type-definition

        "abstract"? "tagged" -> Record-type-definition-tagged

        IN Eol "record" IN Eol Component-list EX "end" "record" EX -> Record-definition
        "null" "record" -> Record-definition

        Component-item+ -> Component-list
        Component-item* Variant-part -> Component-list
        "null" Semi -> Component-list

        Component-declaration -> Component-item
        Aspect-clause -> Component-item
        Pragma -> Component-item

        Defining-identifier-list Colon Component-definition Component-declaration-default? Semi -> Component-declaration

        Colon-equals Default-expression -> Component-declaration-default

        "case" Direct-name "is" IN Blockeol Variant+ EX "end" "case" Blocksemi -> Variant-part

        "when" Discrete-choice-list Arrow Component-list -> Variant

        Discrete-choice Or-discrete-choice* -> Discrete-choice-list

        Orbar Discrete-choice -> Or-discrete-choice

        Expression -> Discrete-choice
        Discrete-range -> Discrete-choice
        "others" -> Discrete-choice

        "with" Record-definition -> Record-extension-part

        Overriding-indicator? Subprogram-specification "is" "abstract" Blocksemi -> Abstract-subprogram-declaration

        Interface-type-definition-modifier? "interface" Interface-type-definition-list? -> Interface-type-definition

        "limited" -> Interface-type-definition-modifier
        "task" -> Interface-type-definition-modifier
        "protected" -> Interface-type-definition-modifier
        "synchronized" -> Interface-type-definition-modifier

        "and" Interface-list -> Interface-type-definition-list

        Subtype-mark -> Interface-list
        Subtype-mark "and" Interface-list -> Interface-list

        Null-exclusion? Access-to-object-definition -> Access-type-definition
        Null-exclusion? Access-to-subprogram-definition -> Access-type-definition

        "access" General-access-modifier? Subtype-indication -> Access-to-object-definition

        "all" -> General-access-modifier
        "constant" -> General-access-modifier

        "access" "protected"? "procedure" Parameter-profile -> Access-to-subprogram-definition
        "access" "protected"? "function" Parameter-and-result-profile -> Access-to-subprogram-definition

        "not" "null" -> Null-exclusion

        Null-exclusion? "access" "constant"? Subtype-mark -> Access-definition
        Null-exclusion? "access" "protected"? "procedure" Parameter-profile -> Access-definition
        Null-exclusion? "access" "protected"? "function" Parameter-and-result-profile -> Access-definition

        "type" Defining-identifier Discriminant-part? Incomplete-type-declaration-modifier? Blocksemi -> Incomplete-type-declaration

        "is" "tagged" -> Incomplete-type-declaration-modifier

        Declarative-item* -> Declarative-part

        Basic-declarative-item -> Declarative-item
        Body -> Declarative-item

        Basic-declaration -> Basic-declarative-item
        Aspect-clause -> Basic-declarative-item
        Use-clause -> Basic-declarative-item

        Proper-body -> Body
        Body-stub -> Body

        Subprogram-body -> Proper-body
        Package-body -> Proper-body
        Task-body -> Proper-body
        Protected-body -> Proper-body

        Direct-name Name-component* -> Name
        Character-literal -> Name

        Explicit-dereference-component -> Name-component
        Indexed-slice-type-conv-or-function-call-component -> Name-component
        Selected-component-component -> Name-component
        Attribute-reference-component -> Name-component

        "(" Index-or-parameter-value"," ")" -> Indexed-slice-type-conv-or-function-call-component

        Expression -> Index-or-parameter-value
        Discrete-range -> Index-or-parameter-value
        Parameter-association -> Index-or-parameter-value

        Identifier -> Direct-name
        Operator-symbol -> Direct-name

        Name -> Prefix

        Name Explicit-dereference-component -> Explicit-dereference

        "." "all" -> Explicit-dereference-component

        Name -> Implicit-dereference

        Prefix Indexed-component-component -> Indexed-component

        "(" Index-expression"," ")" -> Indexed-component-component

        Expression -> Index-expression

        Prefix Slice-component -> Slice

        "(" Discrete-range ")" -> Slice-component

        Prefix Selected-component-component -> Selected-component

        "." Selector-name -> Selected-component-component

        Identifier -> Selector-name
        Character-literal -> Selector-name
        Operator-symbol -> Selector-name

        Prefix Attribute-reference-component -> Attribute-reference

        SPOFF "'" Attribute-designator SPON -> Attribute-reference-component

        Identifier Attribute-designator-expression? -> Attribute-designator
        "access" -> Attribute-designator
        "delta" -> Attribute-designator
        "digits" -> Attribute-designator

        "(" Expression ")" -> Attribute-designator-expression

        Prefix SPOFF "'" Range-attribute-designator -> Range-attribute-reference

        "range" SPON Range-attribute-designator-expression? -> Range-attribute-designator

        "(" Expression ")" -> Range-attribute-designator-expression

        Record-aggregate -> Aggregate
        Extension-aggregate -> Aggregate
        Array-aggregate -> Aggregate

        "(" Record-component-association-list ")" -> Record-aggregate

        Record-component-association"," -> Record-component-association-list
        "null" "record" -> Record-component-association-list

        Expression -> Record-component-association
        Component-choice-list Arrow Expression-or-null -> Record-component-association

        Selector-name Or-selector-name* -> Component-choice-list
        "others" -> Component-choice-list

        "(" Ancestor-part "with" Record-component-association-list ")" -> Extension-aggregate

        Expression -> Ancestor-part
        Subtype-mark -> Ancestor-part

        Positional-array-aggregate -> Array-aggregate
        Named-array-aggregate -> Array-aggregate

        "(" Index-expression"," Comma-others* ")" -> Positional-array-aggregate

        "," "others" Arrow Expression-or-null -> Comma-others

        "(" Array-component-association"," ")" -> Named-array-aggregate

        Discrete-choice-list Arrow Expression-or-null -> Array-component-association

        Expression -> Expression-or-null
        "<>" -> Expression-or-null

        Relation And-or-xor-relation* -> Expression

        And-or-xor Relation -> And-or-xor-relation

        "and" "then"? -> And-or-xor
        "or" "else"? -> And-or-xor
        "xor" -> And-or-xor

        Simple-expression Relational-operator-simple-expression? -> Relation
        Simple-expression "not"? "in" Range -> Relation
        Simple-expression "not"? "in" Subtype-mark -> Relation

        Relational-operator Simple-expression -> Relational-operator-simple-expression

        Unary-adding-operator? Term Binary-adding-operator-term* -> Simple-expression

        Binary-adding-operator Term -> Binary-adding-operator-term

        Factor Multiplying-operator-factor* -> Term

        Multiplying-operator Factor -> Multiplying-operator-factor

        Primary Starstar-primary? -> Factor
        "abs" Primary -> Factor
        "not" Primary -> Factor

        "**" Primary -> Starstar-primary

        Numeric-literal -> Primary
        "null" -> Primary
        String-literal -> Primary
        Aggregate -> Primary
        Name -> Primary
        Qualified-expression -> Primary
        Allocator -> Primary
        "(" Expression ")" -> Primary
        If-expression -> Primary

        "if" Expression "then" Expression Elsif-expression* Else-expression? -> If-expression

        "elsif" Expression "then" Expression -> Elsif-expression

        "else" Expression -> Else-expression

        "and" -> Logical-operator
        "or" -> Logical-operator
        "xor" -> Logical-operator

        "=" -> Relational-operator
        "/=" -> Relational-operator
        "<" -> Relational-operator
        "<=" -> Relational-operator
        ">" -> Relational-operator
        ">=" -> Relational-operator

        "+" -> Binary-adding-operator
        "-" -> Binary-adding-operator
        (IN NL) "&" EX -> Binary-adding-operator

        "+" -> Unary-adding-operator
        "-" -> Unary-adding-operator

        "*" -> Multiplying-operator
        "/" -> Multiplying-operator
        "mod" -> Multiplying-operator
        "rem" -> Multiplying-operator

        "**" -> Highest-precedence-operator
        "abs" -> Highest-precedence-operator
        "not" -> Highest-precedence-operator

        Subtype-mark "(" Expression ")" -> Type-conversion

        Subtype-mark SPOFF "'" Expression-or-aggregate -> Qualified-expression

        "(" SPON Expression ")" -> Expression-or-aggregate
        SPON Aggregate -> Expression-or-aggregate

        "new" Subtype-indication -> Allocator
        "new" Qualified-expression -> Allocator

        Statement+ -> Sequence-of-statements

        Label* Unlabeled-statement -> Statement

        Simple-statement -> Unlabeled-statement
        Compound-statement -> Unlabeled-statement

        Null-statement -> Simple-statement
        Procedure-call-statement -> Simple-statement
        Assignment-statement -> Simple-statement
        Exit-statement -> Simple-statement
        Goto-statement -> Simple-statement
        Simple-return-statement -> Simple-statement
        Entry-call-statement -> Simple-statement
        Requeue-statement -> Simple-statement
        Delay-statement -> Simple-statement
        Abort-statement -> Simple-statement
        Raise-statement -> Simple-statement
        Code-statement -> Simple-statement
        Pragma -> Simple-statement

        If-statement -> Compound-statement
        Case-statement -> Compound-statement
        Loop-statement -> Compound-statement
        Block-statement -> Compound-statement
        Extended-return-statement -> Compound-statement
        Accept-statement -> Compound-statement
        Select-statement -> Compound-statement

        "null" Semi -> Null-statement

        "<<" Statement-identifier ">>" -> Label

        Direct-name -> Statement-identifier

        Name Colon-equals Expression Semi -> Assignment-statement

        "if" Condition "then" IN Eol Sequence-of-statements If-statement-elsif* If-statement-else? EX "end" "if" Semi -> If-statement

        EX "elsif" Condition "then" IN Eol Sequence-of-statements -> If-statement-elsif

        EX "else" IN Eol Sequence-of-statements -> If-statement-else

        Expression -> Condition

        "case" Expression "is" IN Blockeol Case-statement-alternative+ EX "end" "case" Blocksemi -> Case-statement

        "when" Discrete-choice-list Arrow Sequence-of-statements -> Case-statement-alternative

        Loop-statement-identifier? Iteration-scheme? "loop" IN Eol Sequence-of-statements EX "end" "loop" Identifier? Blocksemi -> Loop-statement

        Statement-identifier Colon -> Loop-statement-identifier

        "while" Condition -> Iteration-scheme
        "for" Loop-parameter-specification -> Iteration-scheme

        Defining-identifier "in" "reverse"? Discrete-subtype-definition -> Loop-parameter-specification

        Block-statement-identifier-colon? Declare-declarative-part? "begin" IN Eol Handled-sequence-of-statements EX "end" Identifier? Unitsemi -> Block-statement

        Statement-identifier Colon -> Block-statement-identifier-colon

        "declare" IN Eol Declarative-part EX -> Declare-declarative-part

        "exit" Name? Exit-statement-when-condition? Semi -> Exit-statement

        "when" Condition -> Exit-statement-when-condition

        "goto" Name Semi -> Goto-statement

        Overriding-indicator? Subprogram-specification Blocksemi -> Subprogram-declaration

        Procedure-specification -> Subprogram-specification
        Function-specification -> Subprogram-specification

        "procedure" Defining-program-unit-name Parameter-profile -> Procedure-specification

        "function" Defining-designator Parameter-and-result-profile -> Function-specification

        Designator-parent-unit-name? Identifier -> Designator
        Operator-symbol -> Designator

        Parent-unit-name "." -> Designator-parent-unit-name

        Defining-program-unit-name -> Defining-designator
        Defining-operator-symbol -> Defining-designator

        Defining-program-unit-name-parent? Defining-identifier -> Defining-program-unit-name

        Parent-unit-name "." -> Defining-program-unit-name-parent

        String-literal -> Operator-symbol

        Operator-symbol -> Defining-operator-symbol

        Formal-part? -> Parameter-profile

        Formal-part? "return" Subtype-or-access-definition -> Parameter-and-result-profile

        Null-exclusion? Subtype-mark -> Subtype-or-access-definition
        Access-definition -> Subtype-or-access-definition

        "(" Parameter-specification Semi-parameter-specification* ")" -> Formal-part

        ";" Parameter-specification -> Semi-parameter-specification

        Defining-identifier-list Colon Parameter-type-specification -> Parameter-specification

        Mode Null-exclusion? Subtype-mark Parameter-specification-default? -> Parameter-type-specification
        Access-definition Parameter-specification-default? -> Parameter-type-specification

        Colon-equals Default-expression -> Parameter-specification-default

        "in"? -> Mode
        "in" "out" -> Mode
        "out" -> Mode

        NL Overriding-indicator? Subprogram-specification "is" IN Blockeol Declarative-part EX "begin" IN Eol Handled-sequence-of-statements EX "end" Designator? Unitsemi -> Subprogram-body

        Prefix Actual-parameter-part? Semi -> Procedure-call-statement

        Prefix Function-call-component -> Function-call

        Actual-parameter-part -> Function-call-component

        "(" Parameter-association"," ")" -> Actual-parameter-part

        Parameter-association-selector-name Explicit-actual-parameter -> Parameter-association

        Selector-name Arrow -> Parameter-association-selector-name

        Expression -> Explicit-actual-parameter

        "return" Expression? Semi -> Simple-return-statement

        "return" Defining-identifier Colon "aliased"? Return-subtype-indication Extended-return-statement-expression? Extended-return-statement-do? Unitsemi -> Extended-return-statement

        Colon-equals Expression -> Extended-return-statement-expression

        "do" IN Eol Handled-sequence-of-statements EX "end" "return" -> Extended-return-statement-do

        Subtype-indication -> Return-subtype-indication
        Access-definition -> Return-subtype-indication

        Overriding-indicator? Procedure-specification "is" "null" Blocksemi -> Null-procedure-declaration

        Package-specification Unitsemi -> Package-declaration

        NL "package" Defining-program-unit-name "is" IN Blockeol Basic-declarative-item* EX Package-specification-private? "end" Package-specification-identifier? -> Package-specification

        "private" IN Eol Basic-declarative-item* EX -> Package-specification-private

        Parent-name-dot? Identifier -> Package-specification-identifier

        Parent-unit-name "." -> Parent-name-dot

        NL "package" "body" Defining-program-unit-name "is" IN Blockeol Declarative-part EX Package-body-statements? "end" Package-body-identifier? Unitsemi -> Package-body

        "begin" IN Eol Handled-sequence-of-statements EX -> Package-body-statements

        Parent-name-dot? Identifier -> Package-body-identifier

        "type" Defining-identifier Discriminant-part? "is" Blockeol Private-type-declaration-tagged? "limited"? "private" Blocksemi -> Private-type-declaration

        "abstract"? "tagged" -> Private-type-declaration-tagged

        "type" Defining-identifier Discriminant-part? "is" Blockeol "abstract"? Private-extension-declaration-modifier? "new" Subtype-indication Private-extension-declaration-interface-list? "with" "private" Blocksemi -> Private-extension-declaration

        "limited" -> Private-extension-declaration-modifier
        "synchronized" -> Private-extension-declaration-modifier

        "and" Interface-list -> Private-extension-declaration-interface-list

        "not"? "overriding" -> Overriding-indicator

        Use-package-clause -> Use-clause
        Use-type-clause -> Use-clause

        "use" Used-name"," Semi -> Use-package-clause

        Name -> Used-name

        "use" "type" Used-subtype-mark"," Semi -> Use-type-clause

        Subtype-mark -> Used-subtype-mark

        Object-renaming-declaration -> Renaming-declaration
        Exception-renaming-declaration -> Renaming-declaration
        Package-renaming-declaration -> Renaming-declaration
        Subprogram-renaming-declaration -> Renaming-declaration
        Generic-renaming-declaration -> Renaming-declaration

        Defining-identifier Colon Null-exclusion? Subtype-mark "renames" Name Semi -> Object-renaming-declaration
        Defining-identifier Colon Access-definition "renames" Name Semi -> Object-renaming-declaration

        Defining-identifier Colon "exception" "renames" Name Semi -> Exception-renaming-declaration

        NL "package" Defining-program-unit-name "renames" Name Blocksemi -> Package-renaming-declaration

        Overriding-indicator? Subprogram-specification "renames" Name Blocksemi -> Subprogram-renaming-declaration

        "generic" "package" Defining-program-unit-name "renames" Name Blocksemi -> Generic-renaming-declaration
        "generic" "procedure" Defining-program-unit-name "renames" Name Blocksemi -> Generic-renaming-declaration
        "generic" "function" Defining-program-unit-name "renames" Name Blocksemi -> Generic-renaming-declaration

        "task" "type" Defining-identifier Known-discriminant-part? Task-type-declaration-definition? Blocksemi -> Task-type-declaration

        "is" IN Blockeol Task-type-declaration-definition-interface-list? Task-definition EX -> Task-type-declaration-definition

        "new" Interface-list "with" -> Task-type-declaration-definition-interface-list

        "task" Defining-identifier Single-task-declaration-definition? Unitsemi -> Single-task-declaration

        "is" IN Blockeol Single-task-declaration-definition-interface-list? EX Task-definition -> Single-task-declaration-definition

        "new" Interface-list "with" -> Single-task-declaration-definition-interface-list

        IN Task-item* Task-definition-private? EX "end" Identifier? -> Task-definition

        "private" IN Eol Task-item* EX -> Task-definition-private

        Entry-declaration -> Task-item
        Aspect-clause -> Task-item
        Pragma -> Task-item

        NL "task" "body" Defining-identifier "is" IN Blockeol Declarative-part EX "begin" IN Eol Handled-sequence-of-statements EX "end" Identifier? Unitsemi -> Task-body

        NL "protected" "type" Defining-identifier Known-discriminant-part? "is" Protected-type-declaration-interface-list? Eol Protected-definition Unitsemi -> Protected-type-declaration

        "new" Interface-list "with" -> Protected-type-declaration-interface-list

        "protected" Defining-identifier "is" Blockeol Single-protected-declaration-interface-list? Protected-definition Unitsemi -> Single-protected-declaration

        "new" Interface-list "with" -> Single-protected-declaration-interface-list

        IN Protected-operation-declaration* Protected-definition-private? EX "end" Identifier? -> Protected-definition

        EX "private" IN Eol Protected-element-declaration* -> Protected-definition-private

        Subprogram-declaration -> Protected-operation-declaration
        Entry-declaration -> Protected-operation-declaration
        Aspect-clause -> Protected-operation-declaration
        Pragma -> Protected-operation-declaration

        Protected-operation-declaration -> Protected-element-declaration
        Component-declaration -> Protected-element-declaration

        "protected" "body" Defining-identifier "is" IN Blockeol Protected-operation-item* EX "end" Identifier? Unitsemi -> Protected-body

        Subprogram-declaration -> Protected-operation-item
        Subprogram-body -> Protected-operation-item
        Entry-body -> Protected-operation-item
        Aspect-clause -> Protected-operation-item

        Overriding-indicator? "entry" Defining-identifier Entry-declaration-subtype? Parameter-profile Blocksemi -> Entry-declaration

        "(" Discrete-subtype-definition ")" -> Entry-declaration-subtype

        "accept" Direct-name Accept-statement-entry-index? Parameter-profile Accept-statement-statements? Unitsemi -> Accept-statement

        "(" Entry-index ")" -> Accept-statement-entry-index

        "do" IN Eol Handled-sequence-of-statements EX "end" Identifier? -> Accept-statement-statements

        Expression -> Entry-index

        NL "entry" Defining-identifier Entry-body-formal-part Entry-barrier "is" IN Blockeol Declarative-part EX "begin" IN Eol Handled-sequence-of-statements EX "end" Identifier? Unitsemi -> Entry-body

        Entry-body-formal-part-specification? Parameter-profile -> Entry-body-formal-part

        "(" Entry-index-specification ")" -> Entry-body-formal-part-specification

        "when" Condition -> Entry-barrier

        "for" Defining-identifier "in" Discrete-subtype-definition -> Entry-index-specification

        Name Actual-parameter-part? Semi -> Entry-call-statement

        "requeue" Name Requeue-statement-with-abort? Semi -> Requeue-statement

        "with" "abort" -> Requeue-statement-with-abort

        Delay-until-statement -> Delay-statement
        Delay-relative-statement -> Delay-statement

        "delay" "until" Expression Semi -> Delay-until-statement

        "delay" Expression Semi -> Delay-relative-statement

        Selective-accept -> Select-statement
        Timed-entry-call -> Select-statement
        Conditional-entry-call -> Select-statement
        Asynchronous-select -> Select-statement

        "select" IN Eol Guard? Select-alternative Selective-accept-or-alternative* Selective-accept-else-alternative? EX "end" "select" Unitsemi -> Selective-accept

        EX "or" IN Eol Guard? Select-alternative -> Selective-accept-or-alternative

        "else" Sequence-of-statements -> Selective-accept-else-alternative

        "when" Condition Arrow -> Guard

        Accept-alternative -> Select-alternative
        Delay-alternative -> Select-alternative
        Terminate-alternative -> Select-alternative

        Accept-statement Sequence-of-statements? -> Accept-alternative

        Delay-statement Sequence-of-statements? -> Delay-alternative

        "terminate" Semi -> Terminate-alternative

        "select" IN Eol Entry-call-alternative EX "or" IN Eol Delay-alternative EX "end" "select" Unitsemi -> Timed-entry-call

        Procedure-or-entry-call Sequence-of-statements? -> Entry-call-alternative

        Procedure-call-statement -> Procedure-or-entry-call
        Entry-call-statement -> Procedure-or-entry-call

        "select" IN Eol Entry-call-alternative EX "else" IN Eol Sequence-of-statements EX "end" "select" Unitsemi -> Conditional-entry-call

        "select" IN Eol Triggering-alternative (EX EX) "then" "abort" IN Eol Abortable-part EX "end" "select" Unitsemi -> Asynchronous-select

        Triggering-statement Sequence-of-statements? -> Triggering-alternative

        Procedure-or-entry-call -> Triggering-statement
        Delay-statement -> Triggering-statement

        Sequence-of-statements -> Abortable-part

        "abort" Abort-name"," Semi -> Abort-statement

        Name -> Abort-name

        Compilation-unit* -> Compilation

        Context-clause Library-item -> Compilation-unit
        Context-clause Subunit -> Compilation-unit
        Pragma -> Compilation-unit

        "private"? Library-unit-declaration -> Library-item
        Library-unit-body -> Library-item
        "private"? Library-unit-renaming-declaration -> Library-item

        Subprogram-declaration -> Library-unit-declaration
        Package-declaration -> Library-unit-declaration
        Generic-declaration -> Library-unit-declaration
        Generic-instantiation -> Library-unit-declaration
        Pragma -> Library-unit-declaration

        Package-renaming-declaration -> Library-unit-renaming-declaration
        Generic-renaming-declaration -> Library-unit-renaming-declaration
        Subprogram-renaming-declaration -> Library-unit-renaming-declaration
        Pragma -> Library-unit-renaming-declaration

        Subprogram-body -> Library-unit-body
        Package-body -> Library-unit-body

        Name -> Parent-unit-name

        Context-item* -> Context-clause

        With-clause -> Context-item
        Use-clause -> Context-item

        Limited-with-clause -> With-clause
        Nonlimited-with-clause -> With-clause

        "limited" "private"? "with" With-name"," Semi -> Limited-with-clause

        Name -> With-name

        "private"? "with" With-name"," Semi -> Nonlimited-with-clause

        Subprogram-body-stub -> Body-stub
        Package-body-stub -> Body-stub
        Task-body-stub -> Body-stub
        Protected-body-stub -> Body-stub

        Overriding-indicator? Subprogram-specification "is" "separate" Blocksemi -> Subprogram-body-stub

        NL "package" "body" Defining-identifier "is" "separate" Blocksemi -> Package-body-stub

        "task" "body" Defining-identifier "is" "separate" Blocksemi -> Task-body-stub

        "protected" "body" Defining-identifier "is" "separate" Blocksemi -> Protected-body-stub

        "separate" "(" Parent-unit-name ")" Proper-body -> Subunit

        Defining-identifier-list Colon "exception" Semi -> Exception-declaration

        Sequence-of-statements Handled-sequence-of-statements-exception? -> Handled-sequence-of-statements

        "exception" IN Eol Exception-handler+ EX -> Handled-sequence-of-statements-exception

        "when" Exception-handler-specification? Exception-choice Or-exception-choice* Arrow Sequence-of-statements -> Exception-handler

        Choice-parameter-specification Colon -> Exception-handler-specification

        Orbar Exception-choice -> Or-exception-choice

        Defining-identifier -> Choice-parameter-specification

        Name -> Exception-choice
        "others" -> Exception-choice

        "raise" Semi -> Raise-statement
        "raise" Name Raise-statement-expression? Semi -> Raise-statement

        "with" Expression -> Raise-statement-expression

        Generic-subprogram-declaration -> Generic-declaration
        Generic-package-declaration -> Generic-declaration

        Generic-formal-part Subprogram-specification Blocksemi -> Generic-subprogram-declaration

        Generic-formal-part Package-specification Blocksemi -> Generic-package-declaration

        "generic" Generic-formal-parameter-declaration-or-use-clause* -> Generic-formal-part

        Generic-formal-parameter-declaration -> Generic-formal-parameter-declaration-or-use-clause
        Use-clause -> Generic-formal-parameter-declaration-or-use-clause
        Pragma -> Generic-formal-parameter-declaration-or-use-clause

        Formal-object-declaration -> Generic-formal-parameter-declaration
        Formal-type-declaration -> Generic-formal-parameter-declaration
        Formal-subprogram-declaration -> Generic-formal-parameter-declaration
        Formal-package-declaration -> Generic-formal-parameter-declaration

        "package" Defining-program-unit-name "is" Generic-instantiation-clause -> Generic-instantiation
        Overriding-indicator? "procedure" Defining-program-unit-name "is" Generic-instantiation-clause -> Generic-instantiation
        Overriding-indicator? "function" Defining-designator "is" Generic-instantiation-clause -> Generic-instantiation

        "new" Name Generic-actual-part? Blocksemi -> Generic-instantiation-clause

        "(" Generic-association"," ")" -> Generic-actual-part

        Generic-association-selector-name? Explicit-generic-actual-parameter -> Generic-association

        Selector-name Arrow -> Generic-association-selector-name

        Expression -> Explicit-generic-actual-parameter
        Name -> Explicit-generic-actual-parameter
        Subtype-mark -> Explicit-generic-actual-parameter

        Defining-identifier-list Colon Mode Null-exclusion? Subtype-mark Formal-object-declaration-default? Semi -> Formal-object-declaration
        Defining-identifier-list Colon Mode Access-definition Formal-object-declaration-default? Semi -> Formal-object-declaration

        Colon-equals Default-expression -> Formal-object-declaration-default

        "type" Defining-identifier Discriminant-part? "is" Formal-type-definition Blocksemi -> Formal-type-declaration

        Formal-private-type-definition -> Formal-type-definition
        Formal-derived-type-definition -> Formal-type-definition
        Formal-discrete-type-definition -> Formal-type-definition
        Formal-signed-integer-type-definition -> Formal-type-definition
        Formal-modular-type-definition -> Formal-type-definition
        Formal-floating-point-definition -> Formal-type-definition
        Formal-ordinary-fixed-point-definition -> Formal-type-definition
        Formal-decimal-fixed-point-definition -> Formal-type-definition
        Formal-array-type-definition -> Formal-type-definition
        Formal-access-type-definition -> Formal-type-definition
        Formal-interface-type-definition -> Formal-type-definition

        Formal-private-type-definition-tagged? "limited"? "private" -> Formal-private-type-definition

        "abstract"? "tagged" -> Formal-private-type-definition-tagged

        "abstract"? Formal-derived-type-definition-modifier? "new" Subtype-mark Formal-derived-type-definition-interface-list? -> Formal-derived-type-definition

        "limited" -> Formal-derived-type-definition-modifier
        "synchronized" -> Formal-derived-type-definition-modifier

        And-interface-list? "with" "private" -> Formal-derived-type-definition-interface-list

        "and" Interface-list -> And-interface-list

        "(" "<>" ")" -> Formal-discrete-type-definition

        "range" "<>" -> Formal-signed-integer-type-definition

        "mod" "<>" -> Formal-modular-type-definition

        "digits" "<>" -> Formal-floating-point-definition

        "delta" "<>" -> Formal-ordinary-fixed-point-definition

        "delta" "<>" "digits" "<>" -> Formal-decimal-fixed-point-definition

        Array-type-definition -> Formal-array-type-definition

        Access-type-definition -> Formal-access-type-definition

        Interface-type-definition -> Formal-interface-type-definition

        Formal-concrete-subprogram-declaration -> Formal-subprogram-declaration
        Formal-abstract-subprogram-declaration -> Formal-subprogram-declaration

        "with" Subprogram-specification Formal-concrete-subprogram-declaration-default? Semi -> Formal-concrete-subprogram-declaration

        "is" Subprogram-default -> Formal-concrete-subprogram-declaration-default

        "with" Subprogram-specification "is" "abstract" Subprogram-default? Semi -> Formal-abstract-subprogram-declaration

        Default-name -> Subprogram-default
        "<>" -> Subprogram-default
        "null" -> Subprogram-default

        Name -> Default-name

        "with" "package" Defining-identifier "is" "new" Name Formal-package-actual-part Semi -> Formal-package-declaration

        "(" Others-arrow? "<>" ")" -> Formal-package-actual-part
        Generic-actual-part? -> Formal-package-actual-part
        "(" Formal-package-association"," Comma-others-arrow-null? ")" -> Formal-package-actual-part

        "others" Arrow -> Others-arrow

        "," "others" Arrow "<>" -> Comma-others-arrow-null

        Generic-association -> Formal-package-association
        Selector-name Arrow "<>" -> Formal-package-association

        Attribute-definition-clause -> Aspect-clause
        Enumeration-representation-clause -> Aspect-clause
        Record-representation-clause -> Aspect-clause
        At-clause -> Aspect-clause

        Direct-name -> Local-name
        Direct-name SPOFF "'" Attribute-designator SPON -> Local-name

        Name -> Library-unit-name

        "for" Local-name SPOFF "'" Attribute-designator SPON "use" Expression Blocksemi -> Attribute-definition-clause

        "for" Local-name "use" Enumeration-aggregate Blocksemi -> Enumeration-representation-clause

        Array-aggregate -> Enumeration-aggregate

        "for" Local-name "use" IN Eol "record" Mod-clause? IN Eol Component-clause* EX "end" "record" Blocksemi EX -> Record-representation-clause

        Local-name "at" Position "range" First-bit SP ".." SP Last-bit Semi -> Component-clause

        Expression -> Position

        Simple-expression -> First-bit

        Simple-expression -> Last-bit

        Qualified-expression Semi -> Code-statement

        Identifier Arrow-restriction-parameter-argument? -> Restriction

        Arrow Restriction-parameter-argument -> Arrow-restriction-parameter-argument

        Expression -> Restriction-parameter-argument

        "delta" Expression Range-constraint? -> Delta-constraint

        "for" Direct-name "use" "at" Expression Semi -> At-clause

        "at" "mod" Expression Semi -> Mod-clause
