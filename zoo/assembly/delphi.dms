asm_stmtblock = 'asm' asm_stm* end_struct ;
asm_stm = asmlabel_colon? asm_unlabeledstm_semi? ;
asmlabel_colon = asmlabel colon ;
asm_unlabeledstm_semi = asm_unlabeledstm ';'? NL ;
asmid = '@'* asmlbl ;
asmid = '@+'* id ;
asmid = '@+'* anynumber ;
asmid = '@+'* key ;
asmlabel = SPOFF asmid+ SPON ;
asmlabel = label_id ;
asm_expr = asm_term asm_infix_expr* ;
asm_infix_expr = asm_infixop asm_term ;
asm_term = asm_prefixop* asm_primary asm_postfixop* ;
asm_primary = '[' asm_expr ']' ;
asm_primary = '(' asm_expr ')' ;
asm_primary = asm_register ;
asm_primary = id ;
asm_primary = anynumber ;
asm_primary = charlit ;
asm_primary = stringlit ;
asm_primary = asmhex ;
asm_primary = SP asmlabel ;
asmhex = number SPOFF id SPON ;
asm_unlabeledstm = asm_directive asm_directive_arg',' ;
asm_unlabeledstm = asm_opcode_prefix? asm_opcode asm_expr',' ;
asm_opcode_prefix = 'lock' space? ;
asm_opcode = 'adc' ;
asm_opcode = 'add' ;
asm_opcode = 'and' ;
asm_opcode = 'bswap' ;
asm_opcode = 'bt' ;
asm_opcode = 'btr' ;
asm_opcode = 'bts' ;
asm_opcode = 'call' ;
asm_opcode = 'cdq' ;
asm_opcode = 'cld' ;
asm_opcode = 'cmp' ;
asm_opcode = 'dec' ;
asm_opcode = 'div' ;
asm_opcode = 'f2xm1' ;
asm_opcode = 'fabs' ;
asm_opcode = 'fadd' ;
asm_opcode = 'faddp' ;
asm_opcode = 'fbstp' ;
asm_opcode = 'fchs' ;
asm_opcode = 'fclex' ;
asm_opcode = 'fcom' ;
asm_opcode = 'fcomp' ;
asm_opcode = 'fcos' ;
asm_opcode = 'fdiv' ;
asm_opcode = 'fdivp' ;
asm_opcode = 'fdivrp' ;
asm_opcode = 'ffree' ;
asm_opcode = 'fiadd' ;
asm_opcode = 'fidiv' ;
asm_opcode = 'fild' ;
asm_opcode = 'fimul' ;
asm_opcode = 'fistp' ;
asm_opcode = 'fld' ;
asm_opcode = 'fld1' ;
asm_opcode = 'fldcw' ;
asm_opcode = 'fldl2e' ;
asm_opcode = 'fldlg2' ;
asm_opcode = 'fldln2' ;
asm_opcode = 'fldz' ;
asm_opcode = 'fmul' ;
asm_opcode = 'fmulp' ;
asm_opcode = 'fnclex' ;
asm_opcode = 'fninit' ;
asm_opcode = 'fnstcw' ;
asm_opcode = 'fnstsw' ;
asm_opcode = 'fpatan' ;
asm_opcode = 'fprem' ;
asm_opcode = 'fptan' ;
asm_opcode = 'frndint' ;
asm_opcode = 'fscale' ;
asm_opcode = 'fsin' ;
asm_opcode = 'fsincos' ;
asm_opcode = 'fsqrt' ;
asm_opcode = 'fstcw' ;
asm_opcode = 'fstp' ;
asm_opcode = 'fstsw' ;
asm_opcode = 'fsub' ;
asm_opcode = 'fsubp' ;
asm_opcode = 'fsubr' ;
asm_opcode = 'fwait' ;
asm_opcode = 'fxch' ;
asm_opcode = 'fxtract' ;
asm_opcode = 'fyl2x' ;
asm_opcode = 'fyl2xp1' ;
asm_opcode = 'imul' ;
asm_opcode = 'inc' ;
asm_opcode = 'int' ;
asm_opcode = 'ja' ;
asm_opcode = 'jae' ;
asm_opcode = 'jb' ;
asm_opcode = 'jbe' ;
asm_opcode = 'jc' ;
asm_opcode = 'je' ;
asm_opcode = 'jecxz' ;
asm_opcode = 'jg' ;
asm_opcode = 'jge' ;
asm_opcode = 'jl' ;
asm_opcode = 'jle' ;
asm_opcode = 'jmp' ;
asm_opcode = 'jnc' ;
asm_opcode = 'jne' ;
asm_opcode = 'jnl' ;
asm_opcode = 'jns' ;
asm_opcode = 'jnz' ;
asm_opcode = 'jo' ;
asm_opcode = 'jp' ;
asm_opcode = 'js' ;
asm_opcode = 'jz' ;
asm_opcode = 'lea' ;
asm_opcode = 'leave' ;
asm_opcode = 'lodsb' ;
asm_opcode = 'lodsw' ;
asm_opcode = 'loop' ;
asm_opcode = 'mov' ;
asm_opcode = 'movsb' ;
asm_opcode = 'movsx' ;
asm_opcode = 'movzx' ;
asm_opcode = 'mul' ;
asm_opcode = 'neg' ;
asm_opcode = 'not' ;
asm_opcode = 'or' ;
asm_opcode = 'pop' ;
asm_opcode = 'popfd' ;
asm_opcode = 'push' ;
asm_opcode = 'pushfd' ;
asm_opcode = 'rcl' ;
asm_opcode = 'rcr' ;
asm_opcode = 'rep' ;
asm_opcode = 'repe' ;
asm_opcode = 'repne' ;
asm_opcode = 'ret' ;
asm_opcode = 'rol' ;
asm_opcode = 'ror' ;
asm_opcode = 'sahf' ;
asm_opcode = 'sar' ;
asm_opcode = 'sbb' ;
asm_opcode = 'seto' ;
asm_opcode = 'shl' ;
asm_opcode = 'shld' ;
asm_opcode = 'shr' ;
asm_opcode = 'shrd' ;
asm_opcode = 'std' ;
asm_opcode = 'stosb' ;
asm_opcode = 'stosd' ;
asm_opcode = 'stosw' ;
asm_opcode = 'sub' ;
asm_opcode = 'test' ;
asm_opcode = 'wait' ;
asm_opcode = 'xadd' ;
asm_opcode = 'xchg' ;
asm_opcode = 'xor' ;
asm_directive = 'DB' ;
asm_directive = 'DW' ;
asm_directive = 'DD' ;
asm_directive = 'DQ' ;
asm_directive_arg = charlit ;
asm_directive_arg = sign? anynumber ;
asm_directive_arg = asm_expr ;
asm_register = 'ST' '(' integernumber ')' ;
asm_register = 'ST' ;
asm_register = 'FS' ;
asm_register = 'GS' ;
asm_register = 'EAX' ;
asm_register = 'EBX' ;
asm_register = 'ECX' ;
asm_register = 'EDX' ;
asm_register = 'ESP' ;
asm_register = 'EBP' ;
asm_register = 'ESI' ;
asm_register = 'EDI' ;
asm_register = 'AX' ;
asm_register = 'BX' ;
asm_register = 'CX' ;
asm_register = 'DX' ;
asm_register = 'SP' ;
asm_register = 'BP' ;
asm_register = 'SI' ;
asm_register = 'DI' ;
asm_register = 'AL' ;
asm_register = 'BL' ;
asm_register = 'CL' ;
asm_register = 'DL' ;
asm_register = 'CS' ;
asm_register = 'DS' ;
asm_register = 'SS' ;
asm_register = 'ES' ;
asm_register = 'AH' ;
asm_register = 'BH' ;
asm_register = 'CH' ;
asm_register = 'DH' ;
asm_register = 'CS' segmt_overr? ;
asm_register = 'DS' segmt_overr? ;
asm_register = 'SS' segmt_overr? ;
asm_register = 'FS' segmt_overr? ;
asm_register = 'GS' segmt_overr? ;
asm_register = 'ES' segmt_overr? ;
segmt_overr = SPOFF ':' asm_expr SPON ;
asm_prefixop = 'high' ;
asm_prefixop = 'low' ;
asm_prefixop = 'offset' ;
asm_prefixop = 'dmtindex' ;
asm_prefixop = 'vmtoffset' ;
asm_prefixop = 'type' ;
asm_prefixop = 'not' ;
asm_prefixop = '&' ;
asm_prefixop = sign ;
asm_prefixop = '@' ;
asm_infixop = '.' ;
asm_infixop = '+' ;
asm_infixop = '-' ;
asm_infixop = '*' ;
asm_infixop = '/' ;
asm_infixop = 'ptr' ;
asm_infixop = 'mod' ;
asm_infixop = 'xor' ;
asm_infixop = 'and' ;
asm_infixop = 'or' ;
asm_infixop = 'shr' ;
asm_infixop = 'shl' ;
asm_postfixop = '[' asm_expr ']' ;
asm_postfixop = '.' asm_expr ;
procedure_body = asm_stmtblock ;
unlabeled_stm = asm_stmtblock ;
