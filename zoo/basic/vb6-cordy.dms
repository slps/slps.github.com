program = class_file_header? declaration_or_statement* ;
class_file_header = 'version' number 'class' eol+ class_begin_block ;
class_begin_block = 'begin' reference? IN class_begin_item* EX 'end' ;
class_begin_item = assignment_statement ;
class_begin_item = class_begin_block ;
class_begin_item = eol ;
declaration_or_statement = declaration eol ;
declaration_or_statement = statement eol ;
declaration_or_statement = eol ;
single_declaration_or_statement = declaration colon_declaration_or_statement* ;
single_declaration_or_statement = statement colon_declaration_or_statement* ;
colon_declaration_or_statement = ':' declaration_or_statement? ;
declaration = variable_declaration ;
declaration = implements_declaration ;
declaration = subprogram_declaration ;
declaration = constant_declaration ;
declaration = class_declaration ;
declaration = declare_subprogram_declaration ;
declaration = defletter_declaration ;
declaration = enum_declaration ;
declaration = type_declaration ;
implements_declaration = 'implements' id ;
enum_declaration = access_modifier? 'enum' id eol IN enum_member_definition* EX 'end' 'enum' ;
enum_member_definition = id '=' expn eol ;
enum_member_definition = eol ;
type_declaration = access_modifier? 'type' id eol IN type_member_definition* EX 'end' 'type' ;
type_member_definition = id parens? as_type? eol ;
type_member_definition = eol ;
defletter_declaration = def_keyword letterrange+ ;
letterrange = id SPOFF '-' id SPON ;
def_keyword = 'defbool' ;
def_keyword = 'defbyte' ;
def_keyword = 'defcur' ;
def_keyword = 'defdate' ;
def_keyword = 'defdbl' ;
def_keyword = 'defdec' ;
def_keyword = 'defint' ;
def_keyword = 'deflng' ;
def_keyword = 'defobj' ;
def_keyword = 'defsng' ;
def_keyword = 'defstr' ;
def_keyword = 'defvar' ;
variable_declaration = variable_declaration_keyword variable_description+ ;
variable_declaration_keyword = 'dim' ;
variable_declaration_keyword = 'redim' ;
variable_declaration_keyword = access_modifier ;
access_modifier = 'public' ;
access_modifier = 'private' ;
access_modifier = 'friend' ;
access_modifier = 'static' ;
variable_description = array_description ;
variable_description = single_var_description ;
single_var_description = id initial_value? as_type? ;
initial_value = '=' expn ;
array_description = 'withevents'? 'preserve'? id '(' subscript_expn',' ')' as_type? ;
subscript_expn = expn to_expn? ;
constant_declaration = access_modifier? 'const' constant_description ;
constant_description = id as_type? initial_value ;
declare_subprogram_declaration = access_modifier? 'declare' sub_or_function id lib_description alias_description? subprogram_argument_description? as_type? ;
subprogram_declaration = access_modifier? 'static'? sub_or_function id lib_description? subprogram_argument_description? as_type? eol IN sub_scope EX 'end' sub_or_function ;
lib_description = 'lib' stringlit ;
alias_description = 'alias' stringlit ;
sub_scope = declaration_or_statement* ;
sub_or_function = 'sub' ;
sub_or_function = 'function' ;
subprogram_argument_description = '(' subprogram_argument',' ')' ;
subprogram_argument = 'optional'? byref_or_byval? id? parens? as_type? equals_expn? ;
as_type = 'as' 'new'? reference star_size? ;
star_size = '*' expn ;
byref_or_byval = 'byref' ;
byref_or_byval = 'byval' ;
class_declaration = 'class' id eol IN sub_scope EX 'end' 'class' ;
expn = primary operator_primary* ;
operator_primary = op primary ;
op = '^' ;
op = '*' ;
op = '/' ;
op = '\' ;
op = 'mod' ;
op = '+' ;
op = '-' ;
op = '&' ;
op = '=' ;
op = '<>' ;
op = '<=' ;
op = '>=' ;
op = ':=' ;
op = '>' ;
op = '<' ;
op = '!' ;
op = 'is' ;
op = 'not' ;
op = 'and' ;
op = 'or' ;
op = 'xor' ;
op = 'eqv' ;
op = 'imp' ;
op = 'like' ;
primary = reference ;
primary = stringlit ;
primary = number ;
primary = hexnumber ;
primary = octnumber ;
primary = datelit ;
primary = returncode ;
primary = filenumber ;
primary = prefix_op primary ;
primary = '(' expn',' ')' ;
prefix_op = '+' ;
prefix_op = '-' ;
prefix_op = 'not' ;
prefix_op = 'typeof' ;
prefix_op = 'addressof' ;
reference = '.'? '!'? id component_selector* ;
reference = '.' key component_selector* ;
filenumber = '#' primary ;
component_selector = '.' id ;
component_selector = '.' key ;
component_selector = subscript ;
subscript = '(' optional_subscript',' ')' ;
optional_subscript = expn to_expn? ;
optional_subscript = SP  ;
statement = label_statement ;
statement = assignment_statement ;
statement = app_activate_statement ;
statement = attribute_statement ;
statement = beep_statement ;
statement = call_statement ;
statement = chdir_statement ;
statement = chdrive_statement ;
statement = close_statement ;
statement = date_statement ;
statement = deletesetting_statement ;
statement = do_statement ;
statement = end_statement ;
statement = erase_statement ;
statement = error_statement ;
statement = event_statement ;
statement = exit_statement ;
statement = filecopy_statement ;
statement = for_each_statement ;
statement = for_next_statement ;
statement = get_statement ;
statement = gosub_statement ;
statement = return_statement ;
statement = goto_statement ;
statement = if_statement ;
statement = input_statement ;
statement = kill_statement ;
statement = line_input_statement ;
statement = load_statement ;
statement = lock_statement ;
statement = lset_statement ;
statement = mid_statement ;
statement = mkdir_statement ;
statement = name_statement ;
statement = on_error_statement ;
statement = open_statement ;
statement = option_statement ;
statement = preprocessor_if_statement ;
statement = print_statement ;
statement = property_statement ;
statement = put_statement ;
statement = randomize_statement ;
statement = reset_statement ;
statement = resume_statement ;
statement = rmdir_statement ;
statement = rset_statement ;
statement = savepicture_statement ;
statement = savesetting_statement ;
statement = select_case_statement ;
statement = set_statement ;
statement = stop_statement ;
statement = time_statement ;
statement = unload_statement ;
statement = unlock_statement ;
statement = while_statement ;
statement = with_statement ;
statement = width_statement ;
statement = write_statement ;
assignment_statement = 'let'? reference '=' expn ;
app_activate_statement = 'appactivate' expn comma_expn? ;
comma_expn = ',' expn ;
beep_statement = 'beep' ;
chdir_statement = 'chdir' filepath ;
mkdir_statement = 'mkdir' filepath ;
rmdir_statement = 'rmdir' filepath ;
mid_statement = 'mid' reference '=' stringlit ;
name_statement = 'name' filepath 'as' filepath ;
filepath = drive? id slash_id* ;
filepath = stringlit ;
slash_id = '\' id ;
slash_id = '/' id ;
chdrive_statement = 'chdrive' drive ;
drive = id ':' ;
open_statement = 'open' filepath 'for' mode access_spec? lock? 'as' filenumber length_spec? ;
mode = 'append' ;
mode = 'binary' ;
mode = 'input' ;
mode = 'output' ;
mode = 'random' ;
access_spec = 'access' access_mode ;
access_mode = 'read' ;
access_mode = 'write' ;
access_mode = 'read' 'write' ;
lock = 'shared' ;
lock = 'lock' 'read' ;
lock = 'lock' 'write' ;
lock = 'lock' 'read' 'write' ;
length_spec = 'len' '=' expn ;
close_statement = 'close' filenumber',' ;
seek_statement = 'seek' filenumber ',' expn ;
unlock_statement = 'unlock' filenumber comma_recordrange? ;
get_statement = 'get' filenumber comma_recordnumber? ',' reference ;
comma_recordnumber = ',' expn ;
input_statement = 'input' filenumber ',' reference',' ;
line_input_statement = 'line' 'input' filenumber ',' reference ;
width_statement = 'width' filenumber ',' expn ;
write_statement = 'write' filenumber ',' print_item',' ;
print_statement = 'print' filenumber ',' print_item',' ;
print_item = spc_tab? expn charpos? ;
print_item = spc_tab ;
spc_tab = 'spc' '(' expn? ')' ;
spc_tab = 'tab' '(' expn? ')' ;
charpos = expn ;
charpos = ';' ;
put_statement = 'put' filenumber comma_expn? ',' reference ;
kill_statement = 'kill' filepath ;
lock_statement = 'lock' filenumber comma_recordrange? ;
comma_recordrange = ',' number to_number? ;
to_number = 'to' number ;
load_statement = 'load' expn ;
lset_statement = 'lset' reference '=' expn ;
rset_statement = 'rset' reference '=' expn ;
date_statement = 'date' '=' expn ;
time_statement = 'time' '=' expn ;
deletesetting_statement = 'deletesetting' expn+ ;
end_statement = 'end' ;
erase_statement = 'erase' id',' ;
error_statement = 'error' expn ;
event_statement = 'public'? 'event' id event_argument_list? ;
event_argument_list = '(' event_argument+ ')' ;
event_argument = byref_or_byval? id parens? as_type? ;
parens = '(' ')' ;
filecopy_statement = 'filecopy' filepath ',' filepath ;
gosub_statement = on_expn? 'gosub' expn ;
return_statement = 'return' ;
goto_statement = on_expn? 'goto' expn ;
on_expn = 'on' expn ;
option_statement = 'option' 'base' number ;
option_statement = 'option' 'compare' compare_mode ;
option_statement = 'option' 'explicit' ;
option_statement = 'option' 'private' 'module' ;
compare_mode = 'binary' ;
compare_mode = 'text' ;
compare_mode = 'database' ;
attribute_statement = 'attribute' attribute_definition+ ;
attribute_definition = reference '=' expn+ ;
if_statement = full_if_statement ;
if_statement = short_if_statement ;
full_if_statement = 'if' expn 'then' eol IN sub_scope EX elsif_clause* else_clause? 'end' 'if' ;
elsif_clause = 'elseif' expn 'then' eol IN sub_scope EX ;
else_clause = 'else' eol IN sub_scope EX ;
short_if_statement = 'if' expn 'then' single_declaration_or_statement short_else_clause? ;
short_else_clause = 'else' single_declaration_or_statement ;
select_case_statement = 'select' 'case' expn eol IN case_alternative* last_case_alternative? EX 'end' 'select' ;
eol = tab_vbcomment? newline ;
eol = ':' ;
tab_vbcomment = TAB vbcomment ;
case_alternative = eol* 'case' is_operator? case_expn+ eol IN sub_scope EX ;
is_operator = 'is' op? ;
case_expn = expn to_expn? ;
to_expn = 'to' expn ;
last_case_alternative = eol* 'case' 'else' eol IN sub_scope EX ;
for_next_statement = full_for_next_statement ;
for_next_statement = short_for_next_statement ;
short_for_next_statement = 'for' id '=' expn to_or_downto expn step_clause? colon_declaration_or_statement* ':' 'next' id? ;
full_for_next_statement = 'for' id '=' expn to_or_downto expn step_clause? eol IN sub_scope EX 'next' id? ;
to_or_downto = 'to' ;
to_or_downto = 'downto' ;
step_clause = 'step' expn ;
for_each_statement = full_for_each_statement ;
for_each_statement = short_for_each_statement ;
short_for_each_statement = 'for' 'each' id 'in' expn eol colon_declaration_or_statement* ':' 'next' id? ;
full_for_each_statement = 'for' 'each' id 'in' expn eol IN sub_scope EX 'next' id? ;
do_statement = 'do' while_or_until_clause? eol IN sub_scope EX 'loop' while_or_until_clause? ;
while_or_until_clause = while_clause ;
while_or_until_clause = until_clause ;
while_clause = 'while' expn ;
until_clause = 'until' expn ;
while_statement = 'while' expn eol IN sub_scope EX 'wend' ;
call_statement = 'call'? reference subroutine_bracketless_params? ;
subroutine_bracketless_params = expn optional_expn',' ;
optional_expn = expn ;
optional_expn =  SP ;
set_statement = 'set' reference '=' set_object_expn ;
set_object_expn = 'new'? expn ;
set_object_expn = 'nothing' ;
setattr_statement = 'setattr' filepath ',' expn ;
exit_statement = 'exit' exit_what_indicator ;
exit_what_indicator = 'do' ;
exit_what_indicator = 'for' ;
exit_what_indicator = 'function' ;
exit_what_indicator = 'property' ;
exit_what_indicator = 'sub' ;
on_error_statement = 'on' 'local'? 'error' on_error_action ;
on_error_action = 'resume' 'next' ;
on_error_action = 'goto' expn ;
with_statement = 'with' reference eol IN sub_scope EX 'end' 'with' ;
property_statement = access_modifier? 'static'? 'property' get_let_set id property_argument_list? as_type? eol IN sub_scope EX 'end' 'property' ;
get_let_set = 'get' ;
get_let_set = 'let' ;
get_let_set = 'set' ;
property_argument_list = '(' property_argument',' ')' ;
property_argument = 'optional'? byref_or_byval? 'paramarray'? id parens? as_type? equals_expn? ;
equals_expn = '=' expn ;
randomize_statement = 'randomize' number? ;
reset_statement = 'reset' ;
resume_statement = 'resume' 'next' ;
resume_statement = 'resume' number? ;
savepicture_statement = 'savepicture' expn ',' expn ;
savesetting_statement = 'savesetting' expn',' ;
stop_statement = 'stop' ;
unload_statement = 'unload' expn ;
label_statement = EX id ':' IN ;
preprocessor_if_statement = '#if' expn 'then' eol IN sub_scope EX preprocessor_elsif_clause* preprocessor_else_clause? '#end' 'if' ;
preprocessor_elsif_clause = '#elseif' expn 'then' eol IN sub_scope EX ;
preprocessor_else_clause = '#else' eol IN sub_scope EX ;
