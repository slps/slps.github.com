Compilation:
        "UNSAFE"? (Interface | Module | GenInf | GenMod)
Interface:
        "INTERFACE" Id ";" Import* Decl* "END" Id "."
        "INTERFACE" Id "=" Id GenActls "END" Id "."
Id:
        "NOT"
        "ROOT"
Import:
        AsImport
        FromImport
AsImport:
        "IMPORT" ImportItem ("," ImportItem)* ";"
ImportItem:
        Id
        Id "AS" Id
FromImport:
        "FROM" Id "IMPORT" IdList ";"
IdList:
        Id ("," Id)*
Decl:
        "CONST" (ConstDecl ";")*
        "TYPE" (TypeDecl ";")*
        "EXCEPTION" (ExceptionDecl ";")*
        "VAR" (VariableDecl ";")*
        ProcedureHead ("=" Block Id)? ";"
        "REVEAL" (QualId ("=" | "<:") Type ";")*
ConstDecl:
        Id (":" Type)? "=" Expr
Type:
        TypeLiteral
        QualId
TypeLiteral:
        ArrayType
        PackedType
        EnumType
        ObjectType
        ProcedureType
        RecordType
        RefType
        SetType
        SubrangeType
        "(" Type ")"
        TypeName
ArrayType:
        "ARRAY" (Type ("," Type)*)? "OF" Type
PackedType:
        "BITS" Expr "FOR" Type
Expr:
        Expr "OR" Expr
        Expr "AND" Expr
        "NOT" Expr
        Expr Relop Expr
        Expr Addop Expr
        Expr Mulop Expr
        "+" Expr
        "-" Expr
        Expr Selector
        Id
        Literal
        Constructor
        "(" Expr ")"
Relop:
        "="
        "#"
        "<"
        "<="
        ">"
        ">="
        "IN"
Addop:
        "+"
        "-"
        "&"
Mulop:
        "*"
        "/"
        "DIV"
        "MOD"
Selector:
        "^"
        "." Id
        "[" Expr ("," Expr)* "]"
        "(" (Actual ("," Actual)*)? ")"
Actual:
        TypeLiteral
        (Id ":=")? Expr
Constructor:
        Type "{" AnyCons? "}"
AnyCons:
        Elt ("," Elt)* ("," "..")?
Elt:
        Expr ".." Expr
        Expr
        Id ":=" Expr
EnumType:
        "{" IdList? "}"
ObjectType:
        Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? ("OVERRIDES" Overrides)? "END"
Ancestor:
        TypeName
        ObjectType
        QualId
TypeName:
        "ROOT"
        "UNTRACED" "ROOT"
QualId:
        Id ("." Id)?
Brand:
        "BRANDED" TextLiteral?
Fields:
        (Field (";" Field)* ";"?)?
Field:
        IdList ":" Type ":=" Expr
        IdList ":" Type
        IdList ":=" Expr
Methods:
        (Method (";" Method)* ";"?)?
Method:
        Id Signature (":=" Expr)?
Signature:
        "(" Formals ")" (":" Type)? ("RAISES" Raises)?
Formals:
        (Formal (";" Formal)* ";"?)?
Formal:
        Mode? IdList ":" Type ":=" Expr
        Mode? IdList ":" Type
        Mode? IdList ":=" Expr
Mode:
        "VALUE"
        "VAR"
        "READONLY"
Raises:
        "{" (QualId ("," QualId)*)? "}"
        "ANY"
Overrides:
        (Override (";" Override)* ";"?)?
Override:
        Id ":=" Expr
ProcedureType:
        "PROCEDURE" Signature
RecordType:
        "RECORD" Fields "END"
RefType:
        "UNTRACED"? Brand? "REF" Type
SetType:
        "SET" "OF" Type
SubrangeType:
        "[" Expr ".." Expr "]"
TypeDecl:
        Id ("=" | "<:") Type
ExceptionDecl:
        Id ("(" Type ")")?
VariableDecl:
        IdList ":" Type ":=" Expr
        IdList ":" Type
        IdList ":=" Expr
ProcedureHead:
        "PROCEDURE" Id Signature
Block:
        Decl* "BEGIN" Stmts "END"
Stmts:
        (Stmt (";" Stmt)* ";"?)?
Stmt:
        AssignStmt
        Block
        CallStmt
        CaseStmt
        ExitStmt
        EvalStmt
        ForStmt
        IfStmt
        LockStmt
        LoopStmt
        RaiseStmt
        RepeatStmt
        ReturnStmt
        TryFinStmt
        TryXptStmt
        TCaseStmt
        WhileStmt
        WithStmt
AssignStmt:
        Expr ":=" Expr
CallStmt:
        Expr "(" (Actual ("," Actual)*)? ")"
CaseStmt:
        "CASE" Expr "OF" "|"? Case ("|" Case)* ("ELSE" Stmts)? "END"
Case:
        Label ("," Label)* "=>" Stmts
Label:
        Expr (".." Expr)?
ExitStmt:
        "EXIT"
EvalStmt:
        "EVAL" Expr
ForStmt:
        "FOR" Id ":=" Expr "TO" Expr ("BY" Expr)? "DO" Stmts "END"
IfStmt:
        "IF" Expr "THEN" Stmts ("ELSIF" Expr "THEN" Stmts)* ("ELSE" Stmts)? "END"
LockStmt:
        "LOCK" Expr "DO" Stmts "END"
LoopStmt:
        "LOOP" Stmts "END"
RaiseStmt:
        "RAISE" QualId ("(" Expr ")")?
RepeatStmt:
        "REPEAT" Stmts "UNTIL" Expr
ReturnStmt:
        "RETURN" Expr?
TryFinStmt:
        "TRY" Stmts "FINALLY" Stmts "END"
TryXptStmt:
        "TRY" Stmts "EXCEPT" "|"? Handler ("|" Handler)* ("ELSE" Stmts)? "END"
Handler:
        QualId ("," QualId)* ("(" Id ")")? "=>" Stmts
TCaseStmt:
        "TYPECASE" Expr "OF" "|"? TCase ("|" TCase)* ("ELSE" Stmts)? "END"
TCase:
        Type ("," Type)* ("(" Id ")")? "=>" Stmts
WhileStmt:
        "WHILE" Expr "DO" Stmts "END"
WithStmt:
        "WITH" Binding ("," Binding)* "DO" Stmts "END"
Binding:
        Id "=" Expr
GenActls:
        "(" IdList? ")"
Module:
        "MODULE" Id ("EXPORTS" IdList)? ";" Import* Block Id "."
        "MODULE" Id ("EXPORTS" IdList)? "=" Id GenActls "END" Id "."
GenInf:
        "GENERIC" "INTERFACE" Id GenFmls ";" Import* Decl* "END" Id "."
GenFmls:
        "(" IdList? ")"
GenMod:
        "GENERIC" "MODULE" Id GenFmls ";" Import* Block Id "."
