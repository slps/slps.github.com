module Main

exports
  sorts
        Translation-unit External-declaration Function-definition Declaration-specifiers Storage-class-specifier Type-specifier Struct-or-union-specifier Struct-or-union Struct-declaration-list Struct-declaration Specifier-qualifier-list Type-qualifier Struct-declarator-list Struct-declarator Declarator Pointer Type-qualifier-list Direct-declarator Assignment-expression Conditional-expression Logical-OR-expression Logical-AND-expression Inclusive-OR-expression Exclusive-OR-expression AND-expression Equality-expression Relational-expression Shift-expression Additive-expression Multiplicative-expression Cast-expression Unary-expression Postfix-expression Primary-expression Expression Argument-expression-list Type-name Abstract-declarator Direct-abstract-declarator Parameter-type-list Parameter-list Parameter-declaration Initializer-list Designation Designator-list Designator Constant-expression Initializer Unary-operator Assignment-operator Identifier-list Enum-specifier Enumerator-list Enumerator Typedef-name Function-specifier Declaration-list Declaration Init-declarator-list Init-declarator Compound-statement Block-item-list Block-item Statement Labeled-statement Expression-statement Selection-statement Iteration-statement Jump-statement 
  context-free syntax
        External-declaration -> Translation-unit
        Translation-unit External-declaration -> Translation-unit

        Function-definition -> External-declaration
        Declaration -> External-declaration

        Declaration-specifiers Declarator Declaration-list? Compound-statement -> Function-definition

        Storage-class-specifier Declaration-specifiers? -> Declaration-specifiers
        Type-specifier Declaration-specifiers? -> Declaration-specifiers
        Type-qualifier Declaration-specifiers? -> Declaration-specifiers
        Function-specifier Declaration-specifiers? -> Declaration-specifiers

        "typedef" -> Storage-class-specifier
        "extern" -> Storage-class-specifier
        "static" -> Storage-class-specifier
        "auto" -> Storage-class-specifier
        "register" -> Storage-class-specifier

        "void" -> Type-specifier
        "char" -> Type-specifier
        "short" -> Type-specifier
        "int" -> Type-specifier
        "long" -> Type-specifier
        "float" -> Type-specifier
        "double" -> Type-specifier
        "signed" -> Type-specifier
        "unsigned" -> Type-specifier
        "_Bool" -> Type-specifier
        "_Complex" -> Type-specifier
        Struct-or-union-specifier -> Type-specifier
        Enum-specifier -> Type-specifier
        Typedef-name -> Type-specifier

        Struct-or-union Identifier? "{" Struct-declaration-list "}" -> Struct-or-union-specifier
        Struct-or-union Identifier -> Struct-or-union-specifier

        "struct" -> Struct-or-union
        "union" -> Struct-or-union

        Struct-declaration -> Struct-declaration-list
        Struct-declaration-list Struct-declaration -> Struct-declaration-list

        Specifier-qualifier-list Struct-declarator-list ";" -> Struct-declaration

        Type-specifier Specifier-qualifier-list? -> Specifier-qualifier-list
        Type-qualifier Specifier-qualifier-list? -> Specifier-qualifier-list

        "const" -> Type-qualifier
        "restrict" -> Type-qualifier
        "volatile" -> Type-qualifier

        Struct-declarator -> Struct-declarator-list
        Struct-declarator-list "," Struct-declarator -> Struct-declarator-list

        Declarator -> Struct-declarator
        Declarator? ":" Constant-expression -> Struct-declarator

        Pointer? Direct-declarator -> Declarator

        "*" Type-qualifier-list? -> Pointer
        "*" Type-qualifier-list? Pointer -> Pointer

        Type-qualifier -> Type-qualifier-list
        Type-qualifier-list Type-qualifier -> Type-qualifier-list

        Identifier -> Direct-declarator
        "(" Declarator ")" -> Direct-declarator
        Direct-declarator "[" Type-qualifier-list? Assignment-expression? "]" -> Direct-declarator
        Direct-declarator "[" "static" Type-qualifier-list? Assignment-expression "]" -> Direct-declarator
        Direct-declarator "[" Type-qualifier-list "static" Assignment-expression "]" -> Direct-declarator
        Direct-declarator "[" Type-qualifier-list? "*" "]" -> Direct-declarator
        Direct-declarator "(" Parameter-type-list ")" -> Direct-declarator
        Direct-declarator "(" Identifier-list? ")" -> Direct-declarator

        Conditional-expression -> Assignment-expression
        Unary-expression Assignment-operator Assignment-expression -> Assignment-expression

        Logical-OR-expression -> Conditional-expression
        Logical-OR-expression "?" Expression ":" Conditional-expression -> Conditional-expression

        Logical-AND-expression -> Logical-OR-expression
        Logical-OR-expression "||" Logical-AND-expression -> Logical-OR-expression

        Inclusive-OR-expression -> Logical-AND-expression
        Logical-AND-expression "&&" Inclusive-OR-expression -> Logical-AND-expression

        Exclusive-OR-expression -> Inclusive-OR-expression
        Inclusive-OR-expression "|" Exclusive-OR-expression -> Inclusive-OR-expression

        AND-expression -> Exclusive-OR-expression
        Exclusive-OR-expression "^" AND-expression -> Exclusive-OR-expression

        Equality-expression -> AND-expression
        AND-expression "&" Equality-expression -> AND-expression

        Relational-expression -> Equality-expression
        Equality-expression "==" Relational-expression -> Equality-expression
        Equality-expression "!=" Relational-expression -> Equality-expression

        Shift-expression -> Relational-expression
        Relational-expression "<" Shift-expression -> Relational-expression
        Relational-expression ">" Shift-expression -> Relational-expression
        Relational-expression "<=" Shift-expression -> Relational-expression
        Relational-expression ">=" Shift-expression -> Relational-expression

        Additive-expression -> Shift-expression
        Shift-expression "<<" Additive-expression -> Shift-expression
        Shift-expression ">>" Additive-expression -> Shift-expression

        Multiplicative-expression -> Additive-expression
        Additive-expression "+" Multiplicative-expression -> Additive-expression
        Additive-expression "-" Multiplicative-expression -> Additive-expression

        Cast-expression -> Multiplicative-expression
        Multiplicative-expression "*" Cast-expression -> Multiplicative-expression
        Multiplicative-expression "/" Cast-expression -> Multiplicative-expression
        Multiplicative-expression "%" Cast-expression -> Multiplicative-expression

        Unary-expression -> Cast-expression
        "(" Type-name ")" Cast-expression -> Cast-expression

        Postfix-expression -> Unary-expression
        "++" Unary-expression -> Unary-expression
        "--" Unary-expression -> Unary-expression
        Unary-operator Cast-expression -> Unary-expression
        "sizeof" Unary-expression -> Unary-expression
        "sizeof" "(" Type-name ")" -> Unary-expression

        Primary-expression -> Postfix-expression
        Postfix-expression "[" Expression "]" -> Postfix-expression
        Postfix-expression "(" Argument-expression-list? ")" -> Postfix-expression
        Postfix-expression "." Identifier -> Postfix-expression
        Postfix-expression "->" Identifier -> Postfix-expression
        Postfix-expression "++" -> Postfix-expression
        Postfix-expression "--" -> Postfix-expression
        "(" Type-name ")" "{" Initializer-list "}" -> Postfix-expression
        "(" Type-name ")" "{" Initializer-list "," "}" -> Postfix-expression

        Identifier -> Primary-expression
        Constant -> Primary-expression
        String-literal -> Primary-expression
        "(" Expression ")" -> Primary-expression

        Assignment-expression -> Expression
        Expression "," Assignment-expression -> Expression

        Assignment-expression -> Argument-expression-list
        Argument-expression-list "," Assignment-expression -> Argument-expression-list

        Specifier-qualifier-list Abstract-declarator? -> Type-name

        Pointer -> Abstract-declarator
        Pointer? Direct-abstract-declarator -> Abstract-declarator

        "(" Abstract-declarator ")" -> Direct-abstract-declarator
        Direct-abstract-declarator? "[" Assignment-expression? "]" -> Direct-abstract-declarator
        Direct-abstract-declarator? "[" "*" "]" -> Direct-abstract-declarator
        Direct-abstract-declarator? "(" Parameter-type-list? ")" -> Direct-abstract-declarator

        Parameter-list -> Parameter-type-list
        Parameter-list "," "..." -> Parameter-type-list

        Parameter-declaration -> Parameter-list
        Parameter-list "," Parameter-declaration -> Parameter-list

        Declaration-specifiers Declarator -> Parameter-declaration
        Declaration-specifiers Abstract-declarator? -> Parameter-declaration

        Designation? Initializer -> Initializer-list
        Initializer-list "," Designation? Initializer -> Initializer-list

        Designator-list "=" -> Designation

        Designator -> Designator-list
        Designator-list Designator -> Designator-list

        "[" Constant-expression "]" -> Designator
        "." Identifier -> Designator

        Conditional-expression -> Constant-expression

        Assignment-expression -> Initializer
        "{" Initializer-list "}" -> Initializer
        "{" Initializer-list "," "}" -> Initializer

        "&" -> Unary-operator
        "*" -> Unary-operator
        "+" -> Unary-operator
        "-" -> Unary-operator
        "~" -> Unary-operator
        "!" -> Unary-operator

        "=" -> Assignment-operator
        "*=" -> Assignment-operator
        "/=" -> Assignment-operator
        "%=" -> Assignment-operator
        "+=" -> Assignment-operator
        "-=" -> Assignment-operator
        "<<=" -> Assignment-operator
        ">>=" -> Assignment-operator
        "&=" -> Assignment-operator
        "^=" -> Assignment-operator
        "|=" -> Assignment-operator

        Identifier -> Identifier-list
        Identifier-list "," Identifier -> Identifier-list

        "enum" Identifier? "{" Enumerator-list "}" -> Enum-specifier
        "enum" Identifier? "{" Enumerator-list "," "}" -> Enum-specifier
        "enum" Identifier -> Enum-specifier

        Enumerator -> Enumerator-list
        Enumerator-list "," Enumerator -> Enumerator-list

        Enumeration-constant -> Enumerator
        Enumeration-constant "=" Constant-expression -> Enumerator

        Identifier -> Typedef-name

        "inline" -> Function-specifier

        Declaration -> Declaration-list
        Declaration-list Declaration -> Declaration-list

        Declaration-specifiers Init-declarator-list? ";" -> Declaration

        Init-declarator -> Init-declarator-list
        Init-declarator-list "," Init-declarator -> Init-declarator-list

        Declarator -> Init-declarator
        Declarator "=" Initializer -> Init-declarator

        "{" Block-item-list? "}" -> Compound-statement

        Block-item -> Block-item-list
        Block-item-list Block-item -> Block-item-list

        Declaration -> Block-item
        Statement -> Block-item

        Labeled-statement -> Statement
        Compound-statement -> Statement
        Expression-statement -> Statement
        Selection-statement -> Statement
        Iteration-statement -> Statement
        Jump-statement -> Statement

        Identifier ":" Statement -> Labeled-statement
        "case" Constant-expression ":" Statement -> Labeled-statement
        "default" ":" Statement -> Labeled-statement

        Expression? ";" -> Expression-statement

        "if" "(" Expression ")" Statement -> Selection-statement
        "if" "(" Expression ")" Statement "else" Statement -> Selection-statement
        "switch" "(" Expression ")" Statement -> Selection-statement

        "while" "(" Expression ")" Statement -> Iteration-statement
        "do" Statement "while" "(" Expression ")" ";" -> Iteration-statement
        "for" "(" Expression? ";" Expression? ";" Expression? ")" Statement -> Iteration-statement
        "for" "(" Declaration Expression? ";" Expression? ")" Statement -> Iteration-statement

        "goto" Identifier ";" -> Jump-statement
        "continue" ";" -> Jump-statement
        "break" ";" -> Jump-statement
        "return" Expression? ";" -> Jump-statement
