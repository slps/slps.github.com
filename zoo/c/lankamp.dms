StructDeclarator = Declarator ;
StructDeclarator = Declarator? ':' Expression ;
PrototypeParameter = Specifier* AbstractDeclarator ;
TypeSpecifier = 'struct' Identifier '{' StructDeclaration* '}' ;
TypeSpecifier = 'union' Identifier ;
TypeSpecifier = 'int' ;
TypeSpecifier = 'void' ;
TypeSpecifier = 'struct' '{' StructDeclaration* '}' ;
TypeSpecifier = 'short' ;
TypeSpecifier = Identifier ;
TypeSpecifier = 'enum' Identifier '{' Enumerator',' '}' ;
TypeSpecifier = 'signed' ;
TypeSpecifier = 'union' Identifier '{' StructDeclaration* '}' ;
TypeSpecifier = 'union' '{' StructDeclaration* '}' ;
TypeSpecifier = 'enum' Identifier ;
TypeSpecifier = 'struct' Identifier ;
TypeSpecifier = 'unsigned' ;
TypeSpecifier = 'long' ;
TypeSpecifier = 'double' ;
TypeSpecifier = 'float' ;
TypeSpecifier = 'enum' '{' Enumerator',' '}' ;
TypeSpecifier = 'char' ;
StructDeclaration = specs::(Specifier+) ';' ;
StructDeclaration = specs::(Specifier+) StructDeclarator',' ';' ;
TypeName = Specifier+ AbstractDeclarator ;
Initializer = '{' Initializer',' ','? '}' ;
Initializer = NonCommaExpression ;
InitDeclarator = decl::Declarator '=' Initializer ;
InitDeclarator = Declarator ;
Statement = 'default' ':' Statement ;
Statement = 'switch' '(' Expression ')' Statement ;
Statement = 'return' ';' ;
Statement = 'for' '(' Expression? ';' Expression? ';' Expression? ')' Statement ;
Statement = 'case' Expression ':' Statement ;
Statement = 'continue' ';' ;
Statement = ';' ;
Statement = 'goto' Identifier ';' ;
Statement = 'do' Statement 'while' '(' Expression ')' ';' ;
Statement = '{' Declaration* Statement* '}' ;
Statement = 'while' '(' Expression ')' Statement ;
Statement = 'break' ';' ;
Statement = 'if' '(' Expression ')' Statement ;
Statement = Identifier ':' Statement ;
Statement = Expression ';' ;
Statement = 'if' '(' Expression ')' Statement 'else' Statement ;
Statement = 'return' Expression ';' ;
ExternalDeclaration = FunctionPrototype ;
ExternalDeclaration = FunctionDefinition ;
ExternalDeclaration = GlobalDeclaration ;
PrototypeParameters = 'void' ;
PrototypeParameters = PrototypeParameter',' MoreParameters? ;
Parameters = Parameter',' MoreParameters? ;
Parameters = 'void' ;
FunctionPrototype = specs::(Specifier*) decl::PrototypeDeclarator ';' ;
Parameter = Specifier* Declarator ;
AnonymousIdentifier = ;
PrototypeDeclarator = decl::PrototypeDeclarator '(' params::(PrototypeParameters?) ')' ;
PrototypeDeclarator = Identifier ;
PrototypeDeclarator = '(' decl::AbstractDeclarator ')' ;
PrototypeDeclarator = decl::PrototypeDeclarator '[' exp::(Expression?) ']' ;
PrototypeDeclarator = '*' qualifiers::(TypeQualifier*) decl::PrototypeDeclarator ;
AbstractDeclarator = AnonymousIdentifier ;
AbstractDeclarator = decl::AbstractDeclarator '[' exp::(Expression?) ']' ;
AbstractDeclarator = '(' decl::AbstractDeclarator ')' ;
AbstractDeclarator = decl::AbstractDeclarator '(' params::(Parameters?) ')' ;
AbstractDeclarator = '*' qualifiers::(TypeQualifier*) decl::AbstractDeclarator ;
Declarator = decl::Declarator '[' exp::(Expression?) ']' ;
Declarator = Identifier ;
Declarator = decl::Declarator '(' params::(Parameters?) ')' ;
Declarator = '(' decl::Declarator ')' ;
Declarator = '*' qualifiers::(TypeQualifier*) decl::Declarator ;
Specifier = StorageClass ;
Specifier = TypeQualifier ;
Specifier = TypeSpecifier ;
StorageClass = 'register' ;
StorageClass = 'static' ;
StorageClass = 'extern' ;
StorageClass = 'auto' ;
StorageClass = 'typedef' ;
Declaration = specs::(Specifier+) ';' ;
Declaration = specs::(Specifier+) initDeclarators::InitDeclarator',' ';' ;
Enumerator = Identifier ;
Enumerator = Identifier '=' NonCommaExpression ;
NonCommaExpression = expr::Expression ;
FunctionDefinition = specs::(Specifier*) Declarator Declaration* '{' Declaration* Statement* '}' ;
GlobalDeclaration = specs::(Specifier+) ';' ;
GlobalDeclaration = specs::(Specifier*) initDeclarators::InitDeclarator',' ';' ;
TranslationUnit = ExternalDeclaration+ ;
TypeQualifier = 'const' ;
TypeQualifier = 'volatile' ;
MoreParameters = ',' '...' ;
Expression = CharacterConstant ;
Expression = Expression '--' ;
Expression = Identifier ;
Expression = Expression '[' Expression ']' ;
Expression = '(' Expression ')' ;
Expression = 'sizeof' '(' TypeName ')' ;
Expression = Expression '++' ;
Expression = FloatingPointConstant ;
Expression = Expression '.' Identifier ;
Expression = StringConstant ;
Expression = IntegerConstant ;
Expression = HexadecimalConstant ;
Expression = Expression '->' Identifier ;
Expression = Expression '(' NonCommaExpression',' ')' ;
Expression = Expression ;
Expression = 'sizeof' exp::Expression ;
Expression = '&' Expression ;
Expression = '!' Expression ;
Expression = '(' TypeName ')' Expression ;
Expression = '*' Expression ;
Expression = '+' Expression ;
Expression = '-' Expression ;
Expression = '~' Expression ;
Expression = lexp::Expression '*' rexp::Expression ;
Expression = Expression '/' Expression ;
Expression = Expression '%' Expression ;
Expression = Expression '+' Expression ;
Expression = Expression '-' Expression ;
Expression = Expression '>>' Expression ;
Expression = Expression '<<' Expression ;
Expression = Expression '<=' Expression ;
Expression = Expression '>=' Expression ;
Expression = Expression '>' Expression ;
Expression = Expression '<' Expression ;
Expression = Expression '==' Expression ;
Expression = Expression '!=' Expression ;
Expression = Expression '&' Expression ;
Expression = Expression '^' Expression ;
Expression = Expression '|' Expression ;
Expression = Expression '&&' Expression ;
Expression = Expression '||' Expression ;
Expression = Expression '?' Expression ':' Expression ;
Expression = Expression '|=' Expression ;
Expression = Expression '&=' Expression ;
Expression = Expression '*=' Expression ;
Expression = Expression '/=' Expression ;
Expression = Expression '+=' Expression ;
Expression = Expression '>>=' Expression ;
Expression = Expression '^=' Expression ;
Expression = Expression '-=' Expression ;
Expression = Expression '<<=' Expression ;
Expression = Expression '%=' Expression ;
Expression = Expression '=' Expression ;
Expression = Expression ',' Expression ;
