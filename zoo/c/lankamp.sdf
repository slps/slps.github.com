module Main

exports
  sorts
        StructDeclarator PrototypeParameter TypeSpecifier StructDeclaration TypeName Initializer InitDeclarator Statement ExternalDeclaration PrototypeParameters Parameters FunctionPrototype Parameter AnonymousIdentifier PrototypeDeclarator AbstractDeclarator Declarator Specifier StorageClass Declaration Enumerator NonCommaExpression FunctionDefinition GlobalDeclaration TranslationUnit TypeQualifier MoreParameters Expression 
  context-free syntax
        Declarator -> StructDeclarator

        Declarator? ":" Expression -> StructDeclarator

        Specifier* AbstractDeclarator -> PrototypeParameter

        StructDecl("struct" Identifier "{" StructDeclaration* "}") -> TypeSpecifier

        Union("union" Identifier) -> TypeSpecifier

        Int"int" -> TypeSpecifier

        Void"void" -> TypeSpecifier

        StructAnonDecl("struct" "{" StructDeclaration* "}") -> TypeSpecifier

        Short"short" -> TypeSpecifier

        IdentifierIdentifier -> TypeSpecifier

        EnumDecl("enum" Identifier "{" Enumerator"," "}") -> TypeSpecifier

        "signed" -> TypeSpecifier

        UnionDecl("union" Identifier "{" StructDeclaration* "}") -> TypeSpecifier

        UnionAnonDecl("union" "{" StructDeclaration* "}") -> TypeSpecifier

        Enum("enum" Identifier) -> TypeSpecifier

        Struct("struct" Identifier) -> TypeSpecifier

        "unsigned" -> TypeSpecifier

        Long"long" -> TypeSpecifier

        Double"double" -> TypeSpecifier

        Float"float" -> TypeSpecifier

        EnumAnonDecl("enum" "{" Enumerator"," "}") -> TypeSpecifier

        Char"char" -> TypeSpecifier

        StructDeclWithoutDecl(specs::(Specifier+) ";") -> StructDeclaration

        StructDeclWithDecl(specs::(Specifier+) StructDeclarator"," ";") -> StructDeclaration

        Specifier+ AbstractDeclarator -> TypeName

        "{" Initializer"," ","? "}" -> Initializer

        NonCommaExpression -> Initializer

        decl::Declarator "=" Initializer -> InitDeclarator

        declDeclarator -> InitDeclarator

        "default" ":" Statement -> Statement

        "switch" "(" Expression ")" Statement -> Statement

        "return" ";" -> Statement

        "for" "(" Expression? ";" Expression? ";" Expression? ")" Statement -> Statement

        "case" Expression ":" Statement -> Statement

        "continue" ";" -> Statement

        ";" -> Statement

        "goto" Identifier ";" -> Statement

        "do" Statement "while" "(" Expression ")" ";" -> Statement

        "{" Declaration* Statement* "}" -> Statement

        "while" "(" Expression ")" Statement -> Statement

        "break" ";" -> Statement

        "if" "(" Expression ")" Statement -> Statement

        Identifier ":" Statement -> Statement

        Expression ";" -> Statement

        "if" "(" Expression ")" Statement "else" Statement -> Statement

        "return" Expression ";" -> Statement

        FunctionPrototype -> ExternalDeclaration

        FunctionDefinition -> ExternalDeclaration

        GlobalDeclaration -> ExternalDeclaration

        "void" -> PrototypeParameters

        PrototypeParameter"," MoreParameters? -> PrototypeParameters

        Parameter"," MoreParameters? -> Parameters

        "void" -> Parameters

        DefaultFunctionPrototype(specs::(Specifier*) decl::PrototypeDeclarator ";") -> FunctionPrototype

        Specifier* Declarator -> Parameter

         -> AnonymousIdentifier

        FunctionDeclarator(decl::PrototypeDeclarator "(" params::(PrototypeParameters?) ")") -> PrototypeDeclarator

        IdentifierIdentifier -> PrototypeDeclarator

        Bracket("(" decl::AbstractDeclarator ")") -> PrototypeDeclarator

        ArrayDeclarator(decl::PrototypeDeclarator "[" exp::(Expression?) "]") -> PrototypeDeclarator

        PointerDeclarator("*" qualifiers::(TypeQualifier*) decl::PrototypeDeclarator) -> PrototypeDeclarator

        IdentifierAnonymousIdentifier -> AbstractDeclarator

        ArrayDeclarator(decl::AbstractDeclarator "[" exp::(Expression?) "]") -> AbstractDeclarator

        Bracket("(" decl::AbstractDeclarator ")") -> AbstractDeclarator

        FunctionDeclarator(decl::AbstractDeclarator "(" params::(Parameters?) ")") -> AbstractDeclarator

        PointerDeclarator("*" qualifiers::(TypeQualifier*) decl::AbstractDeclarator) -> AbstractDeclarator

        ArrayDeclarator(decl::Declarator "[" exp::(Expression?) "]") -> Declarator

        IdentifierIdentifier -> Declarator

        FunctionDeclarator(decl::Declarator "(" params::(Parameters?) ")") -> Declarator

        Bracket("(" decl::Declarator ")") -> Declarator

        PointerDeclarator("*" qualifiers::(TypeQualifier*) decl::Declarator) -> Declarator

        StorageClassStorageClass -> Specifier

        TypeQualifierTypeQualifier -> Specifier

        TypeSpecifierTypeSpecifier -> Specifier

        "register" -> StorageClass

        "static" -> StorageClass

        "extern" -> StorageClass

        "auto" -> StorageClass

        TypeDef"typedef" -> StorageClass

        DeclarationWithoutInitDecls(specs::(Specifier+) ";") -> Declaration

        DeclarationWithInitDecls(specs::(Specifier+) initDeclarators::InitDeclarator"," ";") -> Declaration

        Identifier -> Enumerator

        Identifier "=" NonCommaExpression -> Enumerator

        NonCommaExpressionexpr::Expression -> NonCommaExpression

        DefaultFunctionDefinition(specs::(Specifier*) Declarator Declaration* "{" Declaration* Statement* "}") -> FunctionDefinition

        GlobalDeclarationWithoutInitDecls(specs::(Specifier+) ";") -> GlobalDeclaration

        GlobalDeclarationWithInitDecls(specs::(Specifier*) initDeclarators::InitDeclarator"," ";") -> GlobalDeclaration

        ExternalDeclaration+ -> TranslationUnit

        "const" -> TypeQualifier

        "volatile" -> TypeQualifier

        "," "..." -> MoreParameters

        CharacterConstant -> Expression

        Expression "--" -> Expression

        VariableIdentifier -> Expression

        Expression "[" Expression "]" -> Expression

        Bracket("(" Expression ")") -> Expression

        "sizeof" "(" TypeName ")" -> Expression

        Expression "++" -> Expression

        FloatingPointConstant -> Expression

        Expression "." Identifier -> Expression

        StringConstant -> Expression

        IntegerConstant -> Expression

        HexadecimalConstant -> Expression

        Expression "->" Identifier -> Expression

        Expression "(" NonCommaExpression"," ")" -> Expression

        Expression -> Expression

        SizeOfExpression("sizeof" exp::Expression) -> Expression

        "&" Expression -> Expression

        "!" Expression -> Expression

        "(" TypeName ")" Expression -> Expression

        "*" Expression -> Expression

        "+" Expression -> Expression

        "-" Expression -> Expression

        "~" Expression -> Expression

        MultiplicationExpression(lexp::Expression "*" rexp::Expression) -> Expression

        Expression "/" Expression -> Expression

        Expression "%" Expression -> Expression

        Expression "+" Expression -> Expression

        Expression "-" Expression -> Expression

        Expression ">>" Expression -> Expression

        Expression "<<" Expression -> Expression

        Expression "<=" Expression -> Expression

        Expression ">=" Expression -> Expression

        Expression ">" Expression -> Expression

        Expression "<" Expression -> Expression

        Expression "==" Expression -> Expression

        Expression "!=" Expression -> Expression

        Expression "&" Expression -> Expression

        Expression "^" Expression -> Expression

        Expression "|" Expression -> Expression

        Expression "&&" Expression -> Expression

        Expression "||" Expression -> Expression

        Expression "?" Expression ":" Expression -> Expression

        Expression "|=" Expression -> Expression

        Expression "&=" Expression -> Expression

        Expression "*=" Expression -> Expression

        Expression "/=" Expression -> Expression

        Expression "+=" Expression -> Expression

        Expression ">>=" Expression -> Expression

        Expression "^=" Expression -> Expression

        Expression "-=" Expression -> Expression

        Expression "<<=" Expression -> Expression

        Expression "%=" Expression -> Expression

        Expression "=" Expression -> Expression

        CommaExpression(Expression "," Expression) -> Expression
