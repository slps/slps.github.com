comment_NL = comment NL ;
null_declaration = semi ;
local_label = '__label__' ;
ptr_qualifier = restrict_qualifier ;
ptr_qualifier = cv_qualifier ;
restrict_qualifier = '__restrict' ;
restrict_qualifier = 'restrict__' ;
restrict_qualifier = 'restrict' ;
restrict_qualifier = '__restrict__' ;
designator = array_designator ;
designator = struct_or_union_designator ;
array_designator = '[' constant_expression ']' postfix_extension* ;
array_designator = '[' constant_expression SP '...' SP constant_expression ']' postfix_extension* ;
struct_or_union_designator = '.'? id postfix_extension* ;
designator_assignment = ':' ;
designator_assignment = '=' ;
extension_specifier = '__extension__' ;
bit_qualifier = 'long' ;
bit_qualifier = 'short' ;
bit_qualifier = 'signed' ;
bit_qualifier = 'unsigned' ;
bit_qualifier = '__signed__' ;
bit_qualifier = '__signed' ;
inline_qualifier = '__inline' ;
inline_qualifier = '__inline__' ;
inline_qualifier = 'inline__' ;
inline_qualifier = 'inline' ;
attributes_or_asm = attribute_spec ;
attributes_or_asm = asm_spec ;
attribute_spec = '__attribute__' '('(' 
	    attribute_extension
	    ','
	   ')')' ;
attribute_extension = attribute_alias '(' string ')' ;
attribute_extension = attribute_aligned ;
attribute_extension = attribute_aligned '(' tagged_attribute_number ')' ;
attribute_extension = attribute_aligned '(' alignof_expression ')' ;
attribute_extension = attribute_always_inline ;
attribute_extension = attribute_cdecl ;
attribute_extension = attribute_cleanup '(' tagged_attribute_id ')' ;
attribute_extension = attribute_const ;
attribute_extension = attribute_constructor ;
attribute_extension = attribute_deprecated ;
attribute_extension = attribute_destructor ;
attribute_extension = attribute_dllexport ;
attribute_extension = attribute_dllimport ;
attribute_extension = attribute_eightbit ;
attribute_extension = attribute_exception '(' exception_function 
		exception_arg
		','
	       ')' ;
attribute_extension = attribute_far ;
attribute_extension = attribute_funvector ;
attribute_extension = attribute_format '(' format_archetype ',' tagged_attribute_number ',' tagged_attribute_number ')' ;
attribute_extension = attribute_format_arg '(' tagged_attribute_number ')' ;
attribute_extension = attribute_interrupt ;
attribute_extension = attribute_interrupt '(' string ')' ;
attribute_extension = attribute_interrupt_handler ;
attribute_extension = attribute_interrupt_handler '(' string ')' ;
attribute_extension = attribute_longcall ;
attribute_extension = attribute_long_call ;
attribute_extension = attribute_malloc ;
attribute_extension = attribute_may_alias ;
attribute_extension = attribute_mode '(' tagged_attribute_id ')' ;
attribute_extension = attribute_model '(' attribute_model_name ')' ;
attribute_extension = attribute_naked ;
attribute_extension = attribute_near ;
attribute_extension = attribute_no_check_mem ;
attribute_extension = attribute_no_instrument ;
attribute_extension = attribute_nocommon ;
attribute_extension = attribute_noinline ;
attribute_extension = attribute_nonnull ;
attribute_extension = attribute_nonnull '(' tagged_attribute_number+ ')' ;
attribute_extension = attribute_noreturn ;
attribute_extension = attribute_nothrow ;
attribute_extension = attribute_packed ;
attribute_extension = attribute_pure ;
attribute_extension = attribute_regparm '(' tagged_attribute_number ')' ;
attribute_extension = attribute_section '(' string ')' ;
attribute_extension = attribute_shared ;
attribute_extension = attribute_short_call ;
attribute_extension = attribute_signal '(' string ')' ;
attribute_extension = attribute_sp_switch '(' string ')' ;
attribute_extension = attribute_stdcall ;
attribute_extension = attribute_tiny ;
attribute_extension = attribute_tls_model '(' tls_model_type ')' ;
attribute_extension = attribute_trans_union ;
attribute_extension = attribute_trap_exit '(' tagged_attribute_number ')' ;
attribute_extension = attribute_used ;
attribute_extension = attribute_unused ;
attribute_extension = attribute_vector_size '(' tagged_attribute_number ')' ;
attribute_extension = attribute_visibility '(' visibility_type ')' ;
attribute_extension = attribute_weak ;
tagged_attribute_id = id ;
tagged_attribute_number = number ;
attribute_near = '__near__' ;
attribute_near = '__near' ;
attribute_near = 'near__' ;
attribute_near = 'near' ;
attribute_far = '__far__' ;
attribute_far = '__far' ;
attribute_far = 'far__' ;
attribute_far = 'far' ;
attribute_visibility = '__visibility__' ;
attribute_visibility = '__visibility' ;
attribute_visibility = 'visibility__' ;
attribute_visibility = 'visibility' ;
visibility_type = '"default"' ;
visibility_type = '"hidden"' ;
visibility_type = '"protected"' ;
visibility_type = '"internal"' ;
attribute_nonnull = '__nonnull__' ;
attribute_nonnull = '__nonnull' ;
attribute_nonnull = 'nonnull__' ;
attribute_nonnull = 'nonnull' ;
attribute_nothrow = '__nothrow__' ;
attribute_nothrow = '__nothrow' ;
attribute_nothrow = 'nothrow__' ;
attribute_nothrow = 'nothrow' ;
attribute_may_alias = '__may_alias__' ;
attribute_may_alias = '__may_alias' ;
attribute_may_alias = 'may_alias__' ;
attribute_may_alias = 'may_alias' ;
attribute_tls_model = '__tls_model__' ;
attribute_tls_model = '__tls_model' ;
attribute_tls_model = 'tls_model__' ;
attribute_tls_model = 'tls_model' ;
tls_model_type = '"global-dynamic"' ;
tls_model_type = '"local-dynamic"' ;
tls_model_type = '"initial-exec"' ;
tls_model_type = '"local-exec"' ;
attribute_cleanup = '__cleanup__' ;
attribute_cleanup = '__cleanup' ;
attribute_cleanup = 'cleanup__' ;
attribute_cleanup = 'cleanup' ;
attribute_dllexport = '__dllexport__' ;
attribute_dllexport = '__dllexport' ;
attribute_dllexport = 'dllexport__' ;
attribute_dllexport = 'dllexport' ;
attribute_used = '__used__' ;
attribute_used = '__used' ;
attribute_used = 'used__' ;
attribute_used = 'used' ;
attribute_always_inline = '__always_inline__' ;
attribute_always_inline = '__always_inline' ;
attribute_always_inline = 'always_inline__' ;
attribute_always_inline = 'always_inline' ;
attribute_noinline = '__noinline__' ;
attribute_noinline = '__noinline' ;
attribute_noinline = 'noinline__' ;
attribute_noinline = 'noinline' ;
attribute_vector_size = '__vector_size__' ;
attribute_vector_size = '__vector_size' ;
attribute_vector_size = 'vector_size__' ;
attribute_vector_size = 'vector_size' ;
attribute_deprecated = '__deprecated__' ;
attribute_deprecated = '__deprecated' ;
attribute_deprecated = 'deprecated__' ;
attribute_deprecated = 'deprecated' ;
attribute_mode = '__mode__' ;
attribute_mode = '__mode' ;
attribute_mode = 'mode__' ;
attribute_mode = 'mode' ;
attribute_format = '__format__' ;
attribute_format = '__format' ;
attribute_format = 'format__' ;
attribute_format = 'format' ;
attribute_format_arg = '__format_arg__' ;
attribute_format_arg = '__format_arg' ;
attribute_format_arg = 'format_arg__' ;
attribute_format_arg = 'format_arg' ;
attribute_aligned = '__aligned__' ;
attribute_aligned = '__aligned' ;
attribute_aligned = 'aligned__' ;
attribute_aligned = 'aligned' ;
attribute_weak = 'weak' ;
attribute_weak = '__weak__' ;
attribute_weak = '__weak' ;
attribute_weak = 'weak__' ;
attribute_alias = 'alias' ;
attribute_alias = '__alias__' ;
attribute_alias = '__alias' ;
attribute_alias = 'alias__' ;
attribute_no_check_mem = 'no_check_memory_usage' ;
attribute_no_check_mem = '__no_check_memory_usage__' ;
attribute_no_check_mem = '__no_check_memory_usage' ;
attribute_no_check_mem = 'no_check_memory_usage__' ;
attribute_regparm = 'regparm' ;
attribute_regparm = '__regparm__' ;
attribute_regparm = '__regparm' ;
attribute_regparm = 'regparm__' ;
attribute_stdcall = 'stdcall' ;
attribute_stdcall = '__stdcall__' ;
attribute_stdcall = '__stdcall' ;
attribute_stdcall = 'stdcall__' ;
attribute_cdecl = 'cdecl' ;
attribute_cdecl = '__cdecl__' ;
attribute_cdecl = '__cdecl' ;
attribute_cdecl = 'cdecl__' ;
attribute_longcall = 'longcall' ;
attribute_longcall = '__longcall__' ;
attribute_longcall = '__longcall' ;
attribute_longcall = 'longcall__' ;
attribute_long_call = 'long_call' ;
attribute_long_call = '__long_call__' ;
attribute_long_call = '__long_call' ;
attribute_long_call = 'long_call__' ;
attribute_short_call = 'short_call' ;
attribute_short_call = '__short_call__' ;
attribute_short_call = '__short_call' ;
attribute_short_call = 'short_call__' ;
attribute_dllimport = 'dllimport' ;
attribute_dllimport = '__dllimport__' ;
attribute_dllimport = '__dllimport' ;
attribute_dllimport = 'dllimport__' ;
attribute_exception = 'exception' ;
attribute_exception = '__exception__' ;
attribute_exception = '__exception' ;
attribute_exception = 'exception__' ;
exception_function = stringlit* stringlit ;
exception_function = tagged_attribute_id ;
exception_arg = stringlit* stringlit ;
exception_arg = tagged_attribute_id ;
attribute_funvector = 'function_vector' ;
attribute_funvector = '__function_vector__' ;
attribute_funvector = '__function_vector' ;
attribute_funvector = 'function_vector__' ;
attribute_interrupt = 'interrupt' ;
attribute_interrupt = '__interrupt__' ;
attribute_interrupt = '__interrupt' ;
attribute_interrupt = 'interrupt__' ;
attribute_interrupt_handler = 'interrupt_handler' ;
attribute_interrupt_handler = '__interrupt_handler__' ;
attribute_interrupt_handler = '__interrupt_handler' ;
attribute_interrupt_handler = 'interrupt_handler__' ;
attribute_sp_switch = 'sp_switch' ;
attribute_sp_switch = '__sp_switch__' ;
attribute_sp_switch = '__sp_switch' ;
attribute_sp_switch = 'sp_switch__' ;
attribute_trap_exit = 'trap_exit' ;
attribute_trap_exit = '__trap_exit__' ;
attribute_trap_exit = '__trap_exit' ;
attribute_trap_exit = 'trap_exit__' ;
attribute_eightbit = 'eightbit_data' ;
attribute_eightbit = '__eightbit_data__' ;
attribute_eightbit = '__eightbit_data' ;
attribute_eightbit = 'eightbit_data__' ;
attribute_tiny = 'tiny_data' ;
attribute_tiny = '__tiny_data__' ;
attribute_tiny = '__tiny_data' ;
attribute_tiny = 'tiny_data__' ;
attribute_signal = 'signal' ;
attribute_signal = '__signal__' ;
attribute_signal = '__signal' ;
attribute_signal = 'signal__' ;
attribute_naked = 'naked' ;
attribute_naked = '__naked__' ;
attribute_naked = '__naked' ;
attribute_naked = 'naked__' ;
attribute_model = 'model' ;
attribute_model = '__model__' ;
attribute_model = '__model' ;
attribute_model = 'model__' ;
attribute_model_name = 'small' ;
attribute_model_name = '__small__' ;
attribute_model_name = '__small' ;
attribute_model_name = 'small__' ;
attribute_model_name = 'medium' ;
attribute_model_name = '__medium__' ;
attribute_model_name = '__medium' ;
attribute_model_name = 'medium__' ;
attribute_model_name = 'large' ;
attribute_model_name = '__large__' ;
attribute_model_name = '__large' ;
attribute_model_name = 'large__' ;
attribute_nocommon = 'nocommon' ;
attribute_nocommon = '__nocommon__' ;
attribute_nocommon = 'nocommon__' ;
attribute_nocommon = '__nocommon' ;
attribute_shared = 'shared' ;
attribute_shared = '__shared__' ;
attribute_shared = '__shared' ;
attribute_shared = 'shared__' ;
attribute_malloc = 'malloc' ;
attribute_malloc = '__malloc__' ;
attribute_malloc = '__malloc' ;
attribute_malloc = 'malloc__' ;
format_archetype = 'printf' ;
format_archetype = '__printf__' ;
format_archetype = '__printf' ;
format_archetype = 'printf__' ;
format_archetype = 'scanf' ;
format_archetype = '__scanf__' ;
format_archetype = '__scanf' ;
format_archetype = 'scanf__' ;
format_archetype = 'strftime' ;
format_archetype = '__strftime__' ;
format_archetype = '__strftime' ;
format_archetype = 'strftime__' ;
format_archetype = 'strfmon' ;
format_archetype = '__strfmon__' ;
format_archetype = '__strfmon' ;
format_archetype = 'strfmon__' ;
attribute_noreturn = '__noreturn__' ;
attribute_noreturn = '__noreturn' ;
attribute_noreturn = 'noreturn__' ;
attribute_noreturn = 'noreturn' ;
attribute_const = '__const__' ;
attribute_const = '__const' ;
attribute_const = 'const__' ;
attribute_const = 'const' ;
attribute_pure = '__pure__' ;
attribute_pure = '__pure' ;
attribute_pure = 'pure__' ;
attribute_pure = 'pure' ;
attribute_trans_union = '__transparent_union__' ;
attribute_trans_union = '__transparent_union' ;
attribute_trans_union = 'transparent_union__' ;
attribute_trans_union = 'transparent_union' ;
attribute_unused = '__unused__' ;
attribute_unused = '__unused' ;
attribute_unused = 'unused__' ;
attribute_unused = 'unused' ;
attribute_packed = '__packed__' ;
attribute_packed = '__packed' ;
attribute_packed = 'packed__' ;
attribute_packed = 'packed' ;
attribute_no_instrument = 'no_instrument_function' ;
attribute_no_instrument = '__no_instrument_function__' ;
attribute_no_instrument = '__no_instrument_function' ;
attribute_no_instrument = 'no_instrument_function__' ;
attribute_section = 'section' ;
attribute_section = '__section__' ;
attribute_section = '__section' ;
attribute_section = 'section__' ;
attribute_constructor = 'constructor' ;
attribute_constructor = '__constructor__' ;
attribute_constructor = '__constructor' ;
attribute_constructor = 'constructor__' ;
attribute_destructor = 'destructor' ;
attribute_destructor = '__destructor__' ;
attribute_destructor = '__destructor' ;
attribute_destructor = 'destructor__' ;
asm_statement = asm_spec semi ;
asm_spec = asm_or_cv+ '(' asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? ')' ;
asm_or_cv = '__asm__' ;
asm_or_cv = 'asm' ;
asm_or_cv = 'asm__' ;
asm_or_cv = '__asm' ;
asm_or_cv = cv_qualifier ;
asm_template = string ;
asm_output_operands = ':' 
	    asm_operand
	    ','
	   ;
asm_input_operands = ':' 
	    asm_operand
	    ','
	   ;
asm_operand = string '(' expression ')' ;
asm_clobbered_registers = ':' 
	    string
	    ','
	   ;
compound_statement_expression = '(' compound_statement ')' ;
compound_literal = '(' struct_or_union_specifier ')' '{' 
		designated_initializer
		','
	       ','? '}' ;
compound_literal = '(' compound_literal_array_type ')' '{' 
		designated_initializer
		','
	       ','? '}' ;
compound_literal = '(' compound_literal ')' ;
compound_literal_array_type = type_specifiers compound_literal_array_declarator ;
compound_literal_array_declarator = ptr_operator* array_declarator_extension* ;
compound_literal_array_declarator = '(' compound_literal_array_declarator ')' array_declarator_extension* ;
typeof_expression = typeof_specifier '(' simple_type_name ')' ;
typeof_expression = typeof_specifier '(' expression ')' ;
typeof_specifier = '__typeof' ;
typeof_specifier = 'typeof' ;
typeof_specifier = '__typeof__' ;
typeof_specifier = 'typeof__' ;
complex_specifier = '_Complex' simple_type_or_qualifier* ;
simple_type_or_qualifier = simple_type_name ;
simple_type_or_qualifier = type_qualifier ;
gnu_long_int = gnu_long_int_string ;
gnu_long_int = gnu_long_int_charlit ;
gnu_long_int_string = 'L' SPOFF string SPON ;
gnu_long_int_charlit = 'L' SPOFF charlit SPON ;
hexfloat = extension_specifier hex ;
argument_expression = assignment_expression ;
argument_expression = type_name ;
alignof_expression = '__alignof__' '(' unary_expression ')' ;
alignof_expression = '__alignof' '(' unary_expression ')' ;
alignof_expression = '__alignof__' '(' type_name ')' ;
alignof_expression = '__alignof' '(' type_name ')' ;
