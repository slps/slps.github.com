module Main

exports
 context-free start-symbols translation-unit
  sorts
        Translation-unit Declaration-seq Declaration Block-declaration Simple-declaration Decl-specifier-seq Decl-specifier Storage-class-specifier Type-specifier Simple-type-specifier Nested-name-specifier Class-or-namespace-name Class-name Template-id Template-name Template-argument-list Template-argument Assignment-expression Conditional-expression Logical-or-expression Logical-and-expression Inclusive-or-expression Exclusive-or-expression And-expression Equality-expression Relational-expression Shift-expression Additive-expression Multiplicative-expression Pm-expression Cast-expression Unary-expression Postfix-expression Primary-expression Expression Id-expression Unqualified-id Operator-function-id Operator Conversion-function-id Conversion-type-id Type-specifier-seq Conversion-declarator Ptr-operator Cv-qualifier-seq Cv-qualifier Qualified-id Expression-list Pseudo-destructor-name Type-name Enum-name Typedef-name Type-id Abstract-declarator Direct-abstract-declarator Parameter-declaration-clause Parameter-declaration-list Parameter-declaration Declarator Direct-declarator Declarator-id Exception-specification Type-id-list Constant-expression Unary-operator New-expression New-placement New-type-id New-declarator Direct-new-declarator New-initializer Delete-expression Assignment-operator Throw-expression Namespace-name Original-namespace-name Namespace-alias Class-specifier Class-head Class-key Base-clause Base-specifier-list Base-specifier Access-specifier Member-specification Member-declaration Member-declarator-list Member-declarator Pure-specifier Constant-initializer Function-definition Ctor-initializer Mem-initializer-list Mem-initializer Mem-initializer-id Function-body Compound-statement Statement-seq Statement Labeled-statement Expression-statement Selection-statement Condition Iteration-statement For-init-statement Jump-statement Declaration-statement Try-block Handler-seq Handler Exception-declaration Function-try-block Using-declaration Template-declaration Template-parameter-list Template-parameter Type-parameter Enum-specifier Enumerator-list Enumerator-definition Enumerator Elaborated-type-specifier Function-specifier Init-declarator-list Init-declarator Initializer Initializer-clause Initializer-list Asm-definition Namespace-alias-definition Qualified-namespace-specifier Using-directive Explicit-instantiation Explicit-specialization Linkage-specification Namespace-definition Named-namespace-definition Original-namespace-definition Namespace-body Extension-namespace-definition Unnamed-namespace-definition 
  context-free syntax
        Declaration-seq? -> Translation-unit

        Declaration -> Declaration-seq
        Declaration-seq Declaration -> Declaration-seq

        Block-declaration -> Declaration
        Function-definition -> Declaration
        Template-declaration -> Declaration
        Explicit-instantiation -> Declaration
        Explicit-specialization -> Declaration
        Linkage-specification -> Declaration
        Namespace-definition -> Declaration

        Simple-declaration -> Block-declaration
        Asm-definition -> Block-declaration
        Namespace-alias-definition -> Block-declaration
        Using-declaration -> Block-declaration
        Using-directive -> Block-declaration

        Decl-specifier-seq? Init-declarator-list? ";" -> Simple-declaration

        Decl-specifier-seq? Decl-specifier -> Decl-specifier-seq

        Storage-class-specifier -> Decl-specifier
        Type-specifier -> Decl-specifier
        Function-specifier -> Decl-specifier
        "friend" -> Decl-specifier
        "typedef" -> Decl-specifier

        "auto" -> Storage-class-specifier
        "register" -> Storage-class-specifier
        "static" -> Storage-class-specifier
        "extern" -> Storage-class-specifier
        "mutable" -> Storage-class-specifier

        Simple-type-specifier -> Type-specifier
        Class-specifier -> Type-specifier
        Enum-specifier -> Type-specifier
        Elaborated-type-specifier -> Type-specifier
        Cv-qualifier -> Type-specifier

        "::"? Nested-name-specifier? Type-name -> Simple-type-specifier
        "::"? Nested-name-specifier "template" Template-id -> Simple-type-specifier
        "char" -> Simple-type-specifier
        "wchar_t" -> Simple-type-specifier
        "bool" -> Simple-type-specifier
        "short" -> Simple-type-specifier
        "int" -> Simple-type-specifier
        "long" -> Simple-type-specifier
        "signed" -> Simple-type-specifier
        "unsigned" -> Simple-type-specifier
        "float" -> Simple-type-specifier
        "double" -> Simple-type-specifier
        "void" -> Simple-type-specifier

        Class-or-namespace-name "::" Nested-name-specifier? -> Nested-name-specifier
        Class-or-namespace-name "::" "template" Nested-name-specifier -> Nested-name-specifier

        Class-name -> Class-or-namespace-name
        Namespace-name -> Class-or-namespace-name

        Identifier -> Class-name
        Template-id -> Class-name

        Template-name "<" Template-argument-list? ">" -> Template-id

        Identifier -> Template-name

        Template-argument -> Template-argument-list
        Template-argument-list "," Template-argument -> Template-argument-list

        Assignment-expression -> Template-argument
        Type-id -> Template-argument
        Id-expression -> Template-argument

        Conditional-expression -> Assignment-expression
        Logical-or-expression Assignment-operator Assignment-expression -> Assignment-expression
        Throw-expression -> Assignment-expression

        Logical-or-expression -> Conditional-expression
        Logical-or-expression "?" Expression ":" Assignment-expression -> Conditional-expression

        Logical-and-expression -> Logical-or-expression
        Logical-or-expression "||" Logical-and-expression -> Logical-or-expression

        Inclusive-or-expression -> Logical-and-expression
        Logical-and-expression "&&" Inclusive-or-expression -> Logical-and-expression

        Exclusive-or-expression -> Inclusive-or-expression
        Inclusive-or-expression "|" Exclusive-or-expression -> Inclusive-or-expression

        And-expression -> Exclusive-or-expression
        Exclusive-or-expression "^" And-expression -> Exclusive-or-expression

        Equality-expression -> And-expression
        And-expression "&" Equality-expression -> And-expression

        Relational-expression -> Equality-expression
        Equality-expression "==" Relational-expression -> Equality-expression
        Equality-expression "!=" Relational-expression -> Equality-expression

        Shift-expression -> Relational-expression
        Relational-expression "<" Shift-expression -> Relational-expression
        Relational-expression ">" Shift-expression -> Relational-expression
        Relational-expression "<=" Shift-expression -> Relational-expression
        Relational-expression ">=" Shift-expression -> Relational-expression

        Additive-expression -> Shift-expression
        Shift-expression "<<" Additive-expression -> Shift-expression
        Shift-expression ">>" Additive-expression -> Shift-expression

        Multiplicative-expression -> Additive-expression
        Additive-expression "+" Multiplicative-expression -> Additive-expression
        Additive-expression "-" Multiplicative-expression -> Additive-expression

        Pm-expression -> Multiplicative-expression
        Multiplicative-expression "*" Pm-expression -> Multiplicative-expression
        Multiplicative-expression "/" Pm-expression -> Multiplicative-expression
        Multiplicative-expression "%" Pm-expression -> Multiplicative-expression

        Cast-expression -> Pm-expression
        Pm-expression ".*" Cast-expression -> Pm-expression
        Pm-expression "->*" Cast-expression -> Pm-expression

        Unary-expression -> Cast-expression
        "(" Type-id ")" Cast-expression -> Cast-expression

        Postfix-expression -> Unary-expression
        "++" Cast-expression -> Unary-expression
        "--" Cast-expression -> Unary-expression
        Unary-operator Cast-expression -> Unary-expression
        "sizeof" Unary-expression -> Unary-expression
        "sizeof" "(" Type-id ")" -> Unary-expression
        New-expression -> Unary-expression
        Delete-expression -> Unary-expression

        Primary-expression -> Postfix-expression
        Postfix-expression "[" Expression "]" -> Postfix-expression
        Postfix-expression "(" Expression-list? ")" -> Postfix-expression
        Simple-type-specifier "(" Expression-list? ")" -> Postfix-expression
        "typename" "::"? Nested-name-specifier Identifier "(" Expression-list? ")" -> Postfix-expression
        "typename" "::"? Nested-name-specifier "template"? Template-id "(" Expression-list? ")" -> Postfix-expression
        Postfix-expression "." "template"? Id-expression -> Postfix-expression
        Postfix-expression "->" "template"? Id-expression -> Postfix-expression
        Postfix-expression "." Pseudo-destructor-name -> Postfix-expression
        Postfix-expression "->" Pseudo-destructor-name -> Postfix-expression
        Postfix-expression "++" -> Postfix-expression
        Postfix-expression "--" -> Postfix-expression
        "dynamic_cast" "<" Type-id ">" "(" Expression ")" -> Postfix-expression
        "static_cast" "<" Type-id ">" "(" Expression ")" -> Postfix-expression
        "reinterpret_cast" "<" Type-id ">" "(" Expression ")" -> Postfix-expression
        "const_cast" "<" Type-id ">" "(" Expression ")" -> Postfix-expression
        "typeid" "(" Expression ")" -> Postfix-expression
        "typeid" "(" Type-id ")" -> Postfix-expression

        Literal -> Primary-expression
        "this" -> Primary-expression
        "(" Expression ")" -> Primary-expression
        Id-expression -> Primary-expression

        Assignment-expression -> Expression
        Expression "," Assignment-expression -> Expression

        Unqualified-id -> Id-expression
        Qualified-id -> Id-expression

        Identifier -> Unqualified-id
        Operator-function-id -> Unqualified-id
        Conversion-function-id -> Unqualified-id
        "~" Class-name -> Unqualified-id
        Template-id -> Unqualified-id

        "operator" Operator -> Operator-function-id

        "new" -> Operator
        "delete" -> Operator
        "new" "[" "]" -> Operator
        "delete" "[" "]" -> Operator
        "+" -> Operator
        "-" -> Operator
        "*" -> Operator
        "/" -> Operator
        "%" -> Operator
        "^" -> Operator
        "&" -> Operator
        "|" -> Operator
        "~" -> Operator
        "!" -> Operator
        "=" -> Operator
        "<" -> Operator
        ">" -> Operator
        "+=" -> Operator
        "-=" -> Operator
        "*=" -> Operator
        "/=" -> Operator
        "%=" -> Operator
        "^=" -> Operator
        "&=" -> Operator
        "|=" -> Operator
        "<<" -> Operator
        ">>" -> Operator
        ">>=" -> Operator
        "<<=" -> Operator
        "==" -> Operator
        "!=" -> Operator
        "<=" -> Operator
        ">=" -> Operator
        "&&" -> Operator
        "||" -> Operator
        "++" -> Operator
        "--" -> Operator
        "," -> Operator
        "->*" -> Operator
        "->" -> Operator
        "(" ")" -> Operator
        "[" "]" -> Operator

        "operator" Conversion-type-id -> Conversion-function-id

        Type-specifier-seq Conversion-declarator? -> Conversion-type-id

        Type-specifier Type-specifier-seq? -> Type-specifier-seq

        Ptr-operator Conversion-declarator? -> Conversion-declarator

        "*" Cv-qualifier-seq? -> Ptr-operator
        "&" -> Ptr-operator
        "::"? Nested-name-specifier "*" Cv-qualifier-seq? -> Ptr-operator

        Cv-qualifier Cv-qualifier-seq? -> Cv-qualifier-seq

        "const" -> Cv-qualifier
        "volatile" -> Cv-qualifier

        "::"? Nested-name-specifier "template"? Unqualified-id -> Qualified-id
        "::" Identifier -> Qualified-id
        "::" Operator-function-id -> Qualified-id
        "::" Template-id -> Qualified-id

        Assignment-expression -> Expression-list
        Expression-list "," Assignment-expression -> Expression-list

        "::"? Nested-name-specifier? Type-name "::" "~" Type-name -> Pseudo-destructor-name
        "::"? Nested-name-specifier "template" Template-id "::" "~" Type-name -> Pseudo-destructor-name
        "::"? Nested-name-specifier? "~" Type-name -> Pseudo-destructor-name

        Class-name -> Type-name
        Enum-name -> Type-name
        Typedef-name -> Type-name

        Identifier -> Enum-name

        Identifier -> Typedef-name

        Type-specifier-seq Abstract-declarator? -> Type-id

        Ptr-operator Abstract-declarator? -> Abstract-declarator
        Direct-abstract-declarator -> Abstract-declarator

        Direct-abstract-declarator? "(" Parameter-declaration-clause ")" Cv-qualifier-seq? Exception-specification? -> Direct-abstract-declarator
        Direct-abstract-declarator? "[" Constant-expression? "]" -> Direct-abstract-declarator
        "(" Abstract-declarator ")" -> Direct-abstract-declarator

        Parameter-declaration-list? "..."? -> Parameter-declaration-clause
        Parameter-declaration-list "," "..." -> Parameter-declaration-clause

        Parameter-declaration -> Parameter-declaration-list
        Parameter-declaration-list "," Parameter-declaration -> Parameter-declaration-list

        Decl-specifier-seq Declarator -> Parameter-declaration
        Decl-specifier-seq Declarator "=" Assignment-expression -> Parameter-declaration
        Decl-specifier-seq Abstract-declarator? -> Parameter-declaration
        Decl-specifier-seq Abstract-declarator? "=" Assignment-expression -> Parameter-declaration

        Direct-declarator -> Declarator
        Ptr-operator Declarator -> Declarator

        Declarator-id -> Direct-declarator
        Direct-declarator "(" Parameter-declaration-clause ")" Cv-qualifier-seq? Exception-specification? -> Direct-declarator
        Direct-declarator "[" Constant-expression? "]" -> Direct-declarator
        "(" Declarator ")" -> Direct-declarator

        Id-expression -> Declarator-id
        "::"? Nested-name-specifier? Type-name -> Declarator-id

        "throw" "(" Type-id-list? ")" -> Exception-specification

        Type-id -> Type-id-list
        Type-id-list "," Type-id -> Type-id-list

        Conditional-expression -> Constant-expression

        "*" -> Unary-operator
        "&" -> Unary-operator
        "+" -> Unary-operator
        "-" -> Unary-operator
        "!" -> Unary-operator
        "~" -> Unary-operator

        "::"? "new" New-placement? New-type-id New-initializer? -> New-expression
        "::"? "new" New-placement? "(" Type-id ")" New-initializer? -> New-expression

        "(" Expression-list ")" -> New-placement

        Type-specifier-seq New-declarator? -> New-type-id

        Ptr-operator New-declarator? -> New-declarator
        Direct-new-declarator -> New-declarator

        "[" Expression "]" -> Direct-new-declarator
        Direct-new-declarator "[" Constant-expression "]" -> Direct-new-declarator

        "(" Expression-list? ")" -> New-initializer

        "::"? "delete" Cast-expression -> Delete-expression
        "::"? "delete" "[" "]" Cast-expression -> Delete-expression

        "=" -> Assignment-operator
        "*=" -> Assignment-operator
        "/=" -> Assignment-operator
        "%=" -> Assignment-operator
        "+=" -> Assignment-operator
        "-=" -> Assignment-operator
        ">>=" -> Assignment-operator
        "<<=" -> Assignment-operator
        "&=" -> Assignment-operator
        "^=" -> Assignment-operator
        "|=" -> Assignment-operator

        "throw" Assignment-expression? -> Throw-expression

        Original-namespace-name -> Namespace-name
        Namespace-alias -> Namespace-name

        Identifier -> Original-namespace-name

        Identifier -> Namespace-alias

        Class-head "{" Member-specification? "}" -> Class-specifier

        Class-key Identifier? Base-clause? -> Class-head
        Class-key Nested-name-specifier Identifier Base-clause? -> Class-head
        Class-key Nested-name-specifier? Template-id Base-clause? -> Class-head

        "class" -> Class-key
        "struct" -> Class-key
        "union" -> Class-key

        ":" Base-specifier-list -> Base-clause

        Base-specifier -> Base-specifier-list
        Base-specifier-list "," Base-specifier -> Base-specifier-list

        "::"? Nested-name-specifier? Class-name -> Base-specifier
        "virtual" Access-specifier? "::"? Nested-name-specifier? Class-name -> Base-specifier
        Access-specifier "virtual"? "::"? Nested-name-specifier? Class-name -> Base-specifier

        "private" -> Access-specifier
        "protected" -> Access-specifier
        "public" -> Access-specifier

        Member-declaration Member-specification? -> Member-specification
        Access-specifier ":" Member-specification? -> Member-specification

        Decl-specifier-seq? Member-declarator-list? ";" -> Member-declaration
        Function-definition ";"? -> Member-declaration
        "::"? Nested-name-specifier "template"? Unqualified-id ";" -> Member-declaration
        Using-declaration -> Member-declaration
        Template-declaration -> Member-declaration

        Member-declarator -> Member-declarator-list
        Member-declarator-list "," Member-declarator -> Member-declarator-list

        Declarator Pure-specifier? -> Member-declarator
        Declarator Constant-initializer? -> Member-declarator
        Identifier? ":" Constant-expression -> Member-declarator

        "=" "0" -> Pure-specifier

        "=" Constant-expression -> Constant-initializer

        Decl-specifier-seq? Declarator Ctor-initializer? Function-body -> Function-definition
        Decl-specifier-seq? Declarator Function-try-block -> Function-definition

        ":" Mem-initializer-list -> Ctor-initializer

        Mem-initializer -> Mem-initializer-list
        Mem-initializer "," Mem-initializer-list -> Mem-initializer-list

        Mem-initializer-id "(" Expression-list? ")" -> Mem-initializer

        "::"? Nested-name-specifier? Class-name -> Mem-initializer-id
        Identifier -> Mem-initializer-id

        Compound-statement -> Function-body

        "{" Statement-seq? "}" -> Compound-statement

        Statement -> Statement-seq
        Statement-seq Statement -> Statement-seq

        Labeled-statement -> Statement
        Expression-statement -> Statement
        Compound-statement -> Statement
        Selection-statement -> Statement
        Iteration-statement -> Statement
        Jump-statement -> Statement
        Declaration-statement -> Statement
        Try-block -> Statement

        Identifier ":" Statement -> Labeled-statement
        "case" Constant-expression ":" Statement -> Labeled-statement
        "default" ":" Statement -> Labeled-statement

        Expression? ";" -> Expression-statement

        "if" "(" Condition ")" Statement -> Selection-statement
        "if" "(" Condition ")" Statement "else" Statement -> Selection-statement
        "switch" "(" Condition ")" Statement -> Selection-statement

        Expression -> Condition
        Type-specifier-seq Declarator "=" Assignment-expression -> Condition

        "while" "(" Condition ")" Statement -> Iteration-statement
        "do" Statement "while" "(" Expression ")" ";" -> Iteration-statement
        "for" "(" For-init-statement Condition? ";" Expression? ")" Statement -> Iteration-statement

        Expression-statement -> For-init-statement
        Simple-declaration -> For-init-statement

        "break" ";" -> Jump-statement
        "continue" ";" -> Jump-statement
        "return" Expression? ";" -> Jump-statement
        "goto" Identifier ";" -> Jump-statement

        Block-declaration -> Declaration-statement

        "try" Compound-statement Handler-seq -> Try-block

        Handler Handler-seq? -> Handler-seq

        "catch" "(" Exception-declaration ")" Compound-statement -> Handler

        Type-specifier-seq Declarator -> Exception-declaration
        Type-specifier-seq Abstract-declarator -> Exception-declaration
        Type-specifier-seq -> Exception-declaration
        "..." -> Exception-declaration

        "try" Ctor-initializer? Function-body Handler-seq -> Function-try-block

        "using" "typename"? "::"? Nested-name-specifier Unqualified-id ";" -> Using-declaration
        "using" "::" Unqualified-id ";" -> Using-declaration

        "export"? "template" "<" Template-parameter-list ">" Declaration -> Template-declaration

        Template-parameter -> Template-parameter-list
        Template-parameter-list "," Template-parameter -> Template-parameter-list

        Type-parameter -> Template-parameter
        Parameter-declaration -> Template-parameter

        "class" Identifier? -> Type-parameter
        "class" Identifier? "=" Type-id -> Type-parameter
        "typename" Identifier? -> Type-parameter
        "typename" Identifier? "=" Type-id -> Type-parameter
        "template" "<" Template-parameter-list ">" "class" Identifier? -> Type-parameter
        "template" "<" Template-parameter-list ">" "class" Identifier? "=" Id-expression -> Type-parameter

        "enum" Identifier? "{" Enumerator-list? "}" -> Enum-specifier

        Enumerator-definition -> Enumerator-list
        Enumerator-list "," Enumerator-definition -> Enumerator-list

        Enumerator -> Enumerator-definition
        Enumerator "=" Constant-expression -> Enumerator-definition

        Identifier -> Enumerator

        Class-key "::"? Nested-name-specifier? Identifier -> Elaborated-type-specifier
        "enum" "::"? Nested-name-specifier? Identifier -> Elaborated-type-specifier
        "typename" "::"? Nested-name-specifier Identifier -> Elaborated-type-specifier
        "typename" "::"? Nested-name-specifier "template"? Template-id -> Elaborated-type-specifier

        "inline" -> Function-specifier
        "virtual" -> Function-specifier
        "explicit" -> Function-specifier

        Init-declarator -> Init-declarator-list
        Init-declarator-list "," Init-declarator -> Init-declarator-list

        Declarator Initializer? -> Init-declarator

        "=" Initializer-clause -> Initializer
        "(" Expression-list ")" -> Initializer

        Assignment-expression -> Initializer-clause
        "{" Initializer-list ","? "}" -> Initializer-clause
        "{" "}" -> Initializer-clause

        Initializer-clause -> Initializer-list
        Initializer-list "," Initializer-clause -> Initializer-list

        "asm" "(" String-literal ")" ";" -> Asm-definition

        "namespace" Identifier "=" Qualified-namespace-specifier ";" -> Namespace-alias-definition

        "::"? Nested-name-specifier? Namespace-name -> Qualified-namespace-specifier

        "using" "namespace" "::"? Nested-name-specifier? Namespace-name ";" -> Using-directive

        "template" Declaration -> Explicit-instantiation

        "template" "<" ">" Declaration -> Explicit-specialization

        "extern" String-literal "{" Declaration-seq? "}" -> Linkage-specification
        "extern" String-literal Declaration -> Linkage-specification

        Named-namespace-definition -> Namespace-definition
        Unnamed-namespace-definition -> Namespace-definition

        Original-namespace-definition -> Named-namespace-definition
        Extension-namespace-definition -> Named-namespace-definition

        "namespace" Identifier "{" Namespace-body "}" -> Original-namespace-definition

        Declaration-seq? -> Namespace-body

        "namespace" Original-namespace-name "{" Namespace-body "}" -> Extension-namespace-definition

        "namespace" "{" Namespace-body "}" -> Unnamed-namespace-definition
