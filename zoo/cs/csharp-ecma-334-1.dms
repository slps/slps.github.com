namespace-name = namespace-or-type-name ;
type-name = namespace-or-type-name ;
namespace-or-type-name = IDENTIFIER ;
namespace-or-type-name = namespace-or-type-name '.' IDENTIFIER ;
type = value-type ;
type = reference-type ;
value-type = struct-type ;
value-type = enum-type ;
struct-type = type-name ;
struct-type = simple-type ;
simple-type = numeric-type ;
simple-type = 'bool' ;
numeric-type = integral-type ;
numeric-type = floating-point-type ;
numeric-type = 'decimal' ;
integral-type = 'sbyte' ;
integral-type = 'byte' ;
integral-type = 'short' ;
integral-type = 'ushort' ;
integral-type = 'int' ;
integral-type = 'uint' ;
integral-type = 'long' ;
integral-type = 'ulong' ;
integral-type = 'char' ;
floating-point-type = 'float' ;
floating-point-type = 'double' ;
enum-type = type-name ;
reference-type = class-type ;
reference-type = interface-type ;
reference-type = array-type ;
reference-type = delegate-type ;
class-type = type-name ;
class-type = 'object' ;
class-type = 'string' ;
interface-type = type-name ;
array-type = non-array-type rank-specifiers ;
non-array-type = type ;
rank-specifiers = rank-specifier ;
rank-specifiers = rank-specifiers rank-specifier ;
rank-specifier = '[' dim-separators? ']' ;
dim-separators = ',' ;
dim-separators = dim-separators ',' ;
delegate-type = type-name ;
variable-reference = expression ;
argument-list = argument ;
argument-list = argument-list ',' argument ;
argument = expression ;
argument = 'ref' variable-reference ;
argument = 'out' variable-reference ;
primary-expression = array-creation-expression ;
primary-expression = primary-no-array-creation-expression ;
primary-no-array-creation-expression = literal ;
primary-no-array-creation-expression = simple-name ;
primary-no-array-creation-expression = parenthesized-expression ;
primary-no-array-creation-expression = member-access ;
primary-no-array-creation-expression = invocation-expression ;
primary-no-array-creation-expression = element-access ;
primary-no-array-creation-expression = this-access ;
primary-no-array-creation-expression = base-access ;
primary-no-array-creation-expression = post-increment-expression ;
primary-no-array-creation-expression = post-decrement-expression ;
primary-no-array-creation-expression = object-creation-expression ;
primary-no-array-creation-expression = delegate-creation-expression ;
primary-no-array-creation-expression = typeof-expression ;
primary-no-array-creation-expression = checked-expression ;
primary-no-array-creation-expression = unchecked-expression ;
simple-name = IDENTIFIER ;
parenthesized-expression = '(' expression ')' ;
member-access = primary-expression '.' IDENTIFIER ;
member-access = predefined-type '.' IDENTIFIER ;
predefined-type = 'bool' ;
predefined-type = 'byte' ;
predefined-type = 'char' ;
predefined-type = 'decimal' ;
predefined-type = 'double' ;
predefined-type = 'float' ;
predefined-type = 'int' ;
predefined-type = 'long' ;
predefined-type = 'object' ;
predefined-type = 'sbyte' ;
predefined-type = 'short' ;
predefined-type = 'string' ;
predefined-type = 'uint' ;
predefined-type = 'ulong' ;
predefined-type = 'ushort' ;
invocation-expression = primary-expression '(' argument-list? ')' ;
element-access = primary-no-array-creation-expression '[' expression-list ']' ;
expression-list = expression ;
expression-list = expression-list ',' expression ;
this-access = 'this' ;
base-access = 'base' '.' IDENTIFIER ;
base-access = 'base' '[' expression-list ']' ;
post-increment-expression = primary-expression '++' ;
post-decrement-expression = primary-expression '--' ;
object-creation-expression = 'new' type '(' argument-list? ')' ;
array-creation-expression = 'new' non-array-type '[' expression-list ']' rank-specifiers? array-initializer? ;
array-creation-expression = 'new' array-type array-initializer ;
delegate-creation-expression = 'new' delegate-type '(' expression ')' ;
typeof-expression = 'typeof' '(' type ')' ;
typeof-expression = 'typeof' '(' 'void' ')' ;
checked-expression = 'checked' '(' expression ')' ;
unchecked-expression = 'unchecked' '(' expression ')' ;
unary-expression = primary-expression ;
unary-expression = '+' unary-expression ;
unary-expression = '-' unary-expression ;
unary-expression = '!' unary-expression ;
unary-expression = '~' unary-expression ;
unary-expression = '*' unary-expression ;
unary-expression = pre-increment-expression ;
unary-expression = pre-decrement-expression ;
unary-expression = cast-expression ;
pre-increment-expression = '++' unary-expression ;
pre-decrement-expression = '--' unary-expression ;
cast-expression = '(' type ')' unary-expression ;
multiplicative-expression = unary-expression ;
multiplicative-expression = multiplicative-expression '*' unary-expression ;
multiplicative-expression = multiplicative-expression '/' unary-expression ;
multiplicative-expression = multiplicative-expression '%' unary-expression ;
additive-expression = multiplicative-expression ;
additive-expression = additive-expression '+' multiplicative-expression ;
additive-expression = additive-expression '-' multiplicative-expression ;
shift-expression = additive-expression ;
shift-expression = shift-expression '<<' additive-expression ;
shift-expression = shift-expression '>>' additive-expression ;
relational-expression = shift-expression ;
relational-expression = relational-expression '<' shift-expression ;
relational-expression = relational-expression '>' shift-expression ;
relational-expression = relational-expression '<=' shift-expression ;
relational-expression = relational-expression '>=' shift-expression ;
relational-expression = relational-expression 'is' type ;
relational-expression = relational-expression 'as' type ;
equality-expression = relational-expression ;
equality-expression = equality-expression '==' relational-expression ;
equality-expression = equality-expression '!=' relational-expression ;
and-expression = equality-expression ;
and-expression = and-expression '&' equality-expression ;
exclusive-or-expression = and-expression ;
exclusive-or-expression = exclusive-or-expression '^' and-expression ;
inclusive-or-expression = exclusive-or-expression ;
inclusive-or-expression = inclusive-or-expression '|' exclusive-or-expression ;
conditional-and-expression = inclusive-or-expression ;
conditional-and-expression = conditional-and-expression '&&' inclusive-or-expression ;
conditional-or-expression = conditional-and-expression ;
conditional-or-expression = conditional-or-expression '||' conditional-and-expression ;
conditional-expression = conditional-or-expression ;
conditional-expression = conditional-or-expression '?' expression ':' expression ;
assignment = unary-expression assignment-operator expression ;
assignment-operator = '=' ;
assignment-operator = '+=' ;
assignment-operator = '-=' ;
assignment-operator = '*=' ;
assignment-operator = '/=' ;
assignment-operator = '%=' ;
assignment-operator = '&=' ;
assignment-operator = '|=' ;
assignment-operator = '^=' ;
assignment-operator = '<<=' ;
assignment-operator = '>>=' ;
expression = conditional-expression ;
expression = assignment ;
constant-expression = expression ;
boolean-expression = expression ;
statement = labeled-statement ;
statement = declaration-statement ;
statement = embedded-statement ;
embedded-statement = block ;
embedded-statement = empty-statement ;
embedded-statement = expression-statement ;
embedded-statement = selection-statement ;
embedded-statement = iteration-statement ;
embedded-statement = jump-statement ;
embedded-statement = try-statement ;
embedded-statement = checked-statement ;
embedded-statement = unchecked-statement ;
embedded-statement = lock-statement ;
embedded-statement = using-statement ;
block = '{' statement-list? '}' ;
statement-list = statement ;
statement-list = statement-list statement ;
empty-statement = ';' ;
labeled-statement = IDENTIFIER ':' statement ;
declaration-statement = local-variable-declaration ';' ;
declaration-statement = local-constant-declaration ';' ;
local-variable-declaration = type local-variable-declarators ;
local-variable-declarators = local-variable-declarator ;
local-variable-declarators = local-variable-declarators ',' local-variable-declarator ;
local-variable-declarator = IDENTIFIER ;
local-variable-declarator = IDENTIFIER '=' local-variable-initializer ;
local-variable-initializer = expression ;
local-variable-initializer = array-initializer ;
local-constant-declaration = 'const' type constant-declarators ;
constant-declarators = constant-declarator ;
constant-declarators = constant-declarators ',' constant-declarator ;
constant-declarator = IDENTIFIER '=' constant-expression ;
expression-statement = statement-expression ';' ;
statement-expression = invocation-expression ;
statement-expression = object-creation-expression ;
statement-expression = assignment ;
statement-expression = post-increment-expression ;
statement-expression = post-decrement-expression ;
statement-expression = pre-increment-expression ;
statement-expression = pre-decrement-expression ;
selection-statement = if-statement ;
selection-statement = switch-statement ;
if-statement = 'if' '(' boolean-expression ')' embedded-statement ;
if-statement = 'if' '(' boolean-expression ')' embedded-statement 'else' embedded-statement ;
switch-statement = 'switch' '(' expression ')' switch-block ;
switch-block = '{' switch-sections? '}' ;
switch-sections = switch-section ;
switch-sections = switch-sections switch-section ;
switch-section = switch-labels statement-list ;
switch-labels = switch-label ;
switch-labels = switch-labels switch-label ;
switch-label = 'case' constant-expression ':' ;
switch-label = 'default' ':' ;
iteration-statement = while-statement ;
iteration-statement = do-statement ;
iteration-statement = for-statement ;
iteration-statement = foreach-statement ;
while-statement = 'while' '(' boolean-expression ')' embedded-statement ;
do-statement = 'do' embedded-statement 'while' '(' boolean-expression ')' ';' ;
for-statement = 'for' '(' for-initializer? ';' for-condition? ';' for-iterator? ')' embedded-statement ;
for-initializer = local-variable-declaration ;
for-initializer = statement-expression-list ;
for-condition = boolean-expression ;
for-iterator = statement-expression-list ;
statement-expression-list = statement-expression ;
statement-expression-list = statement-expression-list ',' statement-expression ;
foreach-statement = 'foreach' '(' type IDENTIFIER 'in' expression ')' embedded-statement ;
jump-statement = break-statement ;
jump-statement = continue-statement ;
jump-statement = goto-statement ;
jump-statement = return-statement ;
jump-statement = throw-statement ;
break-statement = 'break' ';' ;
continue-statement = 'continue' ';' ;
goto-statement = 'goto' IDENTIFIER ';' ;
goto-statement = 'goto' 'case' constant-expression ';' ;
goto-statement = 'goto' 'default' ';' ;
return-statement = 'return' expression? ';' ;
throw-statement = 'throw' expression? ';' ;
try-statement = 'try' block catch-clauses ;
try-statement = 'try' block finally-clause ;
try-statement = 'try' block catch-clauses finally-clause ;
catch-clauses = specific-catch-clauses general-catch-clause? ;
catch-clauses = specific-catch-clauses? general-catch-clause ;
specific-catch-clauses = specific-catch-clause ;
specific-catch-clauses = specific-catch-clauses specific-catch-clause ;
specific-catch-clause = 'catch' '(' class-type IDENTIFIER? ')' block ;
general-catch-clause = 'catch' block ;
finally-clause = 'finally' block ;
checked-statement = 'checked' block ;
unchecked-statement = 'unchecked' block ;
lock-statement = 'lock' '(' expression ')' embedded-statement ;
using-statement = 'using' '(' resource-acquisition ')' embedded-statement ;
resource-acquisition = local-variable-declaration ;
resource-acquisition = expression ;
compilation-unit = using-directives? global-attributes? namespace-member-declarations? ;
namespace-declaration = 'namespace' qualified-identifier namespace-body ';'? ;
qualified-identifier = IDENTIFIER ;
qualified-identifier = qualified-identifier '.' IDENTIFIER ;
namespace-body = '{' using-directives? namespace-member-declarations? '}' ;
using-directives = using-directive ;
using-directives = using-directives using-directive ;
using-directive = using-alias-directive ;
using-directive = using-namespace-directive ;
using-alias-directive = 'using' IDENTIFIER '=' namespace-or-type-name ';' ;
using-namespace-directive = 'using' namespace-name ';' ;
namespace-member-declarations = namespace-member-declaration ;
namespace-member-declarations = namespace-member-declarations namespace-member-declaration ;
namespace-member-declaration = namespace-declaration ;
namespace-member-declaration = type-declaration ;
type-declaration = class-declaration ;
type-declaration = struct-declaration ;
type-declaration = interface-declaration ;
type-declaration = enum-declaration ;
type-declaration = delegate-declaration ;
class-declaration = attributes? class-modifiers? 'class' IDENTIFIER class-base? class-body ';'? ;
class-modifiers = class-modifier ;
class-modifiers = class-modifiers class-modifier ;
class-modifier = 'new' ;
class-modifier = 'public' ;
class-modifier = 'protected' ;
class-modifier = 'internal' ;
class-modifier = 'private' ;
class-modifier = 'abstract' ;
class-modifier = 'sealed' ;
class-base = ':' class-type ;
class-base = ':' interface-type-list ;
class-base = ':' class-type ',' interface-type-list ;
interface-type-list = interface-type ;
interface-type-list = interface-type-list ',' interface-type ;
class-body = '{' class-member-declarations? '}' ;
class-member-declarations = class-member-declaration ;
class-member-declarations = class-member-declarations class-member-declaration ;
class-member-declaration = constant-declaration ;
class-member-declaration = field-declaration ;
class-member-declaration = method-declaration ;
class-member-declaration = property-declaration ;
class-member-declaration = event-declaration ;
class-member-declaration = indexer-declaration ;
class-member-declaration = operator-declaration ;
class-member-declaration = constructor-declaration ;
class-member-declaration = destructor-declaration ;
class-member-declaration = static-constructor-declaration ;
class-member-declaration = type-declaration ;
constant-declaration = attributes? constant-modifiers? 'const' type constant-declarators ';' ;
constant-modifiers = constant-modifier ;
constant-modifiers = constant-modifiers constant-modifier ;
constant-modifier = 'new' ;
constant-modifier = 'public' ;
constant-modifier = 'protected' ;
constant-modifier = 'internal' ;
constant-modifier = 'private' ;
field-declaration = attributes? field-modifiers? type variable-declarators ';' ;
field-modifiers = field-modifier ;
field-modifiers = field-modifiers field-modifier ;
field-modifier = 'new' ;
field-modifier = 'public' ;
field-modifier = 'protected' ;
field-modifier = 'internal' ;
field-modifier = 'private' ;
field-modifier = 'static' ;
field-modifier = 'readonly' ;
field-modifier = 'volatile' ;
variable-declarators = variable-declarator ;
variable-declarators = variable-declarators ',' variable-declarator ;
variable-declarator = IDENTIFIER ;
variable-declarator = IDENTIFIER '=' variable-initializer ;
variable-initializer = expression ;
variable-initializer = array-initializer ;
method-declaration = method-header method-body ;
method-header = attributes? method-modifiers? return-type member-name '(' formal-parameter-list? ')' ;
method-modifiers = method-modifier ;
method-modifiers = method-modifiers method-modifier ;
method-modifier = 'new' ;
method-modifier = 'public' ;
method-modifier = 'protected' ;
method-modifier = 'internal' ;
method-modifier = 'private' ;
method-modifier = 'static' ;
method-modifier = 'virtual' ;
method-modifier = 'sealed' ;
method-modifier = 'override' ;
method-modifier = 'abstract' ;
method-modifier = 'extern' ;
return-type = type ;
return-type = 'void' ;
member-name = IDENTIFIER ;
member-name = interface-type '.' IDENTIFIER ;
method-body = block ;
method-body = ';' ;
formal-parameter-list = fixed-parameters ;
formal-parameter-list = fixed-parameters ',' parameter-array ;
formal-parameter-list = parameter-array ;
fixed-parameters = fixed-parameter ;
fixed-parameters = fixed-parameters ',' fixed-parameter ;
fixed-parameter = attributes? parameter-modifier? type IDENTIFIER ;
parameter-modifier = 'ref' ;
parameter-modifier = 'out' ;
parameter-array = attributes? 'params' array-type IDENTIFIER ;
property-declaration = attributes? property-modifiers? type member-name '{' accessor-declarations '}' ;
property-modifiers = property-modifier ;
property-modifiers = property-modifiers property-modifier ;
property-modifier = 'new' ;
property-modifier = 'public' ;
property-modifier = 'protected' ;
property-modifier = 'internal' ;
property-modifier = 'private' ;
property-modifier = 'static' ;
property-modifier = 'virtual' ;
property-modifier = 'sealed' ;
property-modifier = 'override' ;
property-modifier = 'abstract' ;
property-modifier = 'extern' ;
accessor-declarations = get-accessor-declaration set-accessor-declaration? ;
accessor-declarations = set-accessor-declaration get-accessor-declaration? ;
get-accessor-declaration = attributes? 'get' accessor-body ;
set-accessor-declaration = attributes? 'set' accessor-body ;
accessor-body = block ;
accessor-body = ';' ;
event-declaration = attributes? event-modifiers? 'event' type variable-declarators ';' ;
event-declaration = attributes? event-modifiers? 'event' type member-name '{' event-accessor-declarations ;
event-declaration = '}' ;
event-modifiers = event-modifier ;
event-modifiers = event-modifiers event-modifier ;
event-modifier = 'new' ;
event-modifier = 'public' ;
event-modifier = 'protected' ;
event-modifier = 'internal' ;
event-modifier = 'private' ;
event-modifier = 'static' ;
event-modifier = 'virtual' ;
event-modifier = 'sealed' ;
event-modifier = 'override' ;
event-modifier = 'abstract' ;
event-modifier = 'extern' ;
event-accessor-declarations = add-accessor-declaration remove-accessor-declaration ;
event-accessor-declarations = remove-accessor-declaration add-accessor-declaration ;
add-accessor-declaration = attributes? 'add' block ;
remove-accessor-declaration = attributes? 'remove' block ;
indexer-declaration = attributes? indexer-modifiers? indexer-declarator '{' accessor-declarations '}' ;
indexer-modifiers = indexer-modifier ;
indexer-modifiers = indexer-modifiers indexer-modifier ;
indexer-modifier = 'new' ;
indexer-modifier = 'public' ;
indexer-modifier = 'protected' ;
indexer-modifier = 'internal' ;
indexer-modifier = 'private' ;
indexer-modifier = 'virtual' ;
indexer-modifier = 'sealed' ;
indexer-modifier = 'override' ;
indexer-modifier = 'abstract' ;
indexer-modifier = 'extern' ;
indexer-declarator = type 'this' '[' formal-parameter-list ']' ;
indexer-declarator = type interface-type '.' 'this' '[' formal-parameter-list ']' ;
operator-declaration = attributes? operator-modifiers operator-declarator operator-body ;
operator-modifiers = operator-modifier ;
operator-modifiers = operator-modifiers operator-modifier ;
operator-modifier = 'public' ;
operator-modifier = 'static' ;
operator-modifier = 'extern' ;
operator-declarator = unary-operator-declarator ;
operator-declarator = binary-operator-declarator ;
operator-declarator = conversion-operator-declarator ;
unary-operator-declarator = type 'operator' overloadable-unary-operator '(' type IDENTIFIER ')' ;
overloadable-unary-operator = '+' ;
overloadable-unary-operator = '-' ;
overloadable-unary-operator = '!' ;
overloadable-unary-operator = '~' ;
overloadable-unary-operator = '++' ;
overloadable-unary-operator = '--' ;
overloadable-unary-operator = 'true' ;
overloadable-unary-operator = 'false' ;
binary-operator-declarator = type 'operator' overloadable-binary-operator '(' type IDENTIFIER ',' type IDENTIFIER ')' ;
overloadable-binary-operator = '+' ;
overloadable-binary-operator = '-' ;
overloadable-binary-operator = '*' ;
overloadable-binary-operator = '/' ;
overloadable-binary-operator = '%' ;
overloadable-binary-operator = '&' ;
overloadable-binary-operator = '|' ;
overloadable-binary-operator = '^' ;
overloadable-binary-operator = '<<' ;
overloadable-binary-operator = '>>' ;
overloadable-binary-operator = '==' ;
overloadable-binary-operator = '!=' ;
overloadable-binary-operator = '>' ;
overloadable-binary-operator = '<' ;
overloadable-binary-operator = '>=' ;
overloadable-binary-operator = '<=' ;
conversion-operator-declarator = 'implicit' 'operator' type '(' type IDENTIFIER ')' ;
conversion-operator-declarator = 'explicit' 'operator' type '(' type IDENTIFIER ')' ;
operator-body = block ;
operator-body = ';' ;
constructor-declaration = attributes? constructor-modifiers? constructor-declarator constructor-body ;
constructor-modifiers = constructor-modifier ;
constructor-modifiers = constructor-modifiers constructor-modifier ;
constructor-modifier = 'public' ;
constructor-modifier = 'protected' ;
constructor-modifier = 'internal' ;
constructor-modifier = 'private' ;
constructor-modifier = 'extern' ;
constructor-declarator = IDENTIFIER '(' formal-parameter-list? ')' constructor-initializer? ;
constructor-initializer = ':' 'base' '(' argument-list? ')' ;
constructor-initializer = ':' 'this' '(' argument-list? ')' ;
constructor-body = block ;
constructor-body = ';' ;
static-constructor-declaration = attributes? static-constructor-modifiers IDENTIFIER '(' ')' static-constructor-body ;
static-constructor-modifiers = 'extern'? 'static' ;
static-constructor-modifiers = 'static' 'extern'? ;
static-constructor-body = block ;
static-constructor-body = ';' ;
destructor-declaration = attributes? 'extern'? '~' IDENTIFIER '(' ')' destructor-body ;
destructor-body = block ;
destructor-body = ';' ;
struct-declaration = attributes? struct-modifiers? 'struct' IDENTIFIER struct-interfaces? struct-body ';'? ;
struct-modifiers = struct-modifier ;
struct-modifiers = struct-modifiers struct-modifier ;
struct-modifier = 'new' ;
struct-modifier = 'public' ;
struct-modifier = 'protected' ;
struct-modifier = 'internal' ;
struct-modifier = 'private' ;
struct-interfaces = ':' interface-type-list ;
struct-body = '{' struct-member-declarations? '}' ;
struct-member-declarations = struct-member-declaration ;
struct-member-declarations = struct-member-declarations struct-member-declaration ;
struct-member-declaration = constant-declaration ;
struct-member-declaration = field-declaration ;
struct-member-declaration = method-declaration ;
struct-member-declaration = property-declaration ;
struct-member-declaration = event-declaration ;
struct-member-declaration = indexer-declaration ;
struct-member-declaration = operator-declaration ;
struct-member-declaration = constructor-declaration ;
struct-member-declaration = static-constructor-declaration ;
struct-member-declaration = type-declaration ;
array-initializer = '{' variable-initializer-list? '}' ;
array-initializer = '{' variable-initializer-list ',' '}' ;
variable-initializer-list = variable-initializer ;
variable-initializer-list = variable-initializer-list ',' variable-initializer ;
interface-declaration = attributes? interface-modifiers? 'interface' IDENTIFIER interface-base? interface-body ';'? ;
interface-modifiers = interface-modifier ;
interface-modifiers = interface-modifiers interface-modifier ;
interface-modifier = 'new' ;
interface-modifier = 'public' ;
interface-modifier = 'protected' ;
interface-modifier = 'internal' ;
interface-modifier = 'private' ;
interface-base = ':' interface-type-list ;
interface-body = '{' interface-member-declarations? '}' ;
interface-member-declarations = interface-member-declaration ;
interface-member-declarations = interface-member-declarations interface-member-declaration ;
interface-member-declaration = interface-method-declaration ;
interface-member-declaration = interface-property-declaration ;
interface-member-declaration = interface-event-declaration ;
interface-member-declaration = interface-indexer-declaration ;
interface-method-declaration = attributes? 'new'? return-type IDENTIFIER '(' formal-parameter-list? ')' ';' ;
interface-property-declaration = attributes? 'new'? type IDENTIFIER '{' interface-accessors '}' ;
interface-accessors = attributes? 'get' ';' ;
interface-accessors = attributes? 'set' ';' ;
interface-accessors = attributes? 'get' ';' attributes? 'set' ';' ;
interface-accessors = attributes? 'set' ';' attributes? 'get' ';' ;
interface-event-declaration = attributes? 'new'? 'event' type IDENTIFIER ';' ;
interface-indexer-declaration = attributes? 'new'? type 'this' '[' formal-parameter-list ']' '{' interface-accessors '}' ;
enum-declaration = attributes? enum-modifiers? 'enum' IDENTIFIER enum-base? enum-body ';'? ;
enum-base = ':' integral-type ;
enum-body = '{' enum-member-declarations? '}' ;
enum-body = '{' enum-member-declarations ',' '}' ;
enum-modifiers = enum-modifier ;
enum-modifiers = enum-modifiers enum-modifier ;
enum-modifier = 'new' ;
enum-modifier = 'public' ;
enum-modifier = 'protected' ;
enum-modifier = 'internal' ;
enum-modifier = 'private' ;
enum-member-declarations = enum-member-declaration ;
enum-member-declarations = enum-member-declarations ',' enum-member-declaration ;
enum-member-declaration = attributes? IDENTIFIER ;
enum-member-declaration = attributes? IDENTIFIER '=' constant-expression ;
delegate-declaration = attributes? delegate-modifiers? 'delegate' type IDENTIFIER '(' formal-parameter-list? ')' ';' ;
delegate-modifiers = delegate-modifier ;
delegate-modifiers = delegate-modifiers delegate-modifier ;
delegate-modifier = 'new' ;
delegate-modifier = 'public' ;
delegate-modifier = 'protected' ;
delegate-modifier = 'internal' ;
delegate-modifier = 'private' ;
global-attributes = global-attribute-sections ;
global-attribute-sections = global-attribute-section ;
global-attribute-sections = global-attribute-sections global-attribute-section ;
global-attribute-section = '[' global-attribute-target-specifier attribute-list ']' ;
global-attribute-section = '[' global-attribute-target-specifier attribute-list ',' ']' ;
global-attribute-target-specifier = global-attribute-target ':' ;
global-attribute-target = 'assembly' ;
attributes = attribute-sections ;
attribute-sections = attribute-section ;
attribute-sections = attribute-sections attribute-section ;
attribute-section = '[' attribute-target-specifier? attribute-list ']' ;
attribute-section = '[' attribute-target-specifier? attribute-list ',' ']' ;
attribute-target-specifier = attribute-target ':' ;
attribute-target = 'field' ;
attribute-target = 'event' ;
attribute-target = 'method' ;
attribute-target = 'module' ;
attribute-target = 'param' ;
attribute-target = 'property' ;
attribute-target = 'return' ;
attribute-target = type ;
attribute-list = attribute ;
attribute-list = attribute-list ',' attribute ;
attribute = attribute-name attribute-arguments? ;
attribute-name = type-name ;
attribute-arguments = '(' positional-argument-list? ')' ;
attribute-arguments = '(' positional-argument-list ',' named-argument-list ')' ;
attribute-arguments = '(' named-argument-list ')' ;
positional-argument-list = positional-argument ;
positional-argument-list = positional-argument-list ',' positional-argument ;
positional-argument = attribute-argument-expression ;
named-argument-list = named-argument ;
named-argument-list = named-argument-list ',' named-argument ;
named-argument = IDENTIFIER '=' attribute-argument-expression ;
attribute-argument-expression = expression ;
