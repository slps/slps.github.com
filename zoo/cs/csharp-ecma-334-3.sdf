module Main

exports
  sorts
        Compilation-unit Namespace-name Type-name Namespace-or-type-name Type Value-type Struct-type Simple-type Numeric-type Integral-type Floating-point-type Enum-type Nullable-type Non-nullable-value-type Reference-type Class-type Interface-type Array-type Non-array-type Rank-specifiers Rank-specifier Dim-separators Delegate-type Variable-reference Argument-list Argument Primary-expression Primary-no-array-creation-expression Simple-name Parenthesized-expression Member-access Predefined-type Invocation-expression Element-access Expression-list This-access Base-access Post-increment-expression Post-decrement-expression Object-creation-expression Array-creation-expression Delegate-creation-expression Typeof-expression Unbound-type-name Generic-dimension-specifier Commas Checked-expression Unchecked-expression Default-value-expression Anonymous-method-expression Anonymous-method-signature Anonymous-method-parameter-list Anonymous-method-parameter Unary-expression Pre-increment-expression Pre-decrement-expression Cast-expression Multiplicative-expression Additive-expression Shift-expression Relational-expression Equality-expression And-expression Exclusive-or-expression Inclusive-or-expression Conditional-and-expression Conditional-or-expression Null-coalescing-expression Conditional-expression Assignment Assignment-operator Expression Constant-expression Boolean-expression Statement Embedded-statement Block Statement-list Empty-statement Labeled-statement Declaration-statement Local-variable-declaration Local-variable-declarators Local-variable-declarator Local-variable-initializer Local-constant-declaration Constant-declarators Constant-declarator Expression-statement Statement-expression Selection-statement If-statement Switch-statement Switch-block Switch-sections Switch-section Switch-labels Switch-label Iteration-statement While-statement Do-statement For-statement For-initializer For-condition For-iterator Statement-expression-list Foreach-statement Jump-statement Break-statement Continue-statement Goto-statement Return-statement Throw-statement Try-statement Catch-clauses Specific-catch-clauses Specific-catch-clause General-catch-clause Finally-clause Checked-statement Unchecked-statement Lock-statement Using-statement Resource-acquisition Yield-statement Namespace-declaration Qualified-identifier Namespace-body Extern-alias-directives Extern-alias-directive Using-directives Using-directive Using-alias-directive Using-namespace-directive Namespace-member-declarations Namespace-member-declaration Type-declaration Qualified-alias-member Class-declaration Class-modifiers Class-modifier Class-base Interface-type-list Class-body Class-member-declarations Class-member-declaration Constant-declaration Constant-modifiers Constant-modifier Field-declaration Field-modifiers Field-modifier Variable-declarators Variable-declarator Variable-initializer Method-declaration Method-header Method-modifiers Method-modifier Return-type Member-name Method-body Formal-parameter-list Fixed-parameters Fixed-parameter Parameter-modifier Parameter-array Property-declaration Property-modifiers Property-modifier Accessor-declarations Get-accessor-declaration Set-accessor-declaration Accessor-modifier Accessor-body Event-declaration Event-modifiers Event-modifier Event-accessor-declarations Add-accessor-declaration Remove-accessor-declaration Indexer-declaration Indexer-modifiers Indexer-modifier Indexer-declarator Operator-declaration Operator-modifiers Operator-modifier Operator-declarator Unary-operator-declarator Overloadable-unary-operator Binary-operator-declarator Overloadable-binary-operator Conversion-operator-declarator Operator-body Constructor-declaration Constructor-modifiers Constructor-modifier Constructor-declarator Constructor-initializer Constructor-body Static-constructor-declaration Static-constructor-modifiers Static-constructor-body Finalizer-declaration Finalizer-body Struct-declaration Struct-modifiers Struct-modifier Struct-interfaces Struct-body Struct-member-declarations Struct-member-declaration Array-initializer Variable-initializer-list Interface-declaration Interface-modifiers Interface-modifier Interface-base Interface-body Interface-member-declarations Interface-member-declaration Interface-method-declaration Interface-property-declaration Interface-accessors Interface-event-declaration Interface-indexer-declaration Enum-declaration Enum-base Enum-body Enum-modifiers Enum-modifier Enum-member-declarations Enum-member-declaration Delegate-declaration Delegate-modifiers Delegate-modifier Global-attributes Global-attribute-sections Global-attribute-section Global-attribute-target-specifier Global-attribute-target Attributes Attribute-sections Attribute-section Attribute-target-specifier Attribute-target Attribute-list Attribute Attribute-name Attribute-arguments Positional-argument-list Positional-argument Named-argument-list Named-argument Attribute-argument-expression Type-parameter-list Type-parameters Type-parameter Type-argument-list Type-arguments Type-argument Type-parameter-constraints-clauses Type-parameter-constraints-clause Type-parameter-constraints Primary-constraint Secondary-constraints Constructor-constraint Keyword 
  context-free syntax
        Extern-alias-directives? Using-directives? Global-attributes? Namespace-member-declarations? -> Compilation-unit

        Namespace-or-type-name -> Namespace-name

        Namespace-or-type-name -> Type-name

        Identifier Type-argument-list? -> Namespace-or-type-name
        Qualified-alias-member -> Namespace-or-type-name
        Namespace-or-type-name "." Identifier Type-argument-list? -> Namespace-or-type-name

        Value-type -> Type
        Reference-type -> Type
        Type-parameter -> Type

        Struct-type -> Value-type
        Enum-type -> Value-type

        Type-name -> Struct-type
        Simple-type -> Struct-type
        Nullable-type -> Struct-type

        Numeric-type -> Simple-type
        "bool" -> Simple-type

        Integral-type -> Numeric-type
        Floating-point-type -> Numeric-type
        "decimal" -> Numeric-type

        "sbyte" -> Integral-type
        "byte" -> Integral-type
        "short" -> Integral-type
        "ushort" -> Integral-type
        "int" -> Integral-type
        "uint" -> Integral-type
        "long" -> Integral-type
        "ulong" -> Integral-type
        "char" -> Integral-type

        "float" -> Floating-point-type
        "double" -> Floating-point-type

        Type-name -> Enum-type

        Non-nullable-value-type "?" -> Nullable-type

        Enum-type -> Non-nullable-value-type
        Type-name -> Non-nullable-value-type
        Simple-type -> Non-nullable-value-type

        Class-type -> Reference-type
        Interface-type -> Reference-type
        Array-type -> Reference-type
        Delegate-type -> Reference-type

        Type-name -> Class-type
        "object" -> Class-type
        "string" -> Class-type

        Type-name -> Interface-type

        Non-array-type Rank-specifiers -> Array-type

        Value-type -> Non-array-type
        Class-type -> Non-array-type
        Interface-type -> Non-array-type
        Delegate-type -> Non-array-type
        Type-parameter -> Non-array-type

        Rank-specifier -> Rank-specifiers
        Rank-specifiers Rank-specifier -> Rank-specifiers

        "[" Dim-separators? "]" -> Rank-specifier

        "," -> Dim-separators
        Dim-separators "," -> Dim-separators

        Type-name -> Delegate-type

        Expression -> Variable-reference

        Argument -> Argument-list
        Argument-list "," Argument -> Argument-list

        Expression -> Argument
        "ref" Variable-reference -> Argument
        "out" Variable-reference -> Argument

        Array-creation-expression -> Primary-expression
        Primary-no-array-creation-expression -> Primary-expression

        Literal -> Primary-no-array-creation-expression
        Simple-name -> Primary-no-array-creation-expression
        Parenthesized-expression -> Primary-no-array-creation-expression
        Member-access -> Primary-no-array-creation-expression
        Invocation-expression -> Primary-no-array-creation-expression
        Element-access -> Primary-no-array-creation-expression
        This-access -> Primary-no-array-creation-expression
        Base-access -> Primary-no-array-creation-expression
        Post-increment-expression -> Primary-no-array-creation-expression
        Post-decrement-expression -> Primary-no-array-creation-expression
        Object-creation-expression -> Primary-no-array-creation-expression
        Delegate-creation-expression -> Primary-no-array-creation-expression
        Typeof-expression -> Primary-no-array-creation-expression
        Checked-expression -> Primary-no-array-creation-expression
        Unchecked-expression -> Primary-no-array-creation-expression
        Default-value-expression -> Primary-no-array-creation-expression
        Anonymous-method-expression -> Primary-no-array-creation-expression

        Identifier Type-argument-list? -> Simple-name

        "(" Expression ")" -> Parenthesized-expression

        Primary-expression "." Identifier Type-argument-list? -> Member-access
        Predefined-type "." Identifier Type-argument-list? -> Member-access
        Qualified-alias-member "." Identifier Type-argument-list? -> Member-access

        "bool" -> Predefined-type
        "byte" -> Predefined-type
        "char" -> Predefined-type
        "decimal" -> Predefined-type
        "double" -> Predefined-type
        "float" -> Predefined-type
        "int" -> Predefined-type
        "long" -> Predefined-type
        "object" -> Predefined-type
        "sbyte" -> Predefined-type
        "short" -> Predefined-type
        "string" -> Predefined-type
        "uint" -> Predefined-type
        "ulong" -> Predefined-type
        "ushort" -> Predefined-type

        Primary-expression "(" Argument-list? ")" -> Invocation-expression

        Primary-no-array-creation-expression "[" Expression-list "]" -> Element-access

        Expression -> Expression-list
        Expression-list "," Expression -> Expression-list

        "this" -> This-access

        "base" "." Identifier Type-argument-list? -> Base-access
        "base" "[" Expression-list "]" -> Base-access

        Primary-expression "++" -> Post-increment-expression

        Primary-expression "--" -> Post-decrement-expression

        "new" Type "(" Argument-list? ")" -> Object-creation-expression

        "new" Non-array-type "[" Expression-list "]" Rank-specifiers? Array-initializer? -> Array-creation-expression
        "new" Array-type Array-initializer -> Array-creation-expression

        "new" Delegate-type "(" Expression ")" -> Delegate-creation-expression

        "typeof" "(" Type ")" -> Typeof-expression
        "typeof" "(" Unbound-type-name ")" -> Typeof-expression
        "typeof" "(" "void" ")" -> Typeof-expression

        Identifier Generic-dimension-specifier? -> Unbound-type-name
        Identifier "::" Identifier Generic-dimension-specifier? -> Unbound-type-name
        Unbound-type-name "." Identifier Generic-dimension-specifier? -> Unbound-type-name

        "<" Commas? ">" -> Generic-dimension-specifier

        "," -> Commas
        Commas "," -> Commas

        "checked" "(" Expression ")" -> Checked-expression

        "unchecked" "(" Expression ")" -> Unchecked-expression

        "default" "(" Type ")" -> Default-value-expression

        "delegate" Anonymous-method-signature? Block -> Anonymous-method-expression

        "(" Anonymous-method-parameter-list? ")" -> Anonymous-method-signature

        Anonymous-method-parameter -> Anonymous-method-parameter-list
        Anonymous-method-parameter-list "," Anonymous-method-parameter -> Anonymous-method-parameter-list

        Parameter-modifier? Type Identifier -> Anonymous-method-parameter

        Primary-expression -> Unary-expression
        "+" Unary-expression -> Unary-expression
        "-" Unary-expression -> Unary-expression
        "!" Unary-expression -> Unary-expression
        "~" Unary-expression -> Unary-expression
        Pre-increment-expression -> Unary-expression
        Pre-decrement-expression -> Unary-expression
        Cast-expression -> Unary-expression

        "++" Unary-expression -> Pre-increment-expression

        "--" Unary-expression -> Pre-decrement-expression

        "(" Type ")" Unary-expression -> Cast-expression

        Unary-expression -> Multiplicative-expression
        Multiplicative-expression "*" Unary-expression -> Multiplicative-expression
        Multiplicative-expression "/" Unary-expression -> Multiplicative-expression
        Multiplicative-expression "%" Unary-expression -> Multiplicative-expression

        Multiplicative-expression -> Additive-expression
        Additive-expression "+" Multiplicative-expression -> Additive-expression
        Additive-expression "-" Multiplicative-expression -> Additive-expression

        Additive-expression -> Shift-expression
        Shift-expression "<<" Additive-expression -> Shift-expression
        Shift-expression Right-shift Additive-expression -> Shift-expression

        Shift-expression -> Relational-expression
        Relational-expression "<" Shift-expression -> Relational-expression
        Relational-expression ">" Shift-expression -> Relational-expression
        Relational-expression "<=" Shift-expression -> Relational-expression
        Relational-expression ">=" Shift-expression -> Relational-expression
        Relational-expression "is" Type -> Relational-expression
        Relational-expression "as" Type -> Relational-expression

        Relational-expression -> Equality-expression
        Equality-expression "==" Relational-expression -> Equality-expression
        Equality-expression "!=" Relational-expression -> Equality-expression

        Equality-expression -> And-expression
        And-expression "&" Equality-expression -> And-expression

        And-expression -> Exclusive-or-expression
        Exclusive-or-expression "^" And-expression -> Exclusive-or-expression

        Exclusive-or-expression -> Inclusive-or-expression
        Inclusive-or-expression "|" Exclusive-or-expression -> Inclusive-or-expression

        Inclusive-or-expression -> Conditional-and-expression
        Conditional-and-expression "&&" Inclusive-or-expression -> Conditional-and-expression

        Conditional-and-expression -> Conditional-or-expression
        Conditional-or-expression "||" Conditional-and-expression -> Conditional-or-expression

        Conditional-or-expression -> Null-coalescing-expression
        Conditional-or-expression "??" Null-coalescing-expression -> Null-coalescing-expression

        Null-coalescing-expression -> Conditional-expression
        Null-coalescing-expression "?" Expression ":" Expression -> Conditional-expression

        Unary-expression Assignment-operator Expression -> Assignment

        "=" -> Assignment-operator
        "+=" -> Assignment-operator
        "-=" -> Assignment-operator
        "*=" -> Assignment-operator
        "/=" -> Assignment-operator
        "%=" -> Assignment-operator
        "&=" -> Assignment-operator
        "|=" -> Assignment-operator
        "^=" -> Assignment-operator
        "<<=" -> Assignment-operator
        Right-shift-assignment -> Assignment-operator

        Conditional-expression -> Expression
        Assignment -> Expression

        Expression -> Constant-expression

        Expression -> Boolean-expression

        Labeled-statement -> Statement
        Declaration-statement -> Statement
        Embedded-statement -> Statement

        Block -> Embedded-statement
        Empty-statement -> Embedded-statement
        Expression-statement -> Embedded-statement
        Selection-statement -> Embedded-statement
        Iteration-statement -> Embedded-statement
        Jump-statement -> Embedded-statement
        Try-statement -> Embedded-statement
        Checked-statement -> Embedded-statement
        Unchecked-statement -> Embedded-statement
        Lock-statement -> Embedded-statement
        Using-statement -> Embedded-statement
        Yield-statement -> Embedded-statement

        "{" Statement-list? "}" -> Block

        Statement -> Statement-list
        Statement-list Statement -> Statement-list

        ";" -> Empty-statement

        Identifier ":" Statement -> Labeled-statement

        Local-variable-declaration ";" -> Declaration-statement
        Local-constant-declaration ";" -> Declaration-statement

        Type Local-variable-declarators -> Local-variable-declaration

        Local-variable-declarator -> Local-variable-declarators
        Local-variable-declarators "," Local-variable-declarator -> Local-variable-declarators

        Identifier -> Local-variable-declarator
        Identifier "=" Local-variable-initializer -> Local-variable-declarator

        Expression -> Local-variable-initializer
        Array-initializer -> Local-variable-initializer

        "const" Type Constant-declarators -> Local-constant-declaration

        Constant-declarator -> Constant-declarators
        Constant-declarators "," Constant-declarator -> Constant-declarators

        Identifier "=" Constant-expression -> Constant-declarator

        Statement-expression ";" -> Expression-statement

        Invocation-expression -> Statement-expression
        Object-creation-expression -> Statement-expression
        Assignment -> Statement-expression
        Post-increment-expression -> Statement-expression
        Post-decrement-expression -> Statement-expression
        Pre-increment-expression -> Statement-expression
        Pre-decrement-expression -> Statement-expression

        If-statement -> Selection-statement
        Switch-statement -> Selection-statement

        "if" "(" Boolean-expression ")" Embedded-statement -> If-statement
        "if" "(" Boolean-expression ")" Embedded-statement "else" Embedded-statement -> If-statement

        "switch" "(" Expression ")" Switch-block -> Switch-statement

        "{" Switch-sections? "}" -> Switch-block

        Switch-section -> Switch-sections
        Switch-sections Switch-section -> Switch-sections

        Switch-labels Statement-list -> Switch-section

        Switch-label -> Switch-labels
        Switch-labels Switch-label -> Switch-labels

        "case" Constant-expression ":" -> Switch-label
        "default" ":" -> Switch-label

        While-statement -> Iteration-statement
        Do-statement -> Iteration-statement
        For-statement -> Iteration-statement
        Foreach-statement -> Iteration-statement

        "while" "(" Boolean-expression ")" Embedded-statement -> While-statement

        "do" Embedded-statement "while" "(" Boolean-expression ")" ";" -> Do-statement

        "for" "(" For-initializer? ";" For-condition? ";" For-iterator? ")" Embedded-statement -> For-statement

        Local-variable-declaration -> For-initializer
        Statement-expression-list -> For-initializer

        Boolean-expression -> For-condition

        Statement-expression-list -> For-iterator

        Statement-expression -> Statement-expression-list
        Statement-expression-list "," Statement-expression -> Statement-expression-list

        "foreach" "(" Type Identifier "in" Expression ")" Embedded-statement -> Foreach-statement

        Break-statement -> Jump-statement
        Continue-statement -> Jump-statement
        Goto-statement -> Jump-statement
        Return-statement -> Jump-statement
        Throw-statement -> Jump-statement

        "break" ";" -> Break-statement

        "continue" ";" -> Continue-statement

        "goto" Identifier ";" -> Goto-statement
        "goto" "case" Constant-expression ";" -> Goto-statement
        "goto" "default" ";" -> Goto-statement

        "return" Expression? ";" -> Return-statement

        "throw" Expression? ";" -> Throw-statement

        "try" Block Catch-clauses -> Try-statement
        "try" Block Catch-clauses? Finally-clause -> Try-statement

        Specific-catch-clauses -> Catch-clauses
        Specific-catch-clauses? General-catch-clause -> Catch-clauses

        Specific-catch-clause -> Specific-catch-clauses
        Specific-catch-clauses Specific-catch-clause -> Specific-catch-clauses

        "catch" "(" Class-type Identifier? ")" Block -> Specific-catch-clause

        "catch" Block -> General-catch-clause

        "finally" Block -> Finally-clause

        "checked" Block -> Checked-statement

        "unchecked" Block -> Unchecked-statement

        "lock" "(" Expression ")" Embedded-statement -> Lock-statement

        "using" "(" Resource-acquisition ")" Embedded-statement -> Using-statement

        Local-variable-declaration -> Resource-acquisition
        Expression -> Resource-acquisition

        "yield" "return" Expression ";" -> Yield-statement
        "yield" "break" ";" -> Yield-statement

        "namespace" Qualified-identifier Namespace-body ";"? -> Namespace-declaration

        Identifier -> Qualified-identifier
        Qualified-identifier "." Identifier -> Qualified-identifier

        "{" Extern-alias-directives? Using-directives? Namespace-member-declarations? "}" -> Namespace-body

        Extern-alias-directive -> Extern-alias-directives
        Extern-alias-directives Extern-alias-directive -> Extern-alias-directives

        "extern" "alias" Identifier ";" -> Extern-alias-directive

        Using-directive -> Using-directives
        Using-directives Using-directive -> Using-directives

        Using-alias-directive -> Using-directive
        Using-namespace-directive -> Using-directive

        "using" Identifier "=" Namespace-or-type-name ";" -> Using-alias-directive

        "using" Namespace-name ";" -> Using-namespace-directive

        Namespace-member-declaration -> Namespace-member-declarations
        Namespace-member-declarations Namespace-member-declaration -> Namespace-member-declarations

        Namespace-declaration -> Namespace-member-declaration
        Type-declaration -> Namespace-member-declaration

        Class-declaration -> Type-declaration
        Struct-declaration -> Type-declaration
        Interface-declaration -> Type-declaration
        Enum-declaration -> Type-declaration
        Delegate-declaration -> Type-declaration

        Identifier "::" Identifier Type-argument-list? -> Qualified-alias-member

        Attributes? Class-modifiers? "partial"? "class" Identifier Type-parameter-list? Class-base? Type-parameter-constraints-clauses? Class-body ";"? -> Class-declaration

        Class-modifier -> Class-modifiers
        Class-modifiers Class-modifier -> Class-modifiers

        "new" -> Class-modifier
        "public" -> Class-modifier
        "protected" -> Class-modifier
        "internal" -> Class-modifier
        "private" -> Class-modifier
        "abstract" -> Class-modifier
        "sealed" -> Class-modifier
        "static" -> Class-modifier

        ":" Class-type -> Class-base
        ":" Interface-type-list -> Class-base
        ":" Class-type "," Interface-type-list -> Class-base

        Interface-type -> Interface-type-list
        Interface-type-list "," Interface-type -> Interface-type-list

        "{" Class-member-declarations? "}" -> Class-body

        Class-member-declaration -> Class-member-declarations
        Class-member-declarations Class-member-declaration -> Class-member-declarations

        Constant-declaration -> Class-member-declaration
        Field-declaration -> Class-member-declaration
        Method-declaration -> Class-member-declaration
        Property-declaration -> Class-member-declaration
        Event-declaration -> Class-member-declaration
        Indexer-declaration -> Class-member-declaration
        Operator-declaration -> Class-member-declaration
        Constructor-declaration -> Class-member-declaration
        Finalizer-declaration -> Class-member-declaration
        Static-constructor-declaration -> Class-member-declaration
        Type-declaration -> Class-member-declaration

        Attributes? Constant-modifiers? "const" Type Constant-declarators ";" -> Constant-declaration

        Constant-modifier -> Constant-modifiers
        Constant-modifiers Constant-modifier -> Constant-modifiers

        "new" -> Constant-modifier
        "public" -> Constant-modifier
        "protected" -> Constant-modifier
        "internal" -> Constant-modifier
        "private" -> Constant-modifier

        Attributes? Field-modifiers? Type Variable-declarators ";" -> Field-declaration

        Field-modifier -> Field-modifiers
        Field-modifiers Field-modifier -> Field-modifiers

        "new" -> Field-modifier
        "public" -> Field-modifier
        "protected" -> Field-modifier
        "internal" -> Field-modifier
        "private" -> Field-modifier
        "static" -> Field-modifier
        "readonly" -> Field-modifier
        "volatile" -> Field-modifier

        Variable-declarator -> Variable-declarators
        Variable-declarators "," Variable-declarator -> Variable-declarators

        Identifier -> Variable-declarator
        Identifier "=" Variable-initializer -> Variable-declarator

        Expression -> Variable-initializer
        Array-initializer -> Variable-initializer

        Method-header Method-body -> Method-declaration

        Attributes? Method-modifiers? Return-type Member-name Type-parameter-list? "(" Formal-parameter-list? ")" Type-parameter-constraints-clauses? -> Method-header

        Method-modifier -> Method-modifiers
        Method-modifiers Method-modifier -> Method-modifiers

        "new" -> Method-modifier
        "public" -> Method-modifier
        "protected" -> Method-modifier
        "internal" -> Method-modifier
        "private" -> Method-modifier
        "static" -> Method-modifier
        "virtual" -> Method-modifier
        "sealed" -> Method-modifier
        "override" -> Method-modifier
        "abstract" -> Method-modifier
        "extern" -> Method-modifier

        Type -> Return-type
        "void" -> Return-type

        Identifier -> Member-name
        Interface-type "." Identifier -> Member-name

        Block -> Method-body
        ";" -> Method-body

        Fixed-parameters -> Formal-parameter-list
        Fixed-parameters "," Parameter-array -> Formal-parameter-list
        Parameter-array -> Formal-parameter-list

        Fixed-parameter -> Fixed-parameters
        Fixed-parameters "," Fixed-parameter -> Fixed-parameters

        Attributes? Parameter-modifier? Type Identifier -> Fixed-parameter

        "ref" -> Parameter-modifier
        "out" -> Parameter-modifier

        Attributes? "params" Array-type Identifier -> Parameter-array

        Attributes? Property-modifiers? Type Member-name "{" Accessor-declarations "}" -> Property-declaration

        Property-modifier -> Property-modifiers
        Property-modifiers Property-modifier -> Property-modifiers

        "new" -> Property-modifier
        "public" -> Property-modifier
        "protected" -> Property-modifier
        "internal" -> Property-modifier
        "private" -> Property-modifier
        "static" -> Property-modifier
        "virtual" -> Property-modifier
        "sealed" -> Property-modifier
        "override" -> Property-modifier
        "abstract" -> Property-modifier
        "extern" -> Property-modifier

        Get-accessor-declaration Set-accessor-declaration? -> Accessor-declarations
        Set-accessor-declaration Get-accessor-declaration? -> Accessor-declarations

        Attributes? Accessor-modifier? "get" Accessor-body -> Get-accessor-declaration

        Attributes? Accessor-modifier? "set" Accessor-body -> Set-accessor-declaration

        "protected" -> Accessor-modifier
        "internal" -> Accessor-modifier
        "private" -> Accessor-modifier
        "protected" "internal" -> Accessor-modifier
        "internal" "protected" -> Accessor-modifier

        Block -> Accessor-body
        ";" -> Accessor-body

        Attributes? Event-modifiers? "event" Type Variable-declarators ";" -> Event-declaration
        Attributes? Event-modifiers? "event" Type Member-name "{" Event-accessor-declarations "}" -> Event-declaration

        Event-modifier -> Event-modifiers
        Event-modifiers Event-modifier -> Event-modifiers

        "new" -> Event-modifier
        "public" -> Event-modifier
        "protected" -> Event-modifier
        "internal" -> Event-modifier
        "private" -> Event-modifier
        "static" -> Event-modifier
        "virtual" -> Event-modifier
        "sealed" -> Event-modifier
        "override" -> Event-modifier
        "abstract" -> Event-modifier
        "extern" -> Event-modifier

        Add-accessor-declaration Remove-accessor-declaration -> Event-accessor-declarations
        Remove-accessor-declaration Add-accessor-declaration -> Event-accessor-declarations

        Attributes? "add" Block -> Add-accessor-declaration

        Attributes? "remove" Block -> Remove-accessor-declaration

        Attributes? Indexer-modifiers? Indexer-declarator "{" Accessor-declarations "}" -> Indexer-declaration

        Indexer-modifier -> Indexer-modifiers
        Indexer-modifiers Indexer-modifier -> Indexer-modifiers

        "new" -> Indexer-modifier
        "public" -> Indexer-modifier
        "protected" -> Indexer-modifier
        "internal" -> Indexer-modifier
        "private" -> Indexer-modifier
        "virtual" -> Indexer-modifier
        "sealed" -> Indexer-modifier
        "override" -> Indexer-modifier
        "abstract" -> Indexer-modifier
        "extern" -> Indexer-modifier

        Type "this" "[" Formal-parameter-list "]" -> Indexer-declarator
        Type Interface-type "." "this" "[" Formal-parameter-list "]" -> Indexer-declarator

        Attributes? Operator-modifiers Operator-declarator Operator-body -> Operator-declaration

        Operator-modifier -> Operator-modifiers
        Operator-modifiers Operator-modifier -> Operator-modifiers

        "public" -> Operator-modifier
        "static" -> Operator-modifier
        "extern" -> Operator-modifier

        Unary-operator-declarator -> Operator-declarator
        Binary-operator-declarator -> Operator-declarator
        Conversion-operator-declarator -> Operator-declarator

        Type "operator" Overloadable-unary-operator "(" Type Identifier ")" -> Unary-operator-declarator

        "+" -> Overloadable-unary-operator
        "-" -> Overloadable-unary-operator
        "!" -> Overloadable-unary-operator
        "~" -> Overloadable-unary-operator
        "++" -> Overloadable-unary-operator
        "--" -> Overloadable-unary-operator
        "true" -> Overloadable-unary-operator
        "false" -> Overloadable-unary-operator

        Type "operator" Overloadable-binary-operator "(" Type Identifier "," Type Identifier ")" -> Binary-operator-declarator

        "+" -> Overloadable-binary-operator
        "-" -> Overloadable-binary-operator
        "*" -> Overloadable-binary-operator
        "/" -> Overloadable-binary-operator
        "%" -> Overloadable-binary-operator
        "&" -> Overloadable-binary-operator
        "|" -> Overloadable-binary-operator
        "^" -> Overloadable-binary-operator
        "<<" -> Overloadable-binary-operator
        Right-shift -> Overloadable-binary-operator
        "==" -> Overloadable-binary-operator
        "!=" -> Overloadable-binary-operator
        ">" -> Overloadable-binary-operator
        "<" -> Overloadable-binary-operator
        ">=" -> Overloadable-binary-operator
        "<=" -> Overloadable-binary-operator

        "implicit" "operator" Type "(" Type Identifier ")" -> Conversion-operator-declarator
        "explicit" "operator" Type "(" Type Identifier ")" -> Conversion-operator-declarator

        Block -> Operator-body
        ";" -> Operator-body

        Attributes? Constructor-modifiers? Constructor-declarator Constructor-body -> Constructor-declaration

        Constructor-modifier -> Constructor-modifiers
        Constructor-modifiers Constructor-modifier -> Constructor-modifiers

        "public" -> Constructor-modifier
        "protected" -> Constructor-modifier
        "internal" -> Constructor-modifier
        "private" -> Constructor-modifier
        "extern" -> Constructor-modifier

        Identifier "(" Formal-parameter-list? ")" Constructor-initializer? -> Constructor-declarator

        ":" "base" "(" Argument-list? ")" -> Constructor-initializer
        ":" "this" "(" Argument-list? ")" -> Constructor-initializer

        Block -> Constructor-body
        ";" -> Constructor-body

        Attributes? Static-constructor-modifiers Identifier "(" ")" Static-constructor-body -> Static-constructor-declaration

        "extern"? "static" -> Static-constructor-modifiers
        "static" "extern"? -> Static-constructor-modifiers

        Block -> Static-constructor-body
        ";" -> Static-constructor-body

        Attributes? "extern"? "~" Identifier "(" ")" Finalizer-body -> Finalizer-declaration

        Block -> Finalizer-body
        ";" -> Finalizer-body

        Attributes? Struct-modifiers? "partial"? "struct" Identifier Type-parameter-list? Struct-interfaces? Type-parameter-constraints-clauses? Struct-body ";"? -> Struct-declaration

        Struct-modifier -> Struct-modifiers
        Struct-modifiers Struct-modifier -> Struct-modifiers

        "new" -> Struct-modifier
        "public" -> Struct-modifier
        "protected" -> Struct-modifier
        "internal" -> Struct-modifier
        "private" -> Struct-modifier

        ":" Interface-type-list -> Struct-interfaces

        "{" Struct-member-declarations? "}" -> Struct-body

        Struct-member-declaration -> Struct-member-declarations
        Struct-member-declarations Struct-member-declaration -> Struct-member-declarations

        Constant-declaration -> Struct-member-declaration
        Field-declaration -> Struct-member-declaration
        Method-declaration -> Struct-member-declaration
        Property-declaration -> Struct-member-declaration
        Event-declaration -> Struct-member-declaration
        Indexer-declaration -> Struct-member-declaration
        Operator-declaration -> Struct-member-declaration
        Constructor-declaration -> Struct-member-declaration
        Static-constructor-declaration -> Struct-member-declaration
        Type-declaration -> Struct-member-declaration

        "{" Variable-initializer-list? "}" -> Array-initializer
        "{" Variable-initializer-list "," "}" -> Array-initializer

        Variable-initializer -> Variable-initializer-list
        Variable-initializer-list "," Variable-initializer -> Variable-initializer-list

        Attributes? Interface-modifiers? "partial"? "interface" Identifier Type-parameter-list? Interface-base? Type-parameter-constraints-clauses? Interface-body ";"? -> Interface-declaration

        Interface-modifier -> Interface-modifiers
        Interface-modifiers Interface-modifier -> Interface-modifiers

        "new" -> Interface-modifier
        "public" -> Interface-modifier
        "protected" -> Interface-modifier
        "internal" -> Interface-modifier
        "private" -> Interface-modifier

        ":" Interface-type-list -> Interface-base

        "{" Interface-member-declarations? "}" -> Interface-body

        Interface-member-declaration -> Interface-member-declarations
        Interface-member-declarations Interface-member-declaration -> Interface-member-declarations

        Interface-method-declaration -> Interface-member-declaration
        Interface-property-declaration -> Interface-member-declaration
        Interface-event-declaration -> Interface-member-declaration
        Interface-indexer-declaration -> Interface-member-declaration

        Attributes? "new"? Return-type Identifier Type-parameter-list? "(" Formal-parameter-list? ")" Type-parameter-constraints-clauses? ";" -> Interface-method-declaration

        Attributes? "new"? Type Identifier "{" Interface-accessors "}" -> Interface-property-declaration

        Attributes? "get" ";" -> Interface-accessors
        Attributes? "set" ";" -> Interface-accessors
        Attributes? "get" ";" Attributes? "set" ";" -> Interface-accessors
        Attributes? "set" ";" Attributes? "get" ";" -> Interface-accessors

        Attributes? "new"? "event" Type Identifier ";" -> Interface-event-declaration

        Attributes? "new"? Type "this" "[" Formal-parameter-list "]" "{" Interface-accessors "}" -> Interface-indexer-declaration

        Attributes? Enum-modifiers? "enum" Identifier Enum-base? Enum-body ";"? -> Enum-declaration

        ":" Integral-type -> Enum-base

        "{" Enum-member-declarations? "}" -> Enum-body
        "{" Enum-member-declarations "," "}" -> Enum-body

        Enum-modifier -> Enum-modifiers
        Enum-modifiers Enum-modifier -> Enum-modifiers

        "new" -> Enum-modifier
        "public" -> Enum-modifier
        "protected" -> Enum-modifier
        "internal" -> Enum-modifier
        "private" -> Enum-modifier

        Enum-member-declaration -> Enum-member-declarations
        Enum-member-declarations "," Enum-member-declaration -> Enum-member-declarations

        Attributes? Identifier -> Enum-member-declaration
        Attributes? Identifier "=" Constant-expression -> Enum-member-declaration

        Attributes? Delegate-modifiers? "delegate" Return-type Identifier Type-parameter-list? "(" Formal-parameter-list? ")" Type-parameter-constraints-clauses? ";" -> Delegate-declaration

        Delegate-modifier -> Delegate-modifiers
        Delegate-modifiers Delegate-modifier -> Delegate-modifiers

        "new" -> Delegate-modifier
        "public" -> Delegate-modifier
        "protected" -> Delegate-modifier
        "internal" -> Delegate-modifier
        "private" -> Delegate-modifier

        Global-attribute-sections -> Global-attributes

        Global-attribute-section -> Global-attribute-sections
        Global-attribute-sections Global-attribute-section -> Global-attribute-sections

        "[" Global-attribute-target-specifier Attribute-list "]" -> Global-attribute-section
        "[" Global-attribute-target-specifier Attribute-list "," "]" -> Global-attribute-section

        Global-attribute-target ":" -> Global-attribute-target-specifier

        Identifier -> Global-attribute-target
        Keyword -> Global-attribute-target

        Attribute-sections -> Attributes

        Attribute-section -> Attribute-sections
        Attribute-sections Attribute-section -> Attribute-sections

        "[" Attribute-target-specifier? Attribute-list "]" -> Attribute-section
        "[" Attribute-target-specifier? Attribute-list "," "]" -> Attribute-section

        Attribute-target ":" -> Attribute-target-specifier

        Identifier -> Attribute-target
        Keyword -> Attribute-target

        Attribute -> Attribute-list
        Attribute-list "," Attribute -> Attribute-list

        Attribute-name Attribute-arguments? -> Attribute

        Type-name -> Attribute-name

        "(" Positional-argument-list? ")" -> Attribute-arguments
        "(" Positional-argument-list "," Named-argument-list ")" -> Attribute-arguments
        "(" Named-argument-list ")" -> Attribute-arguments

        Positional-argument -> Positional-argument-list
        Positional-argument-list "," Positional-argument -> Positional-argument-list

        Attribute-argument-expression -> Positional-argument

        Named-argument -> Named-argument-list
        Named-argument-list "," Named-argument -> Named-argument-list

        Identifier "=" Attribute-argument-expression -> Named-argument

        Expression -> Attribute-argument-expression

        "<" Type-parameters ">" -> Type-parameter-list

        Attributes? Type-parameter -> Type-parameters
        Type-parameters "," Attributes? Type-parameter -> Type-parameters

        Identifier -> Type-parameter

        "<" Type-arguments ">" -> Type-argument-list

        Type-argument -> Type-arguments
        Type-arguments "," Type-argument -> Type-arguments

        Type -> Type-argument

        Type-parameter-constraints-clause -> Type-parameter-constraints-clauses
        Type-parameter-constraints-clauses Type-parameter-constraints-clause -> Type-parameter-constraints-clauses

        "where" Type-parameter ":" Type-parameter-constraints -> Type-parameter-constraints-clause

        Primary-constraint -> Type-parameter-constraints
        Secondary-constraints -> Type-parameter-constraints
        Constructor-constraint -> Type-parameter-constraints
        Primary-constraint "," Secondary-constraints -> Type-parameter-constraints
        Primary-constraint "," Constructor-constraint -> Type-parameter-constraints
        Secondary-constraints "," Constructor-constraint -> Type-parameter-constraints
        Primary-constraint "," Secondary-constraints "," Constructor-constraint -> Type-parameter-constraints

        Class-type -> Primary-constraint
        "class" -> Primary-constraint
        "struct" -> Primary-constraint

        Interface-type -> Secondary-constraints
        Type-parameter -> Secondary-constraints
        Secondary-constraints "," Interface-type -> Secondary-constraints
        Secondary-constraints "," Type-parameter -> Secondary-constraints

        "new" "(" ")" -> Constructor-constraint

        "abstract" -> Keyword
        "as" -> Keyword
        "base" -> Keyword
        "bool" -> Keyword
        "break" -> Keyword
        "byte" -> Keyword
        "case" -> Keyword
        "catch" -> Keyword
        "char" -> Keyword
        "checked" -> Keyword
        "class" -> Keyword
        "const" -> Keyword
        "continue" -> Keyword
        "decimal" -> Keyword
        "default" -> Keyword
        "delegate" -> Keyword
        "do" -> Keyword
        "double" -> Keyword
        "else" -> Keyword
        "enum" -> Keyword
        "event" -> Keyword
        "explicit" -> Keyword
        "extern" -> Keyword
        "false" -> Keyword
        "finally" -> Keyword
        "fixed" -> Keyword
        "float" -> Keyword
        "for" -> Keyword
        "foreach" -> Keyword
        "goto" -> Keyword
        "if" -> Keyword
        "implicit" -> Keyword
        "in" -> Keyword
        "int" -> Keyword
        "interface" -> Keyword
        "internal" -> Keyword
        "is" -> Keyword
        "lock" -> Keyword
        "long" -> Keyword
        "namespace" -> Keyword
        "new" -> Keyword
        "null" -> Keyword
        "object" -> Keyword
        "operator" -> Keyword
        "out" -> Keyword
        "override" -> Keyword
        "params" -> Keyword
        "private" -> Keyword
        "protected" -> Keyword
        "public" -> Keyword
        "readonly" -> Keyword
        "ref" -> Keyword
        "return" -> Keyword
        "sbyte" -> Keyword
        "sealed" -> Keyword
        "short" -> Keyword
        "sizeof" -> Keyword
        "stackalloc" -> Keyword
        "static" -> Keyword
        "string" -> Keyword
        "struct" -> Keyword
        "switch" -> Keyword
        "this" -> Keyword
        "throw" -> Keyword
        "true" -> Keyword
        "try" -> Keyword
        "typeof" -> Keyword
        "uint" -> Keyword
        "ulong" -> Keyword
        "unchecked" -> Keyword
        "unsafe" -> Keyword
        "ushort" -> Keyword
        "using" -> Keyword
        "virtual" -> Keyword
        "void" -> Keyword
        "volatile" -> Keyword
        "while" -> Keyword
        "get" -> Keyword
        "set" -> Keyword
        "yield" -> Keyword
        "add" -> Keyword
        "remove" -> Keyword
        "alias" -> Keyword
        "partial" -> Keyword
        "where" -> Keyword
