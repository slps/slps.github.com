module Main

exports
  sorts
        Ref-or-out Expression-unary-operator Increment-decrement Expression-shift-operator Expression-relational-operator Expression-equality-operator Conversion-kind Maybe-empty-block Built-in-type Built-in-class-type Else-part Qualified-identifier-list Compilation-unit Type Integral-type Argument-list Argument Primary-expression Predefined-type Expression-list Unary-expression Assignment-operator Expression Statement Embedded-statement Block Labeled-statement Declaration-statement Local-variable-declaration Local-constant-declaration Constant-declarator Statement-expression Selection-statement If-statement Switch-statement Switch-section Switch-label Iteration-statement While-statement Do-statement For-statement For-initializer Statement-expression-list Foreach-statement Jump-statement Break-statement Continue-statement Goto-statement Return-statement Throw-statement Try-statement Catch-clauses Specific-catch-clause General-catch-clause Finally-clause Lock-statement Using-statement Resource-acquisition Namespace-declaration Qualified-identifier Namespace-body Using-directive Namespace-member-declaration Type-declaration Class-declaration Class-modifier Class-base Class-body Class-member-declaration Constant-declaration Constant-modifier Field-declaration Field-modifier Variable-declarator Method-declaration Method-header Method-modifier Type-or-void Formal-parameter-list Fixed-parameters Fixed-parameter Parameter-modifier Parameter-array Property-declaration Property-modifier Accessor-declarations Get-accessor-declaration Set-accessor-declaration Event-declaration Event-modifier Event-accessor-declarations Add-accessor-declaration Remove-accessor-declaration Indexer-declaration Indexer-modifier Indexer-declarator Operator-declaration Operator-modifier Operator-declarator Unary-operator-declarator Overloadable-unary-operator Binary-operator-declarator Overloadable-binary-operator Conversion-operator-declarator Constructor-declaration Constructor-modifier Constructor-declarator Constructor-initializer Static-constructor-declaration Static-constructor-modifiers Destructor-declaration Struct-declaration Struct-modifier Struct-body Struct-member-declarations Struct-member-declaration Array-type Non-array-type Rank-specifier Array-initializer Variable-initializer Interface-declaration Interface-modifier Interface-body Interface-member-declaration Interface-method-declaration Interface-property-declaration Interface-accessors Interface-event-declaration Interface-indexer-declaration Enum-declaration Enum-body Enum-modifier Enum-member-declaration Delegate-declaration Delegate-modifier Global-attributes Global-attribute-section Attributes Attribute-section Attribute-target Attribute-list Attribute Attribute-name Attribute-arguments 
  context-free syntax
        "ref" -> Ref-or-out
        "out" -> Ref-or-out

        Lex-csharp-extra/plus -> Expression-unary-operator
        Lex-csharp-extra/minus -> Expression-unary-operator
        Increment-decrement -> Expression-unary-operator
        "!" -> Expression-unary-operator
        "~" -> Expression-unary-operator
        "*" -> Expression-unary-operator

        "++" -> Increment-decrement
        "--" -> Increment-decrement

        "<<" -> Expression-shift-operator
        ">>" -> Expression-shift-operator

        Lex-csharp-extra/less-than -> Expression-relational-operator
        Lex-csharp-extra/greater-than -> Expression-relational-operator
        "<=" -> Expression-relational-operator
        ">=" -> Expression-relational-operator
        "is" -> Expression-relational-operator
        "as" -> Expression-relational-operator

        "==" -> Expression-equality-operator
        "!=" -> Expression-equality-operator

        "implicit" -> Conversion-kind
        "explicit" -> Conversion-kind

        "{" Statement* "}" -> Maybe-empty-block
        ";" -> Maybe-empty-block

        Integral-type -> Built-in-type
        Built-in-class-type -> Built-in-type
        "bool" -> Built-in-type
        "decimal" -> Built-in-type
        "float" -> Built-in-type
        "double" -> Built-in-type

        "object" -> Built-in-class-type
        "string" -> Built-in-class-type

        "else" Embedded-statement -> Else-part

        Qualified-identifier"," -> Qualified-identifier-list

        Using-directive* Global-attributes Namespace-member-declaration* -> Compilation-unit

        Non-array-type Rank-specifier* -> Type

        "sbyte" -> Integral-type
        "byte" -> Integral-type
        "short" -> Integral-type
        "ushort" -> Integral-type
        "int" -> Integral-type
        "uint" -> Integral-type
        "long" -> Integral-type
        "ulong" -> Integral-type
        "char" -> Integral-type

        Argument"," -> Argument-list

        Ref-or-out? Expression -> Argument

        "new" Non-array-type "[" Expression-list "]" Rank-specifier* Array-initializer? -> Primary-expression
        "new" Array-type Array-initializer -> Primary-expression
        Lex-csharp/literal -> Primary-expression
        Lex-csharp/identifier -> Primary-expression
        "(" Expression ")" -> Primary-expression
        Primary-expression "." Lex-csharp/identifier -> Primary-expression
        Predefined-type "." Lex-csharp/identifier -> Primary-expression
        Primary-expression "(" Argument-list ")" -> Primary-expression
        Primary-expression "[" Expression-list "]" -> Primary-expression
        "this" -> Primary-expression
        "base" "." Lex-csharp/identifier -> Primary-expression
        "base" "[" Expression-list "]" -> Primary-expression
        Primary-expression Increment-decrement -> Primary-expression
        "new" Type "(" Argument-list ")" -> Primary-expression
        "typeof" "(" Type-or-void ")" -> Primary-expression
        "checked" "(" Expression ")" -> Primary-expression
        "unchecked" "(" Expression ")" -> Primary-expression

        "bool" -> Predefined-type
        "byte" -> Predefined-type
        "char" -> Predefined-type
        "decimal" -> Predefined-type
        "double" -> Predefined-type
        "float" -> Predefined-type
        "int" -> Predefined-type
        "long" -> Predefined-type
        "object" -> Predefined-type
        "sbyte" -> Predefined-type
        "short" -> Predefined-type
        "string" -> Predefined-type
        "uint" -> Predefined-type
        "ulong" -> Predefined-type
        "ushort" -> Predefined-type

        Expression"," -> Expression-list

        Expression-unary-operator Unary-expression -> Unary-expression
        "(" Type ")" Unary-expression -> Unary-expression
        Primary-expression -> Unary-expression

        "=" -> Assignment-operator
        "+=" -> Assignment-operator
        "-=" -> Assignment-operator
        "*=" -> Assignment-operator
        "/=" -> Assignment-operator
        "%=" -> Assignment-operator
        "&=" -> Assignment-operator
        "|=" -> Assignment-operator
        "^=" -> Assignment-operator
        "<<=" -> Assignment-operator
        ">>=" -> Assignment-operator

        Expression "?" Expression ":" Expression -> Expression
        Expression "||" Expression -> Expression
        Expression "&&" Expression -> Expression
        Expression Lex-csharp-extra/bar Expression -> Expression
        Expression "^" Expression -> Expression
        Expression Lex-csharp-extra/ampersand Expression -> Expression
        Expression Expression-equality-operator Expression -> Expression
        Expression Expression-relational-operator Expression -> Expression
        Expression "is" Built-in-type -> Expression
        Expression Expression-shift-operator Expression -> Expression
        Expression Lex-csharp-extra/plus Expression -> Expression
        Expression Lex-csharp-extra/minus Expression -> Expression
        Expression "*" Expression -> Expression
        Expression "/" Expression -> Expression
        Expression "%" Expression -> Expression
        Unary-expression -> Expression
        Unary-expression Assignment-operator Expression -> Expression

        Labeled-statement -> Statement
        Declaration-statement -> Statement
        Embedded-statement -> Statement

        Maybe-empty-block -> Embedded-statement
        Statement-expression ";" -> Embedded-statement
        Selection-statement -> Embedded-statement
        Iteration-statement -> Embedded-statement
        Jump-statement -> Embedded-statement
        Try-statement -> Embedded-statement
        "checked" Block -> Embedded-statement
        "unchecked" Block -> Embedded-statement
        Lock-statement -> Embedded-statement
        Using-statement -> Embedded-statement

        "{" Statement* "}" -> Block

        Lex-csharp/identifier ":" Statement -> Labeled-statement

        Local-variable-declaration ";" -> Declaration-statement
        Local-constant-declaration ";" -> Declaration-statement

        Type Variable-declarator"," -> Local-variable-declaration

        "const" Type Constant-declarator"," -> Local-constant-declaration

        Lex-csharp/identifier "=" Expression -> Constant-declarator

        Primary-expression "(" Argument-list ")" -> Statement-expression
        "new" Type "(" Argument-list ")" -> Statement-expression
        Unary-expression Assignment-operator Expression -> Statement-expression
        Primary-expression Increment-decrement -> Statement-expression
        Increment-decrement Primary-expression -> Statement-expression

        If-statement -> Selection-statement
        Switch-statement -> Selection-statement

        "if" "(" Expression ")" Embedded-statement Else-part? -> If-statement

        "switch" "(" Expression ")" "{" Switch-section* "}" -> Switch-statement

        Switch-label+ Statement+ -> Switch-section

        "case" Expression ":" -> Switch-label
        "default" ":" -> Switch-label

        While-statement -> Iteration-statement
        Do-statement -> Iteration-statement
        For-statement -> Iteration-statement
        Foreach-statement -> Iteration-statement

        "while" "(" Expression ")" Embedded-statement -> While-statement

        "do" Embedded-statement "while" "(" Expression ")" ";" -> Do-statement

        "for" "(" For-initializer? ";" Expression? ";" Statement-expression-list? ")" Embedded-statement -> For-statement

        Local-variable-declaration -> For-initializer
        Statement-expression-list -> For-initializer

        Statement-expression"," -> Statement-expression-list

        "foreach" "(" Type Lex-csharp/identifier "in" Expression ")" Embedded-statement -> Foreach-statement

        Break-statement -> Jump-statement
        Continue-statement -> Jump-statement
        Goto-statement -> Jump-statement
        Return-statement -> Jump-statement
        Throw-statement -> Jump-statement

        "break" ";" -> Break-statement

        "continue" ";" -> Continue-statement

        "goto" Lex-csharp/identifier ";" -> Goto-statement
        "goto" "case" Expression ";" -> Goto-statement
        "goto" "default" ";" -> Goto-statement

        "return" Expression? ";" -> Return-statement

        "throw" Expression? ";" -> Throw-statement

        "try" Block Catch-clauses Finally-clause? -> Try-statement
        "try" Block Finally-clause -> Try-statement

        Specific-catch-clause+ General-catch-clause? -> Catch-clauses
        Specific-catch-clause* General-catch-clause -> Catch-clauses

        "catch" "(" Built-in-class-type Lex-csharp/identifier? ")" Block -> Specific-catch-clause
        "catch" "(" Qualified-identifier Lex-csharp/identifier? ")" Block -> Specific-catch-clause

        "catch" Block -> General-catch-clause

        "finally" Block -> Finally-clause

        "lock" "(" Expression ")" Embedded-statement -> Lock-statement

        "using" "(" Resource-acquisition ")" Embedded-statement -> Using-statement

        Local-variable-declaration -> Resource-acquisition
        Expression -> Resource-acquisition

        "namespace" Qualified-identifier Namespace-body ";"? -> Namespace-declaration

        Lex-csharp/identifier"." -> Qualified-identifier

        "{" Using-directive* Namespace-member-declaration* "}" -> Namespace-body

        "using" (Lex-csharp/identifier "=")? Qualified-identifier ";" -> Using-directive

        Namespace-declaration -> Namespace-member-declaration
        Type-declaration -> Namespace-member-declaration

        Class-declaration -> Type-declaration
        Struct-declaration -> Type-declaration
        Interface-declaration -> Type-declaration
        Enum-declaration -> Type-declaration
        Delegate-declaration -> Type-declaration

        Attributes Class-modifier* "class" Lex-csharp/identifier Class-base? Class-body ";"? -> Class-declaration

        "new" -> Class-modifier
        "public" -> Class-modifier
        "protected" -> Class-modifier
        "internal" -> Class-modifier
        "private" -> Class-modifier
        "abstract" -> Class-modifier
        "sealed" -> Class-modifier

        ":" Qualified-identifier-list -> Class-base
        ":" Built-in-class-type ("," Qualified-identifier-list)? -> Class-base

        "{" Class-member-declaration* "}" -> Class-body

        Constant-declaration -> Class-member-declaration
        Field-declaration -> Class-member-declaration
        Method-declaration -> Class-member-declaration
        Property-declaration -> Class-member-declaration
        Event-declaration -> Class-member-declaration
        Indexer-declaration -> Class-member-declaration
        Operator-declaration -> Class-member-declaration
        Constructor-declaration -> Class-member-declaration
        Destructor-declaration -> Class-member-declaration
        Static-constructor-declaration -> Class-member-declaration
        Type-declaration -> Class-member-declaration

        Attributes Constant-modifier* "const" Type Constant-declarator"," ";" -> Constant-declaration

        "new" -> Constant-modifier
        "public" -> Constant-modifier
        "protected" -> Constant-modifier
        "internal" -> Constant-modifier
        "private" -> Constant-modifier

        Attributes Field-modifier* Type Variable-declarator"," ";" -> Field-declaration

        "new" -> Field-modifier
        "public" -> Field-modifier
        "protected" -> Field-modifier
        "internal" -> Field-modifier
        "private" -> Field-modifier
        "static" -> Field-modifier
        "readonly" -> Field-modifier
        "volatile" -> Field-modifier

        Lex-csharp/identifier -> Variable-declarator
        Lex-csharp/identifier "=" Variable-initializer -> Variable-declarator

        Method-header Maybe-empty-block -> Method-declaration

        Attributes Method-modifier* Type-or-void Qualified-identifier "(" Formal-parameter-list? ")" -> Method-header

        "new" -> Method-modifier
        "public" -> Method-modifier
        "protected" -> Method-modifier
        "internal" -> Method-modifier
        "private" -> Method-modifier
        "static" -> Method-modifier
        "virtual" -> Method-modifier
        "sealed" -> Method-modifier
        "override" -> Method-modifier
        "abstract" -> Method-modifier
        "extern" -> Method-modifier

        Type -> Type-or-void
        "void" -> Type-or-void

        Fixed-parameters -> Formal-parameter-list
        Fixed-parameters "," Parameter-array -> Formal-parameter-list
        Parameter-array -> Formal-parameter-list

        Fixed-parameter"," -> Fixed-parameters

        Attributes Parameter-modifier? Type Lex-csharp/identifier -> Fixed-parameter

        "ref" -> Parameter-modifier
        "out" -> Parameter-modifier

        Attributes "params" Array-type Lex-csharp/identifier -> Parameter-array

        Attributes Property-modifier* Type Qualified-identifier "{" Accessor-declarations "}" -> Property-declaration

        "new" -> Property-modifier
        "public" -> Property-modifier
        "protected" -> Property-modifier
        "internal" -> Property-modifier
        "private" -> Property-modifier
        "static" -> Property-modifier
        "virtual" -> Property-modifier
        "sealed" -> Property-modifier
        "override" -> Property-modifier
        "abstract" -> Property-modifier
        "extern" -> Property-modifier

        Get-accessor-declaration Set-accessor-declaration? -> Accessor-declarations
        Set-accessor-declaration Get-accessor-declaration? -> Accessor-declarations

        Attributes "get" Maybe-empty-block -> Get-accessor-declaration

        Attributes "set" Maybe-empty-block -> Set-accessor-declaration

        Attributes Event-modifier* "event" Type Variable-declarator"," ";" -> Event-declaration
        Attributes Event-modifier* "event" Type Qualified-identifier "{" Event-accessor-declarations "}" -> Event-declaration

        "new" -> Event-modifier
        "public" -> Event-modifier
        "protected" -> Event-modifier
        "internal" -> Event-modifier
        "private" -> Event-modifier
        "static" -> Event-modifier
        "virtual" -> Event-modifier
        "sealed" -> Event-modifier
        "override" -> Event-modifier
        "abstract" -> Event-modifier
        "extern" -> Event-modifier

        Add-accessor-declaration Remove-accessor-declaration -> Event-accessor-declarations
        Remove-accessor-declaration Add-accessor-declaration -> Event-accessor-declarations

        Attributes "add" Block -> Add-accessor-declaration

        Attributes "remove" Block -> Remove-accessor-declaration

        Attributes Indexer-modifier* Indexer-declarator "{" Accessor-declarations "}" -> Indexer-declaration

        "new" -> Indexer-modifier
        "public" -> Indexer-modifier
        "protected" -> Indexer-modifier
        "internal" -> Indexer-modifier
        "private" -> Indexer-modifier
        "virtual" -> Indexer-modifier
        "sealed" -> Indexer-modifier
        "override" -> Indexer-modifier
        "abstract" -> Indexer-modifier
        "extern" -> Indexer-modifier

        Type "this" "[" Formal-parameter-list "]" -> Indexer-declarator
        Type Qualified-identifier "." "this" "[" Formal-parameter-list "]" -> Indexer-declarator

        Attributes Operator-modifier+ Operator-declarator Maybe-empty-block -> Operator-declaration

        "public" -> Operator-modifier
        "static" -> Operator-modifier
        "extern" -> Operator-modifier

        Unary-operator-declarator -> Operator-declarator
        Binary-operator-declarator -> Operator-declarator
        Conversion-operator-declarator -> Operator-declarator

        Type "operator" Overloadable-unary-operator "(" Type Lex-csharp/identifier ")" -> Unary-operator-declarator

        Lex-csharp-extra/plus -> Overloadable-unary-operator
        Lex-csharp-extra/minus -> Overloadable-unary-operator
        Increment-decrement -> Overloadable-unary-operator
        "!" -> Overloadable-unary-operator
        "~" -> Overloadable-unary-operator
        "true" -> Overloadable-unary-operator
        "false" -> Overloadable-unary-operator

        Type "operator" Overloadable-binary-operator "(" Type Lex-csharp/identifier "," Type Lex-csharp/identifier ")" -> Binary-operator-declarator

        Lex-csharp-extra/plus -> Overloadable-binary-operator
        Lex-csharp-extra/minus -> Overloadable-binary-operator
        "*" -> Overloadable-binary-operator
        "/" -> Overloadable-binary-operator
        "%" -> Overloadable-binary-operator
        Lex-csharp-extra/ampersand -> Overloadable-binary-operator
        Lex-csharp-extra/bar -> Overloadable-binary-operator
        "^" -> Overloadable-binary-operator
        "<<" -> Overloadable-binary-operator
        ">>" -> Overloadable-binary-operator
        "==" -> Overloadable-binary-operator
        "!=" -> Overloadable-binary-operator
        Lex-csharp-extra/greater-than -> Overloadable-binary-operator
        Lex-csharp-extra/less-than -> Overloadable-binary-operator
        ">=" -> Overloadable-binary-operator
        "<=" -> Overloadable-binary-operator

        Conversion-kind "operator" Type "(" Type Lex-csharp/identifier ")" -> Conversion-operator-declarator

        Attributes Constructor-modifier* Constructor-declarator Maybe-empty-block -> Constructor-declaration

        "public" -> Constructor-modifier
        "protected" -> Constructor-modifier
        "internal" -> Constructor-modifier
        "private" -> Constructor-modifier
        "extern" -> Constructor-modifier

        Lex-csharp/identifier "(" Formal-parameter-list? ")" Constructor-initializer? -> Constructor-declarator

        ":" "base" "(" Argument-list ")" -> Constructor-initializer
        ":" "this" "(" Argument-list ")" -> Constructor-initializer

        Attributes Static-constructor-modifiers Lex-csharp/identifier "(" ")" Maybe-empty-block -> Static-constructor-declaration

        "extern"? "static" -> Static-constructor-modifiers
        "static" "extern" -> Static-constructor-modifiers

        Attributes "extern"? "~" Lex-csharp/identifier "(" ")" Maybe-empty-block -> Destructor-declaration

        Attributes Struct-modifier* "struct" Lex-csharp/identifier (":" Qualified-identifier-list)? Struct-body ";"? -> Struct-declaration

        "new" -> Struct-modifier
        "public" -> Struct-modifier
        "protected" -> Struct-modifier
        "internal" -> Struct-modifier
        "private" -> Struct-modifier

        "{" Struct-member-declaration* "}" -> Struct-body

        Struct-member-declaration -> Struct-member-declarations
        Struct-member-declarations Struct-member-declaration -> Struct-member-declarations

        Constant-declaration -> Struct-member-declaration
        Field-declaration -> Struct-member-declaration
        Method-declaration -> Struct-member-declaration
        Property-declaration -> Struct-member-declaration
        Event-declaration -> Struct-member-declaration
        Indexer-declaration -> Struct-member-declaration
        Operator-declaration -> Struct-member-declaration
        Constructor-declaration -> Struct-member-declaration
        Static-constructor-declaration -> Struct-member-declaration
        Type-declaration -> Struct-member-declaration

        Non-array-type Rank-specifier+ -> Array-type

        Qualified-identifier -> Non-array-type
        Built-in-type -> Non-array-type

        "[" ","* "]" -> Rank-specifier

        "{" "}" -> Array-initializer
        "{" Variable-initializer"," ","? "}" -> Array-initializer

        Expression -> Variable-initializer
        Array-initializer -> Variable-initializer

        Attributes Interface-modifier* "interface" Lex-csharp/identifier (":" Qualified-identifier-list)? Interface-body ";"? -> Interface-declaration

        "new" -> Interface-modifier
        "public" -> Interface-modifier
        "protected" -> Interface-modifier
        "internal" -> Interface-modifier
        "private" -> Interface-modifier

        "{" Interface-member-declaration* "}" -> Interface-body

        Interface-method-declaration -> Interface-member-declaration
        Interface-property-declaration -> Interface-member-declaration
        Interface-event-declaration -> Interface-member-declaration
        Interface-indexer-declaration -> Interface-member-declaration

        Attributes "new"? Type-or-void Lex-csharp/identifier "(" Formal-parameter-list? ")" ";" -> Interface-method-declaration

        Attributes "new"? Type Lex-csharp/identifier "{" Interface-accessors "}" -> Interface-property-declaration

        Attributes "get" ";" (Attributes "set" ";")? -> Interface-accessors
        Attributes "set" ";" (Attributes "get" ";")? -> Interface-accessors

        Attributes "new"? "event" Type Lex-csharp/identifier ";" -> Interface-event-declaration

        Attributes "new"? Type "this" "[" Formal-parameter-list "]" "{" Interface-accessors "}" -> Interface-indexer-declaration

        Attributes Enum-modifier* "enum" Lex-csharp/identifier (":" Integral-type)? Enum-body ";"? -> Enum-declaration

        "{" "}" -> Enum-body
        "{" Enum-member-declaration"," ","? "}" -> Enum-body

        "new" -> Enum-modifier
        "public" -> Enum-modifier
        "protected" -> Enum-modifier
        "internal" -> Enum-modifier
        "private" -> Enum-modifier

        Attributes Lex-csharp/identifier ("=" Expression)? -> Enum-member-declaration

        Attributes Delegate-modifier* "delegate" Type-or-void Lex-csharp/identifier "(" Formal-parameter-list? ")" ";" -> Delegate-declaration

        "new" -> Delegate-modifier
        "public" -> Delegate-modifier
        "protected" -> Delegate-modifier
        "internal" -> Delegate-modifier
        "private" -> Delegate-modifier

        Global-attribute-section* -> Global-attributes

        "[" "assembly" ":" Attribute-list ","? "]" -> Global-attribute-section

        Attribute-section* -> Attributes

        "[" (Attribute-target ":")? Attribute-list ","? "]" -> Attribute-section

        "field" -> Attribute-target
        "event" -> Attribute-target
        "method" -> Attribute-target
        "module" -> Attribute-target
        "param" -> Attribute-target
        "property" -> Attribute-target
        "return" -> Attribute-target
        "type" -> Attribute-target

        Attribute"," -> Attribute-list

        Attribute-name Attribute-arguments? -> Attribute

        Qualified-identifier -> Attribute-name

        "(" Expression-list? ")" -> Attribute-arguments
