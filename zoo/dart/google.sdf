module Main

exports
  sorts
        CompilationUnit HASHBANG NEWLINE Directive Identifier IDENTIFIER-NO-DOLLAR IDENTIFIER-START-NO-DOLLAR LETTER IDENTIFIER-PART-NO-DOLLAR DIGIT IDENTIFIER IDENTIFIER-START IDENTIFIER-PART ABSTRACT ASSERT CLASS EXTENDS FACTORY GET IMPLEMENTS IMPORT INTERFACE IS LIBRARY NATIVE NEGATE OPERATOR SET SOURCE STATIC TYPEDEF Arguments ArgumentList NamedArgument Label Expression AssignableExpression Primary PrimaryNoFE THIS SUPER AssignableSelector Literal NULL TRUE FALSE HEX-NUMBER HEX-DIGIT NUMBER NUMBER-OPT-FRACTIONAL-PART EXPONENT NUMBER-OPT-ILLEGAL-END STRING MULTI-LINE-STRING SINGLE-LINE-STRING STRING-CONTENT-DQ STRING-CONTENT-SQ CONST TypeArguments TypeList Type Qualified CompoundLiteral ListLiteral ExpressionList MapLiteral MapLiteralEntry NEW ExpressionInParentheses PrimaryFE FunctionExpression ReturnType VOID FormalParameterList NamedFormalParameters DefaultFormalParameter NormalFormalParameter FunctionDeclaration FieldFormalParameter FinalVarOrType FINAL VAR SimpleFormalParameter DeclaredIdentifier ConstantExpression NormalFormalParameterTail FunctionExpressionBody Block Statements Statement NonLabelledStatement InitializedVariableDeclaration InitializedIdentifier IterationStatement WHILE DO FOR ForLoopParts ForInitializerStatement IN SelectionStatement IF ELSE SWITCH SwitchCase CASE DefaultCase DEFAULT TryStatement TRY CatchPart CATCH FinallyPart FINALLY BREAK CONTINUE RETURN THROW ConditionalExpression LogicalOrExpression LogicalAndExpression BitwiseOrExpression BitwiseXorExpression BitwiseAndExpression EqualityExpression RelationalExpression ShiftExpression AdditiveExpression MultiplicativeExpression UnaryExpression PostfixExpression PostfixOperator IncrementOperator Selector PrefixOperator AdditiveOperator NegateOperator MultiplicativeOperator ShiftOperator IsOperator RelationalOperator EqualityOperator FunctionBody AssignmentOperator TopLevelDefinition ClassDefinition TypeParameters TypeParameter Superclass Interfaces ClassMemberDefinition Declaration ConstantConstructorDeclaration Redirection Initializers SuperCallOrFieldInitializer FieldInitializer NamedConstructorDeclaration SpecialSignatureDefinition GetOrSet UserDefinableOperator BitwiseOperator StaticFinalDeclarationList StaticFinalDeclaration ConstInitializedVariableDeclaration ConstInitializedIdentifier ConstructorDeclaration MethodDeclaration FactoryConstructorDeclaration FunctionBodyOrNative FunctionNative InterfaceDefinition Superinterfaces FactorySpecification InterfaceMemberDefinition InitializedIdentifierList VariableDeclaration FunctionTypeAlias FunctionPrefix LibraryUnit LibraryDefinition LibraryBody LibraryImport ImportReferences ImportReference LibrarySource SourceUrls 
  context-free syntax
        HASHBANG? Directive* TopLevelDefinition* EOF -> CompilationUnit

        "#!" ANY* NEWLINE? -> HASHBANG

        "\n" -> NEWLINE
        "\r" -> NEWLINE

        "#" Identifier Arguments ";" -> Directive

        IDENTIFIER-NO-DOLLAR -> Identifier
        IDENTIFIER -> Identifier
        ABSTRACT -> Identifier
        ASSERT -> Identifier
        CLASS -> Identifier
        EXTENDS -> Identifier
        FACTORY -> Identifier
        GET -> Identifier
        IMPLEMENTS -> Identifier
        IMPORT -> Identifier
        INTERFACE -> Identifier
        IS -> Identifier
        LIBRARY -> Identifier
        NATIVE -> Identifier
        NEGATE -> Identifier
        OPERATOR -> Identifier
        SET -> Identifier
        SOURCE -> Identifier
        STATIC -> Identifier
        TYPEDEF -> Identifier

        IDENTIFIER-START-NO-DOLLAR IDENTIFIER-PART-NO-DOLLAR* -> IDENTIFIER-NO-DOLLAR

        LETTER -> IDENTIFIER-START-NO-DOLLAR
        "_" -> IDENTIFIER-START-NO-DOLLAR

        "a" -> LETTER
        "b" -> LETTER
        "c" -> LETTER
        "d" -> LETTER
        "e" -> LETTER
        "f" -> LETTER
        "g" -> LETTER
        "h" -> LETTER
        "i" -> LETTER
        "j" -> LETTER
        "k" -> LETTER
        "l" -> LETTER
        "m" -> LETTER
        "n" -> LETTER
        "o" -> LETTER
        "p" -> LETTER
        "q" -> LETTER
        "r" -> LETTER
        "s" -> LETTER
        "t" -> LETTER
        "u" -> LETTER
        "v" -> LETTER
        "w" -> LETTER
        "x" -> LETTER
        "y" -> LETTER
        "z" -> LETTER
        "A" -> LETTER
        "B" -> LETTER
        "C" -> LETTER
        "D" -> LETTER
        "E" -> LETTER
        "F" -> LETTER
        "G" -> LETTER
        "H" -> LETTER
        "I" -> LETTER
        "J" -> LETTER
        "K" -> LETTER
        "L" -> LETTER
        "M" -> LETTER
        "N" -> LETTER
        "O" -> LETTER
        "P" -> LETTER
        "Q" -> LETTER
        "R" -> LETTER
        "S" -> LETTER
        "T" -> LETTER
        "U" -> LETTER
        "V" -> LETTER
        "W" -> LETTER
        "X" -> LETTER
        "Y" -> LETTER
        "Z" -> LETTER

        IDENTIFIER-START-NO-DOLLAR -> IDENTIFIER-PART-NO-DOLLAR
        DIGIT -> IDENTIFIER-PART-NO-DOLLAR

        "0" -> DIGIT
        "1" -> DIGIT
        "2" -> DIGIT
        "3" -> DIGIT
        "4" -> DIGIT
        "5" -> DIGIT
        "6" -> DIGIT
        "7" -> DIGIT
        "8" -> DIGIT
        "9" -> DIGIT

        IDENTIFIER-START IDENTIFIER-PART* -> IDENTIFIER

        IDENTIFIER-START-NO-DOLLAR -> IDENTIFIER-START
        "$" -> IDENTIFIER-START

        IDENTIFIER-START -> IDENTIFIER-PART
        DIGIT -> IDENTIFIER-PART

        "abstract" -> ABSTRACT

        "assert" -> ASSERT

        "class" -> CLASS

        "extends" -> EXTENDS

        "factory" -> FACTORY

        "get" -> GET

        "implements" -> IMPLEMENTS

        "import" -> IMPORT

        "interface" -> INTERFACE

        "is" -> IS

        "library" -> LIBRARY

        "native" -> NATIVE

        "negate" -> NEGATE

        "operator" -> OPERATOR

        "set" -> SET

        "source" -> SOURCE

        "static" -> STATIC

        "typedef" -> TYPEDEF

        "(" ArgumentList? ")" -> Arguments

        NamedArgument ("," NamedArgument)* -> ArgumentList
        ExpressionList ("," NamedArgument)* -> ArgumentList

        Label Expression -> NamedArgument

        Identifier ":" -> Label

        AssignableExpression AssignmentOperator Expression -> Expression
        ConditionalExpression -> Expression

        Primary (Arguments* AssignableSelector)+ -> AssignableExpression
        SUPER AssignableSelector -> AssignableExpression
        Identifier -> AssignableExpression

        PrimaryNoFE -> Primary
        PrimaryFE -> Primary

        THIS -> PrimaryNoFE
        SUPER AssignableSelector -> PrimaryNoFE
        Literal -> PrimaryNoFE
        Identifier -> PrimaryNoFE
        CONST? TypeArguments? CompoundLiteral -> PrimaryNoFE
        (NEW | CONST) Type ("." Identifier)? Arguments -> PrimaryNoFE
        ExpressionInParentheses -> PrimaryNoFE

        "this" -> THIS

        "super" -> SUPER

        "[" Expression "]" -> AssignableSelector
        "." Identifier -> AssignableSelector

        NULL -> Literal
        TRUE -> Literal
        FALSE -> Literal
        HEX-NUMBER -> Literal
        NUMBER -> Literal
        STRING -> Literal

        "null" -> NULL

        "true" -> TRUE

        "false" -> FALSE

        "0x" HEX-DIGIT+ -> HEX-NUMBER
        "0X" HEX-DIGIT+ -> HEX-NUMBER

        "a" -> HEX-DIGIT
        "b" -> HEX-DIGIT
        "c" -> HEX-DIGIT
        "d" -> HEX-DIGIT
        "e" -> HEX-DIGIT
        "f" -> HEX-DIGIT
        "A" -> HEX-DIGIT
        "B" -> HEX-DIGIT
        "C" -> HEX-DIGIT
        "D" -> HEX-DIGIT
        "E" -> HEX-DIGIT
        "F" -> HEX-DIGIT
        DIGIT -> HEX-DIGIT

        DIGIT+ NUMBER-OPT-FRACTIONAL-PART EXPONENT? NUMBER-OPT-ILLEGAL-END -> NUMBER
        "." DIGIT+ EXPONENT? NUMBER-OPT-ILLEGAL-END -> NUMBER

        "." DIGIT+ -> NUMBER-OPT-FRACTIONAL-PART
         -> NUMBER-OPT-FRACTIONAL-PART

        ("e" | "E") ("+" | "-")? DIGIT+ -> EXPONENT

         -> NUMBER-OPT-ILLEGAL-END

        "@"? MULTI-LINE-STRING -> STRING
        SINGLE-LINE-STRING -> STRING

        """"" ANY* """"" -> MULTI-LINE-STRING
        "\'\'\'" ANY* "\'\'\'" -> MULTI-LINE-STRING

        """ STRING-CONTENT-DQ* """ -> SINGLE-LINE-STRING
        "\'" STRING-CONTENT-SQ* "\'" -> SINGLE-LINE-STRING
        "@" "\'" ANY* "\'" -> SINGLE-LINE-STRING
        "@" """ ANY* """ -> SINGLE-LINE-STRING

        ANY -> STRING-CONTENT-DQ
        "\\" ANY -> STRING-CONTENT-DQ

        ANY -> STRING-CONTENT-SQ
        "\\" ANY -> STRING-CONTENT-SQ

        "const" -> CONST

        "<" TypeList ">" -> TypeArguments

        Type ("," Type)* -> TypeList

        Qualified TypeArguments? -> Type

        Identifier ("." Identifier)? -> Qualified

        ListLiteral -> CompoundLiteral
        MapLiteral -> CompoundLiteral

        "[" (ExpressionList ","?)? "]" -> ListLiteral

        Expression ("," Expression)* -> ExpressionList

        "{" (MapLiteralEntry ("," MapLiteralEntry)* ","?)? "}" -> MapLiteral

        STRING ":" Expression -> MapLiteralEntry

        "new" -> NEW

        "(" Expression ")" -> ExpressionInParentheses

        FunctionExpression -> PrimaryFE
        PrimaryNoFE -> PrimaryFE

        (ReturnType? Identifier)? FormalParameterList FunctionExpressionBody -> FunctionExpression

        VOID -> ReturnType
        Type -> ReturnType

        "void" -> VOID

        "(" NamedFormalParameters? ")" -> FormalParameterList
        "(" NormalFormalParameter NormalFormalParameterTail? ")" -> FormalParameterList

        "[" DefaultFormalParameter ("," DefaultFormalParameter)* "]" -> NamedFormalParameters

        NormalFormalParameter ("=" ConstantExpression)? -> DefaultFormalParameter

        FunctionDeclaration -> NormalFormalParameter
        FieldFormalParameter -> NormalFormalParameter
        SimpleFormalParameter -> NormalFormalParameter

        ReturnType? Identifier FormalParameterList -> FunctionDeclaration

        FinalVarOrType? THIS "." Identifier -> FieldFormalParameter

        FINAL Type? -> FinalVarOrType
        VAR -> FinalVarOrType
        Type -> FinalVarOrType

        "final" -> FINAL

        "var" -> VAR

        DeclaredIdentifier -> SimpleFormalParameter
        Identifier -> SimpleFormalParameter

        FINAL Type? Identifier -> DeclaredIdentifier
        VAR Identifier -> DeclaredIdentifier
        Type Identifier -> DeclaredIdentifier

        Expression -> ConstantExpression

        "," NamedFormalParameters -> NormalFormalParameterTail
        "," NormalFormalParameter NormalFormalParameterTail? -> NormalFormalParameterTail

        "=>" Expression -> FunctionExpressionBody
        Block -> FunctionExpressionBody

        "{" Statements "}" -> Block

        Statement* -> Statements

        Label* NonLabelledStatement -> Statement

        Block -> NonLabelledStatement
        InitializedVariableDeclaration ";" -> NonLabelledStatement
        IterationStatement -> NonLabelledStatement
        SelectionStatement -> NonLabelledStatement
        TryStatement -> NonLabelledStatement
        BREAK Identifier? ";" -> NonLabelledStatement
        CONTINUE Identifier? ";" -> NonLabelledStatement
        RETURN Expression? ";" -> NonLabelledStatement
        THROW Expression? ";" -> NonLabelledStatement
        Expression? ";" -> NonLabelledStatement
        ASSERT "(" ConditionalExpression ")" ";" -> NonLabelledStatement
        FunctionDeclaration FunctionBody -> NonLabelledStatement

        DeclaredIdentifier ("=" Expression)? ("," InitializedIdentifier)* -> InitializedVariableDeclaration

        Identifier ("=" Expression)? -> InitializedIdentifier

        WHILE "(" Expression ")" Statement -> IterationStatement
        DO Statement WHILE "(" Expression ")" ";" -> IterationStatement
        FOR "(" ForLoopParts ")" Statement -> IterationStatement

        "while" -> WHILE

        "do" -> DO

        "for" -> FOR

        ForInitializerStatement Expression? ";" ExpressionList? -> ForLoopParts
        DeclaredIdentifier IN Expression -> ForLoopParts
        Identifier IN Expression -> ForLoopParts

        InitializedVariableDeclaration ";" -> ForInitializerStatement
        Expression? ";" -> ForInitializerStatement

        "in" -> IN

        IF "(" Expression ")" Statement (ELSE Statement)? -> SelectionStatement
        SWITCH "(" Expression ")" "{" SwitchCase* DefaultCase? "}" -> SelectionStatement

        "if" -> IF

        "else" -> ELSE

        "switch" -> SWITCH

        Label? (CASE Expression ":")+ Statements -> SwitchCase

        "case" -> CASE

        Label? (CASE Expression ":")* DEFAULT ":" Statements -> DefaultCase

        "default" -> DEFAULT

        TRY Block ((CatchPart+ FinallyPart?) | FinallyPart) -> TryStatement

        "try" -> TRY

        CATCH "(" DeclaredIdentifier ("," DeclaredIdentifier)? ")" Block -> CatchPart

        "catch" -> CATCH

        FINALLY Block -> FinallyPart

        "finally" -> FINALLY

        "break" -> BREAK

        "continue" -> CONTINUE

        "return" -> RETURN

        "throw" -> THROW

        LogicalOrExpression ("?" Expression ":" Expression)? -> ConditionalExpression

        LogicalAndExpression ("||" LogicalAndExpression)* -> LogicalOrExpression

        BitwiseOrExpression ("&&" BitwiseOrExpression)* -> LogicalAndExpression

        BitwiseXorExpression ("|" BitwiseXorExpression)* -> BitwiseOrExpression
        SUPER ("|" BitwiseXorExpression)+ -> BitwiseOrExpression

        BitwiseAndExpression ("^" BitwiseAndExpression)* -> BitwiseXorExpression
        SUPER ("^" BitwiseAndExpression)+ -> BitwiseXorExpression

        EqualityExpression ("&" EqualityExpression)* -> BitwiseAndExpression
        SUPER ("&" EqualityExpression)+ -> BitwiseAndExpression

        RelationalExpression (EqualityOperator RelationalExpression)? -> EqualityExpression
        SUPER EqualityOperator RelationalExpression -> EqualityExpression

        ShiftExpression ((IsOperator Type) | (RelationalOperator ShiftExpression))? -> RelationalExpression
        SUPER RelationalOperator ShiftExpression -> RelationalExpression

        AdditiveExpression (ShiftOperator AdditiveExpression)* -> ShiftExpression
        SUPER (ShiftOperator AdditiveExpression)+ -> ShiftExpression

        MultiplicativeExpression (AdditiveOperator MultiplicativeExpression)* -> AdditiveExpression
        SUPER (AdditiveOperator MultiplicativeExpression)+ -> AdditiveExpression

        UnaryExpression (MultiplicativeOperator UnaryExpression)* -> MultiplicativeExpression
        SUPER (MultiplicativeOperator UnaryExpression)+ -> MultiplicativeExpression

        PostfixExpression -> UnaryExpression
        PrefixOperator UnaryExpression -> UnaryExpression
        NegateOperator SUPER -> UnaryExpression
        "-" SUPER -> UnaryExpression
        IncrementOperator AssignableExpression -> UnaryExpression

        AssignableExpression PostfixOperator -> PostfixExpression
        Primary Selector* -> PostfixExpression

        IncrementOperator -> PostfixOperator

        "++" -> IncrementOperator
        "--" -> IncrementOperator

        AssignableSelector -> Selector
        Arguments -> Selector

        AdditiveOperator -> PrefixOperator
        NegateOperator -> PrefixOperator

        "+" -> AdditiveOperator
        "-" -> AdditiveOperator

        "!" -> NegateOperator
        "~" -> NegateOperator

        "*" -> MultiplicativeOperator
        "/" -> MultiplicativeOperator
        "%" -> MultiplicativeOperator
        "~/" -> MultiplicativeOperator

        "<<" -> ShiftOperator
        ">>>" -> ShiftOperator
        ">>" -> ShiftOperator

        IS "!"? -> IsOperator

        ">=" -> RelationalOperator
        ">" -> RelationalOperator
        "<=" -> RelationalOperator
        "<" -> RelationalOperator

        "==" -> EqualityOperator
        "!=" -> EqualityOperator
        "===" -> EqualityOperator
        "!==" -> EqualityOperator

        "=>" Expression ";" -> FunctionBody
        Block -> FunctionBody

        "=" -> AssignmentOperator
        "*=" -> AssignmentOperator
        "/=" -> AssignmentOperator
        "~/=" -> AssignmentOperator
        "%=" -> AssignmentOperator
        "+=" -> AssignmentOperator
        "-=" -> AssignmentOperator
        "<<=" -> AssignmentOperator
        ">>>=" -> AssignmentOperator
        ">>=" -> AssignmentOperator
        "&=" -> AssignmentOperator
        "^=" -> AssignmentOperator
        "|=" -> AssignmentOperator

        ClassDefinition -> TopLevelDefinition
        InterfaceDefinition -> TopLevelDefinition
        FunctionTypeAlias -> TopLevelDefinition
        FunctionDeclaration FunctionBodyOrNative -> TopLevelDefinition
        ReturnType? GetOrSet Identifier FormalParameterList FunctionBodyOrNative -> TopLevelDefinition
        FINAL Type? StaticFinalDeclarationList ";" -> TopLevelDefinition
        ConstInitializedVariableDeclaration ";" -> TopLevelDefinition

        CLASS Identifier TypeParameters? Superclass? Interfaces? "{" ClassMemberDefinition* "}" -> ClassDefinition
        CLASS Identifier TypeParameters? Interfaces? NATIVE STRING "{" ClassMemberDefinition* "}" -> ClassDefinition

        "<" TypeParameter ("," TypeParameter)* ">" -> TypeParameters

        Identifier (EXTENDS Type)? -> TypeParameter

        EXTENDS Type -> Superclass

        IMPLEMENTS TypeList -> Interfaces

        Declaration ";" -> ClassMemberDefinition
        ConstructorDeclaration ";" -> ClassMemberDefinition
        MethodDeclaration FunctionBodyOrNative -> ClassMemberDefinition
        CONST FactoryConstructorDeclaration FunctionNative -> ClassMemberDefinition

        ConstantConstructorDeclaration (Redirection | Initializers)? -> Declaration
        FunctionDeclaration Redirection -> Declaration
        NamedConstructorDeclaration Redirection -> Declaration
        ABSTRACT SpecialSignatureDefinition -> Declaration
        ABSTRACT FunctionDeclaration -> Declaration
        STATIC FINAL Type? StaticFinalDeclarationList -> Declaration
        STATIC? ConstInitializedVariableDeclaration -> Declaration

        CONST Qualified FormalParameterList -> ConstantConstructorDeclaration

        ":" THIS ("." Identifier)? Arguments -> Redirection

        ":" SuperCallOrFieldInitializer ("," SuperCallOrFieldInitializer)* -> Initializers

        SUPER Arguments -> SuperCallOrFieldInitializer
        SUPER "." Identifier Arguments -> SuperCallOrFieldInitializer
        FieldInitializer -> SuperCallOrFieldInitializer

        (THIS ".")? Identifier "=" ConditionalExpression -> FieldInitializer

        Identifier "." Identifier FormalParameterList -> NamedConstructorDeclaration

        STATIC? ReturnType? GetOrSet Identifier FormalParameterList -> SpecialSignatureDefinition
        ReturnType? OPERATOR UserDefinableOperator FormalParameterList -> SpecialSignatureDefinition

        GET -> GetOrSet
        SET -> GetOrSet

        MultiplicativeOperator -> UserDefinableOperator
        AdditiveOperator -> UserDefinableOperator
        ShiftOperator -> UserDefinableOperator
        RelationalOperator -> UserDefinableOperator
        BitwiseOperator -> UserDefinableOperator
        "==" -> UserDefinableOperator
        "~" -> UserDefinableOperator
        NEGATE -> UserDefinableOperator
        "[" "]" -> UserDefinableOperator
        "[" "]" "=" -> UserDefinableOperator

        "&" -> BitwiseOperator
        "^" -> BitwiseOperator
        "|" -> BitwiseOperator

        StaticFinalDeclaration ("," StaticFinalDeclaration)* -> StaticFinalDeclarationList

        Identifier "=" ConstantExpression -> StaticFinalDeclaration

        DeclaredIdentifier ("=" ConstantExpression)? ("," ConstInitializedIdentifier)* -> ConstInitializedVariableDeclaration

        Identifier ("=" ConstantExpression)? -> ConstInitializedIdentifier

        Identifier FormalParameterList (Redirection | Initializers)? -> ConstructorDeclaration
        NamedConstructorDeclaration (Redirection | Initializers)? -> ConstructorDeclaration

        FactoryConstructorDeclaration -> MethodDeclaration
        STATIC FunctionDeclaration -> MethodDeclaration
        SpecialSignatureDefinition -> MethodDeclaration
        FunctionDeclaration Initializers? -> MethodDeclaration
        NamedConstructorDeclaration Initializers? -> MethodDeclaration

        FACTORY Qualified TypeParameters? ("." Identifier)? FormalParameterList -> FactoryConstructorDeclaration

        NATIVE FunctionBody -> FunctionBodyOrNative
        FunctionNative -> FunctionBodyOrNative
        FunctionBody -> FunctionBodyOrNative

        NATIVE STRING? ";" -> FunctionNative

        INTERFACE Identifier TypeParameters? Superinterfaces? FactorySpecification? "{" InterfaceMemberDefinition* "}" -> InterfaceDefinition

        EXTENDS TypeList -> Superinterfaces

        FACTORY Type -> FactorySpecification

        STATIC FINAL Type? InitializedIdentifierList ";" -> InterfaceMemberDefinition
        FunctionDeclaration ";" -> InterfaceMemberDefinition
        ConstantConstructorDeclaration ";" -> InterfaceMemberDefinition
        NamedConstructorDeclaration ";" -> InterfaceMemberDefinition
        SpecialSignatureDefinition ";" -> InterfaceMemberDefinition
        VariableDeclaration ";" -> InterfaceMemberDefinition

        InitializedIdentifier ("," InitializedIdentifier)* -> InitializedIdentifierList

        DeclaredIdentifier ("," Identifier)* -> VariableDeclaration

        TYPEDEF FunctionPrefix TypeParameters? FormalParameterList ";" -> FunctionTypeAlias

        ReturnType? Identifier -> FunctionPrefix

        LibraryDefinition EOF -> LibraryUnit

        LIBRARY "{" LibraryBody "}" -> LibraryDefinition

        LibraryImport? LibrarySource? -> LibraryBody

        IMPORT "=" "[" ImportReferences? "]" -> LibraryImport

        ImportReference ("," ImportReference)* ","? -> ImportReferences

        (IDENTIFIER ":")? STRING -> ImportReference

        SOURCE "=" "[" SourceUrls? "]" -> LibrarySource

        STRING ("," STRING)* ","? -> SourceUrls
