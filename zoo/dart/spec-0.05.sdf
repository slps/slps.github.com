module Main

exports
  sorts
        VariableDeclaration InitializedVariableDeclaration InitializedIdentifier DeclaredIdentifier FinalVarOrType FunctionSignature ReturnType FunctionBody Block FormalParameterList NormalFormalParameters NamedFormalParameters NormalFormalParameter SimpleFormalParameter FieldFormalParameter DefaultFormalParameter ClassDefinition ClassMemberDefinition MethodSignature Declaration StaticFinalDeclarationList OperatorSignature Operator UnaryOperator BinaryOperator PrefixOperator NegateOperator GetterSignature SetterSignature ConstructorSignature NamedConstructorSignature Redirection Initializers SuperCallOrFieldInitializer FieldInitializer FactoryConstructorSignature ConstantConstructorSignature Superclass Interfaces InterfaceDefinition InterfaceMemberDefinition FactorySpecification Superinterfaces TypeParameter TypeParameters Expression ExpressionList Primary Literal NullLiteral NumericLiteral NUMBER EXPONENT HEX-NUMBER HEX-DIGIT BooleanLiteral StringLiteral SINGLE-LINE-STRING MULTI-LINE-STRING ESCAPE-SEQUENCE HEX-DIGIT-SEQUENCE STRING-CONTENT-DQ STRING-CONTENT-SQ NEWLINE STRING-INTERPOLATION ListLiteral MapLiteral MapLiteralEntry FunctionExpression FunctionExpressionBody ThisExpression NewExpression ConstObjectExpression Arguments ArgumentList NamedArgument AssignmentOperator CompoundAssignmentOperator ConditionalExpression LogicalOrExpression LogicalAndExpression BitwiseOrExpression BitwiseXorExpression BitwiseAndExpression BitwiseOperator EqualityExpression EqualityOperator RelationalExpression RelationalOperator ShiftExpression ShiftOperator AdditiveExpression AdditiveOperator MultiplicativeExpression MultiplicativeOperator UnaryExpression PostfixExpression PostfixOperator IncrementOperator AssignableExpression Selector AssignableSelector Identifier IDENTIFIER-NO-DOLLAR IDENTIFIER BUILT-IN-IDENTIFIER IDENTIFIER-START IDENTIFIER-START-NO-DOLLAR IDENTIFIER-PART-NO-DOLLAR IDENTIFIER-PART Qualified IsOperator Statements Statement NonLabelledStatement ExpressionStatement IfStatement ForStatement ForLoopParts ForInitializerStatement WhileStatement DoStatement SwitchStatement SwitchCase DefaultCase TryStatement CatchPart FinallyPart ReturnStatement Label BreakStatement ContinueStatement ThrowStatement AssertStatement TopLevelDefinition GetOrSet LibraryDefinition ScriptTag LibraryName Resource Import Include CompilationUnit ScriptDefinition Type TypeArguments TypeList FunctionTypeAlias FunctionPrefix DIGIT WHITESPACE SINGLE-LINE-COMMENT MULTI-LINE-COMMENT 
  context-free syntax
        DeclaredIdentifier ("," Identifier)* -> VariableDeclaration

        DeclaredIdentifier ("=" Expression)? ("," InitializedIdentifier)* -> InitializedVariableDeclaration

        Identifier ("=" Expression)? -> InitializedIdentifier

        FinalVarOrType Identifier -> DeclaredIdentifier

        "final" Type? -> FinalVarOrType
        "var" -> FinalVarOrType
        Type -> FinalVarOrType

        ReturnType? Identifier FormalParameterList -> FunctionSignature

        "void" -> ReturnType
        Type -> ReturnType

        "=>" Expression ";" -> FunctionBody
        Block -> FunctionBody

        "{" Statements "}" -> Block

        "(" ")" -> FormalParameterList
        "(" NormalFormalParameters ("," NamedFormalParameters)? ")" -> FormalParameterList
        "(" NamedFormalParameters ")" -> FormalParameterList

        NormalFormalParameter ("," NormalFormalParameter)* -> NormalFormalParameters

        "[" DefaultFormalParameter ("," DefaultFormalParameter)* "]" -> NamedFormalParameters

        FunctionSignature -> NormalFormalParameter
        FieldFormalParameter -> NormalFormalParameter
        SimpleFormalParameter -> NormalFormalParameter

        DeclaredIdentifier -> SimpleFormalParameter
        Identifier -> SimpleFormalParameter

        FinalVarOrType? "this" "." Identifier -> FieldFormalParameter

        NormalFormalParameter ("=" ConstantExpression)? -> DefaultFormalParameter

        "class" Identifier TypeParameters? Superclass? Interfaces? "{" ClassMemberDefinition* "}" -> ClassDefinition

        Declaration ";" -> ClassMemberDefinition
        MethodSignature FunctionBody -> ClassMemberDefinition

        FactoryConstructorSignature -> MethodSignature
        "static" FunctionSignature -> MethodSignature
        GetterSignature -> MethodSignature
        SetterSignature -> MethodSignature
        OperatorSignature -> MethodSignature
        FunctionSignature Initializers? -> MethodSignature
        NamedConstructorSignature Initializers? -> MethodSignature

        ConstantConstructorSignature (Redirection | Initializers)? -> Declaration
        FunctionSignature Redirection -> Declaration
        NamedConstructorSignature Redirection -> Declaration
        "abstract" GetterSignature -> Declaration
        "abstract" SetterSignature -> Declaration
        "abstract" OperatorSignature -> Declaration
        "abstract" FunctionSignature -> Declaration
        "static" "final" Type? StaticFinalDeclarationList -> Declaration
        "static"? InitializedVariableDeclaration -> Declaration

        StaticFinalDeclaration ("," StaticFinalDeclaration)* -> StaticFinalDeclarationList

        ReturnType? Operator Operator FormalParameterList -> OperatorSignature

        UnaryOperator -> Operator
        BinaryOperator -> Operator
        "[" "]" -> Operator
        "[" "]" "=" -> Operator
        "negate" -> Operator

        NegateOperator -> UnaryOperator

        MultiplicativeOperator -> BinaryOperator
        AdditiveOperator -> BinaryOperator
        ShiftOperator -> BinaryOperator
        RelationalOperator -> BinaryOperator
        EqualityOperator -> BinaryOperator
        BitwiseOperator -> BinaryOperator

        "-" -> PrefixOperator
        NegateOperator -> PrefixOperator

        "!" -> NegateOperator
        "~" -> NegateOperator

        "static"? ReturnType? "get" Identifier FormalParameterList -> GetterSignature

        "static"? ReturnType? "set" Identifier FormalParameterList -> SetterSignature

        Identifier FormalParameterList -> ConstructorSignature
        NamedConstructorSignature -> ConstructorSignature

        Identifier "." Identifier FormalParameterList -> NamedConstructorSignature

        ":" "this" ("." Identifier)? Arguments -> Redirection

        ":" SuperCallOrFieldInitializer ("," SuperCallOrFieldInitializer)* -> Initializers

        "super" Arguments -> SuperCallOrFieldInitializer
        "super" "." Identifier Arguments -> SuperCallOrFieldInitializer
        FieldInitializer -> SuperCallOrFieldInitializer

        ("this" ".")? Identifier "=" ConditionalExpression -> FieldInitializer

        "factory" Qualified TypeParameters? ("." Identifier)? FormalParameterList -> FactoryConstructorSignature

        "const" Qualified FormalParameterList -> ConstantConstructorSignature

        "extends" Type -> Superclass

        "implements" TypeList -> Interfaces

        "interface" Identifier TypeParameters? Superinterfaces? FactorySpecification? "{" InterfaceMemberDefinition* "}" -> InterfaceDefinition

        "static" "final" Type? InitializedIdentifierList ";" -> InterfaceMemberDefinition
        FunctionSignature ";" -> InterfaceMemberDefinition
        ConstantConstructorSignature ";" -> InterfaceMemberDefinition
        NamedConstructorSignature ";" -> InterfaceMemberDefinition
        GetterSignature ";" -> InterfaceMemberDefinition
        SetterSignature ";" -> InterfaceMemberDefinition
        OperatorSignature ";" -> InterfaceMemberDefinition
        VariableDeclaration ";" -> InterfaceMemberDefinition

        "factory" Qualified TypeParameters? -> FactorySpecification

        "extends" TypeList -> Superinterfaces

        Identifier ("extends" Type)? -> TypeParameter

        "<" TypeParameter ("," TypeParameter)* ">" -> TypeParameters

        AssignableExpression AssignmentOperator Expression -> Expression
        ConditionalExpression -> Expression

        Expression ("," Expression)* -> ExpressionList

        ThisExpression -> Primary
        "super" AssignableSelector -> Primary
        FunctionExpression -> Primary
        Literal -> Primary
        Identifier -> Primary
        NewExpression -> Primary
        ConstantObjectExpression -> Primary
        "(" Expression ")" -> Primary

        NullLiteral -> Literal
        BooleanLiteral -> Literal
        NumericLiteral -> Literal
        StringLiteral -> Literal
        MapLiteral -> Literal
        ListLiteral -> Literal

        "null" -> NullLiteral

        NUMBER -> NumericLiteral
        HEX-NUMBER -> NumericLiteral

        "+"? DIGIT+ ("." DIGIT+)? EXPONENT? -> NUMBER
        "+"? "." DIGIT+ EXPONENT? -> NUMBER

        ("e" | "E") ("+" | "-")? DIGIT+ -> EXPONENT

        "0x" HEX-DIGIT+ -> HEX-NUMBER
        "0X" HEX-DIGIT+ -> HEX-NUMBER

        "a" "." "." "f" -> HEX-DIGIT
        "A" "." "." "F" -> HEX-DIGIT
        DIGIT -> HEX-DIGIT

        "true" -> BooleanLiteral
        "false" -> BooleanLiteral

        "@"? MULTI-LINE-STRING -> StringLiteral
        SINGLE-LINE-STRING -> StringLiteral

        """ STRING-CONTENT-DQ* """ -> SINGLE-LINE-STRING
        "'" STRING-CONTENT-SQ* "'" -> SINGLE-LINE-STRING
        "@' ' ' " ("~" ("'" | NEWLINE))* "'" -> SINGLE-LINE-STRING
        "@" """ ("~" (""" | NEWLINE))* """ -> SINGLE-LINE-STRING

        """"" ("~" """"")* """"" -> MULTI-LINE-STRING
        "'''" ("~" "'''")* "'''" -> MULTI-LINE-STRING

        "\n" -> ESCAPE-SEQUENCE
        "\r" -> ESCAPE-SEQUENCE
        "\f" -> ESCAPE-SEQUENCE
        "\b" -> ESCAPE-SEQUENCE
        "\t" -> ESCAPE-SEQUENCE
        "\v" -> ESCAPE-SEQUENCE
        "\x" HEX-DIGIT HEX-DIGIT -> ESCAPE-SEQUENCE
        "\u" HEX-DIGIT HEX-DIGIT HEX-DIGIT HEX-DIGIT -> ESCAPE-SEQUENCE
        "\u{" HEX-DIGIT-SEQUENCE "}" -> ESCAPE-SEQUENCE

        HEX-DIGIT HEX-DIGIT? HEX-DIGIT? HEX-DIGIT? HEX-DIGIT? HEX-DIGIT? HEX-DIGIT? -> HEX-DIGIT-SEQUENCE

        "~" ("\\" | "  "  " | "$" | NEWLINE) -> STRING-CONTENT-DQ
        "\\" "~" NEWLINE -> STRING-CONTENT-DQ
        STRING-INTERPOLATION -> STRING-CONTENT-DQ

        "~" ("\\" | "\'" | "$" | NEWLINE) -> STRING-CONTENT-SQ
        "\\" "~" NEWLINE -> STRING-CONTENT-SQ
        STRING-INTERPOLATION -> STRING-CONTENT-SQ

        "\n" -> NEWLINE
        "\r" -> NEWLINE

        "$" IDENTIFIER-NO-DOLLAR -> STRING-INTERPOLATION
        "$" "{" "Expression" "}" -> STRING-INTERPOLATION

        "const"? TypeArguments? "[" (ExpressionList ","?)? "]" -> ListLiteral

        "const"? TypeArguments? "{" (MapLiteralEntry ("," MapLiteralEntry)* ","?)? "}" -> MapLiteral

        Identifier ":" Expression -> MapLiteralEntry
        StringLiteral ":" Expression -> MapLiteralEntry

        (ReturnType? Identifier)? FormalParameterList FunctionExpressionBody -> FunctionExpression

        "=>" Expression -> FunctionExpressionBody
        Block -> FunctionExpressionBody

        "this" -> ThisExpression

        "new" Type ("." Identifier)? Arguments -> NewExpression

        "const" Type ("." Identifier)? Arguments -> ConstObjectExpression

        "(" ArgumentList? ")" -> Arguments

        NamedArgument ("," NamedArgument)* -> ArgumentList
        ExpressionList ("," NamedArgument)* -> ArgumentList

        Label Expression -> NamedArgument

        "=" -> AssignmentOperator
        CompoundAssignmentOperator -> AssignmentOperator

        "*=" -> CompoundAssignmentOperator
        "/=" -> CompoundAssignmentOperator
        "~/=" -> CompoundAssignmentOperator
        "%=" -> CompoundAssignmentOperator
        "+=" -> CompoundAssignmentOperator
        "-=" -> CompoundAssignmentOperator
        "<<=" -> CompoundAssignmentOperator
        ">>>=" -> CompoundAssignmentOperator
        ">>=" -> CompoundAssignmentOperator
        "&=" -> CompoundAssignmentOperator
        "^=" -> CompoundAssignmentOperator
        "|=" -> CompoundAssignmentOperator

        LogicalOrExpression ("?" Expression ":" Expression)? -> ConditionalExpression

        LogicalAndExpression ("||" LogicalAndExpression)* -> LogicalOrExpression

        BitwiseOrExpression ("&&" BitwiseOrExpression)* -> LogicalAndExpression

        BitwiseXorExpression ("|" BitwiseXorExpression)* -> BitwiseOrExpression
        "super" ("|" BitwiseXorExpression)+ -> BitwiseOrExpression

        BitwiseAndExpression ("^" BitwiseAndExpression)* -> BitwiseXorExpression
        "super" ("^" BitwiseAndExpression)+ -> BitwiseXorExpression

        EqualityExpression ("&" EqualityExpression)* -> BitwiseAndExpression
        "super" ("&" EqualityExpression)+ -> BitwiseAndExpression

        "&" -> BitwiseOperator
        "^" -> BitwiseOperator
        "|" -> BitwiseOperator

        RelationalExpression (EqualityOperator RelationalExpression)? -> EqualityExpression
        "super" EqualityOperator RelationalExpression -> EqualityExpression

        "==" -> EqualityOperator
        "!=" -> EqualityOperator
        "===" -> EqualityOperator
        "!==" -> EqualityOperator

        ShiftExpression ((IsOperator Type) | (RelationalOperator ShiftExpression))? -> RelationalExpression
        "super" RelationalOperator ShiftExpression -> RelationalExpression

        ">=" -> RelationalOperator
        ">" -> RelationalOperator
        "<=" -> RelationalOperator
        "<" -> RelationalOperator

        AdditiveExpression (ShiftOperator AdditiveExpression)* -> ShiftExpression
        "super" (ShiftOperator AdditiveExpression)+ -> ShiftExpression

        "<<" -> ShiftOperator
        ">>>" -> ShiftOperator
        ">>" -> ShiftOperator

        MultiplicativeExpression (AdditiveOperator MultiplicativeExpression)* -> AdditiveExpression
        "super" (AdditiveOperator MultiplicativeExpression)+ -> AdditiveExpression

        "+" -> AdditiveOperator
        "-" -> AdditiveOperator

        UnaryExpression (MultiplicativeOperator UnaryExpression)* -> MultiplicativeExpression
        "super" (MultiplicativeOperator UnaryExpression)+ -> MultiplicativeExpression

        "*" -> MultiplicativeOperator
        "/" -> MultiplicativeOperator
        "%" -> MultiplicativeOperator
        "~/" -> MultiplicativeOperator

        PrefixOperator UnaryExpression -> UnaryExpression
        PostfixExpression -> UnaryExpression
        UnaryOperator "super" -> UnaryExpression
        "-" "super" -> UnaryExpression
        IncrementOperator AssignableExpression -> UnaryExpression

        AssignableExpression PostfixOperator -> PostfixExpression
        Primary Selector* -> PostfixExpression

        IncrementOperator -> PostfixOperator

        "++" -> IncrementOperator
        "--" -> IncrementOperator

        Primary (Arguments* AssignableSelector)+ -> AssignableExpression
        "super" AssignableSelector -> AssignableExpression
        Identifier -> AssignableExpression

        AssignableSelector -> Selector
        Arguments -> Selector

        "[" Expression "]" -> AssignableSelector
        "." Identifier -> AssignableSelector

        IDENTIFIER-NO-DOLLAR -> Identifier
        IDENTIFIER -> Identifier
        BUILT-IN-IDENTIFIER -> Identifier

        IDENTIFIER-START-NO-DOLLAR IDENTIFIER-PART-NO-DOLLAR* -> IDENTIFIER-NO-DOLLAR

        IDENTIFIER-START IDENTIFIER-PART* -> IDENTIFIER

        "abstract" -> BUILT-IN-IDENTIFIER
        "assert" -> BUILT-IN-IDENTIFIER
        "Dynamic" -> BUILT-IN-IDENTIFIER
        "factory" -> BUILT-IN-IDENTIFIER
        "get" -> BUILT-IN-IDENTIFIER
        "implements" -> BUILT-IN-IDENTIFIER
        Import -> BUILT-IN-IDENTIFIER
        "interface" -> BUILT-IN-IDENTIFIER
        "library" -> BUILT-IN-IDENTIFIER
        "negate" -> BUILT-IN-IDENTIFIER
        Operator -> BUILT-IN-IDENTIFIER
        "set" -> BUILT-IN-IDENTIFIER
        "source" -> BUILT-IN-IDENTIFIER
        "static" -> BUILT-IN-IDENTIFIER
        "typedef" -> BUILT-IN-IDENTIFIER

        IDENTIFIER-START-NO-DOLLAR -> IDENTIFIER-START
        "$" -> IDENTIFIER-START

        "LETTER" -> IDENTIFIER-START-NO-DOLLAR
        "_" -> IDENTIFIER-START-NO-DOLLAR

        IDENTIFIER-START-NO-DOLLAR -> IDENTIFIER-PART-NO-DOLLAR
        DIGIT -> IDENTIFIER-PART-NO-DOLLAR

        IDENTIFIER-START -> IDENTIFIER-PART
        DIGIT -> IDENTIFIER-PART

        Identifier ("." Identifier)? -> Qualified

        "is" "!"? -> IsOperator

        Statement* -> Statements

        Label* NonLabelledStatement -> Statement

        Block -> NonLabelledStatement
        InitializedVariableDeclaration ";" -> NonLabelledStatement
        ForStatement -> NonLabelledStatement
        WhileStatement -> NonLabelledStatement
        DoStatement -> NonLabelledStatement
        SwitchStatement -> NonLabelledStatement
        IfStatement -> NonLabelledStatement
        TryStatement -> NonLabelledStatement
        BreakStatement -> NonLabelledStatement
        ContinueStatement -> NonLabelledStatement
        ReturnStatement -> NonLabelledStatement
        ThrowStatement -> NonLabelledStatement
        ExpressionStatement -> NonLabelledStatement
        AssertStatement -> NonLabelledStatement
        FunctionSignature FunctionBody -> NonLabelledStatement

        Expression? ";" -> ExpressionStatement

        "if" "(" Expression ")" Statement ("else" Statement)? -> IfStatement

        "for" "(" ForLoopParts ")" Statement -> ForStatement

        ForInitializerStatement Expression? ";" ExpressionList? -> ForLoopParts
        DeclaredIdentifier "in" Expression -> ForLoopParts
        Identifier "in" Expression -> ForLoopParts

        InitializedVariableDeclaration ";" -> ForInitializerStatement
        Expression? ";" -> ForInitializerStatement

        "while" "(" Expression ")" Statement -> WhileStatement

        "do" Statement "while" "(" Expression ")" ";" -> DoStatement

        "switch" "(" Expression ")" "{" SwitchCase* DefaultCase? "}" -> SwitchStatement

        Label? ("case" Expression ":")+ Statements -> SwitchCase

        Label? ("case" Expression ":")* "default" ":" Statements -> DefaultCase

        "try" Block ((CatchPart+ FinallyPart?) | FinallyPart) -> TryStatement

        "catch" "(" SimpleFormalParameter ("," SimpleFormalParameter)? ")" Block -> CatchPart

        "finally" Block -> FinallyPart

        "return" Expression? ";" -> ReturnStatement

        Identifier ":" -> Label

        "break" Identifier? ";" -> BreakStatement

        "continue" Identifier? ";" -> ContinueStatement

        "throw" Expression? ";" -> ThrowStatement

        "assert" "(" ConditionalExpression ")" ";" -> AssertStatement

        ClassDefinition -> TopLevelDefinition
        InterfaceDefinition -> TopLevelDefinition
        FunctionTypeAlias -> TopLevelDefinition
        FunctionSignature FunctionBody -> TopLevelDefinition
        ReturnType? GetOrSet Identifier FormalParameterList FunctionBody -> TopLevelDefinition
        "final" Type? StaticFinalDeclarationList ";" -> TopLevelDefinition
        VariableDeclaration ";" -> TopLevelDefinition

        "get" -> GetOrSet
        "set" -> GetOrSet

        ScriptTag? LibraryName Import* Include* Resource* TopLevelDefinition* -> LibraryDefinition

        "#!" ("~" NEWLINE)* NEWLINE -> ScriptTag

        "#" "library" "(" StringLiteral ")" ";" -> LibraryName

        "#" "resource" "(" StringLiteral ")" ";" -> Resource

        "#" "import" "(" StringLiteral ("," "prefix:" StringLiteral)? ")" ";" -> Import

        "#" "source" "(" StringLiteral ")" ";" -> Include

        TopLevelDefinition* EOF -> CompilationUnit

        ScriptTag? LibraryName? Import* Include* Resource* TopLevelDefinition* -> ScriptDefinition

        Qualified TypeArguments? -> Type

        "<" TypeList ">" -> TypeArguments

        Type ("," Type)* -> TypeList

        "typedef" FunctionPrefix TypeParameters? FormalParameterList ";" -> FunctionTypeAlias

        ReturnType? Identifier -> FunctionPrefix

        "0" -> DIGIT
        "1" -> DIGIT
        "2" -> DIGIT
        "3" -> DIGIT
        "4" -> DIGIT
        "5" -> DIGIT
        "6" -> DIGIT
        "7" -> DIGIT
        "8" -> DIGIT
        "9" -> DIGIT

        ("\t" | " " | NEWLINE)+ -> WHITESPACE

        "//" "~" NEWLINE* NEWLINE? -> SINGLE-LINE-COMMENT

        "/*" (MULTI-LINE-COMMENT | ("~" "*/"))* "*/" -> MULTI-LINE-COMMENT
