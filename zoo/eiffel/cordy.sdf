module Main

exports
  sorts
        Program Class-declaration Indexing Index-list Index-clause-Separator Index-clause Index Index-terms Index-value Class-header Header-mark Class-name Formal-generics Formal-generic-list Formal-generic Formal-generic-name Constraint Obsolete Message Features Feature-Feature-clause Feature-clause Feature-declaration-list Feature-declaration-Separator Header-comment Feature-declaration Declaration-body Is-Constant Feature-value Routine-feature-declaration Routine-declaration-body Is-Routine New-feature-list New-feature Feature-name Prefix Infix Prefix-name Infix-name Unary Binary Inheritance Parent-list Parent-Separator Parent Feature-adaptation Rename Rename-list Rename-pair Clients Class-list New-exports New-export-list New-export-item-Separator New-export-item Feature-set Feature-list Formal-arguments Formal-entity-declaration-list Formal-entity-declaration-group-Separator Entity-declaration-list Entity-declaration-group-Separator Entity-declaration-group Identifier-list Type-mark Routine Routine-body Effective Internal Routine-mark Deferred Local-declarations Instruction Precondition Postcondition Invariant Assertion Assertion-clause-Separator Assertion-clause Unlabeled-assertion-clause Tag-mark Tag Old Check Variant Redefine Undefine Select Type Class-type Actual-generics Type-list Class-type-expanded Bit-type Anchored Anchor Restricted-type Restricted-class-type Restricted-actual-generics Restricted-type-list Compound Instruction-Separator Separator Null Conditional Then-part-list Elseif-Then-part Then-part Else-part Multi-branch When-part-list When-When-part When-part Choices Choice Interval Loop Initialization Loop-body Exit Debug Debug-keys Debug-key-list Debug-key Rescue Retry Unique Entity Writable Attribute Local Read-only Formal Creators Creation-Creation-clause Creation-clause Creation Creation-call Assignment Assignment-attempt Call Parenthesized-qualifier Call-chain Dot-Unqualified-call Unqualified-call Actuals Actual-list Actual Address Address-mark Expression Primitive-expression Boolean-expression Equality Comparison-Operator-expression Comparison Operator-expression Parenthesized Unary-expression Binary-expression Infix-operator-Unary-expression Prefix-operator Infix-operator Constant Constant-attribute Manifest-constant Sign Integer-constant Real-constant Boolean-constant Bit-constant Manifest-array Expression-list Strip Attribute-list External Language-name External-name Identifier Manifest-string Comment Character-constant Integer Real Bit-sequence Free-operator 
  context-free syntax
        Class-declaration* -> Program

        Indexing? NL Class-header Formal-generics? (NL IN) Obsolete? Inheritance? Creators? Features? Invariant? EX "end" -> Class-declaration

        NL "indexing" Index-list -> Indexing

        (NL IN) Index-clause-Separator* EX -> Index-list

        Index-clause Separator -> Index-clause-Separator

        Index? Index-terms -> Index-clause

        Identifier ":" -> Index

        Index-value"," -> Index-terms

        Identifier+ -> Index-value
        Manifest-constant -> Index-value

        Header-mark? "class" Class-name -> Class-header

        "deferred" -> Header-mark
        "expanded" -> Header-mark

        Identifier -> Class-name

        "[" Formal-generic-list "]" -> Formal-generics

        Formal-generic"," -> Formal-generic-list

        Formal-generic-name Constraint? -> Formal-generic

        Identifier -> Formal-generic-name

        "->" Restricted-type -> Constraint

        "obsolete" Message NL -> Obsolete

        Manifest-string -> Message

        Feature-Feature-clause+ -> Features

        NL "feature" Clients? Feature-clause -> Feature-Feature-clause

        Header-comment? Feature-declaration-list -> Feature-clause

        (IN NL) Feature-declaration-Separator* EX -> Feature-declaration-list

        Feature-declaration Separator -> Feature-declaration-Separator
        Routine-feature-declaration Separator -> Feature-declaration-Separator

        Comment -> Header-comment

        New-feature-list Declaration-body -> Feature-declaration

        Formal-arguments? Type-mark? Is-Constant? -> Declaration-body

        "is" Feature-value -> Is-Constant

        Manifest-constant -> Feature-value
        Unique -> Feature-value

        NL New-feature-list Routine-declaration-body -> Routine-feature-declaration

        Formal-arguments? Type-mark? Is-Routine? -> Routine-declaration-body

        "is" NL Routine -> Is-Routine

        New-feature+ -> New-feature-list

        "frozen"? Feature-name -> New-feature

        Identifier -> Feature-name
        Prefix -> Feature-name
        Infix -> Feature-name

        "prefix" Prefix-name -> Prefix

        "infix" Infix-name -> Infix

        Manifest-string -> Prefix-name

        Manifest-string -> Infix-name

        "not" -> Unary
        "+" -> Unary
        "-" -> Unary

        "+" -> Binary
        "-" -> Binary
        "*" -> Binary
        "/" -> Binary
        "<" -> Binary
        ">" -> Binary
        "<=" -> Binary
        ">=" -> Binary
        "//" -> Binary
        "\\" -> Binary
        "^" -> Binary
        "and" -> Binary
        "or" -> Binary
        "xor" -> Binary
        "and" "then" -> Binary
        "or" "else" -> Binary
        "implies" -> Binary

        "inherit" (NL IN) Parent-list EX -> Inheritance

        Parent-Separator* -> Parent-list

        Parent Separator -> Parent-Separator

        Restricted-class-type Feature-adaptation? -> Parent

        (NL IN) Rename? New-exports? Undefine? Redefine? Select? EX "end" -> Feature-adaptation

        "rename" Rename-list NL -> Rename

        Rename-pair"," -> Rename-list

        Feature-name "as" Feature-name -> Rename-pair

        "{" Class-list "}" -> Clients

        Class-name"," -> Class-list

        "export" New-export-list NL -> New-exports

        New-export-item-Separator* -> New-export-list

        New-export-item Separator -> New-export-item-Separator

        Clients Feature-set -> New-export-item

        Feature-list -> Feature-set
        "all" -> Feature-set

        (IN NL) Feature-name"," EX -> Feature-list

        "(" Formal-entity-declaration-list ")" -> Formal-arguments

        Formal-entity-declaration-group-Separator* -> Formal-entity-declaration-list

        Entity-declaration-group ";"? -> Formal-entity-declaration-group-Separator

        (IN NL) Entity-declaration-group-Separator* EX -> Entity-declaration-list

        Entity-declaration-group Separator -> Entity-declaration-group-Separator

        Identifier-list Type-mark -> Entity-declaration-group

        Identifier+ -> Identifier-list

        ":" Type -> Type-mark

        Obsolete? Header-comment? Precondition? Local-declarations? Routine-body Postcondition? Rescue? "end" -> Routine

        Effective -> Routine-body
        Deferred -> Routine-body

        Internal -> Effective
        External -> Effective

        Routine-mark Compound -> Internal

        "do" -> Routine-mark
        "once" -> Routine-mark

        IN "deferred" (NL EX) -> Deferred

        "local" Entity-declaration-list -> Local-declarations

        Creation -> Instruction
        Call -> Instruction
        Assignment -> Instruction
        Assignment-attempt -> Instruction
        Conditional -> Instruction
        Multi-branch -> Instruction
        Loop -> Instruction
        Debug -> Instruction
        Check -> Instruction
        Retry -> Instruction
        Null -> Instruction

        "require" "else"? Assertion -> Precondition

        "ensure" "then"? Assertion -> Postcondition

        "invariant" Assertion -> Invariant

        (NL IN) Assertion-clause-Separator* EX -> Assertion

        Assertion-clause Separator -> Assertion-clause-Separator

        Tag-mark? Unlabeled-assertion-clause -> Assertion-clause

        Boolean-expression -> Unlabeled-assertion-clause
        Comment -> Unlabeled-assertion-clause

        Tag ":" -> Tag-mark

        Identifier -> Tag

        "old" Expression -> Old

        "check" Assertion "end" -> Check

        "variant" Tag-mark? Expression -> Variant

        "redefine" Feature-list NL -> Redefine

        "undefine" Feature-list NL -> Undefine

        "select" Feature-list NL -> Select

        Class-type -> Type
        Class-type-expanded -> Type
        Formal-generic-name -> Type
        Anchored -> Type
        Bit-type -> Type

        Class-name Actual-generics? -> Class-type

        "[" Type-list "]" -> Actual-generics

        Type"," -> Type-list

        "expanded" Class-type -> Class-type-expanded

        "BIT" Constant -> Bit-type

        "like" Anchor -> Anchored

        Identifier -> Anchor
        "Current" -> Anchor

        Restricted-class-type -> Restricted-type
        Formal-generic-name -> Restricted-type

        Class-name Restricted-actual-generics? -> Restricted-class-type

        "[" Restricted-type-list "]" -> Restricted-actual-generics

        Restricted-type"," -> Restricted-type-list

        (IN NL) Instruction-Separator* EX -> Compound

        Instruction Separator -> Instruction-Separator

        ";"? NL -> Separator

        ";" NL -> Null

        "if" Then-part-list Else-part? "end" -> Conditional

        Then-part Elseif-Then-part* -> Then-part-list

        "elseif" Then-part -> Elseif-Then-part

        Boolean-expression "then" Compound -> Then-part

        "else" Compound -> Else-part

        "inspect" Expression When-part-list? Else-part? "end" -> Multi-branch

        When-When-part+ -> When-part-list

        "when" When-part -> When-When-part

        Choices "then" Compound -> When-part

        Choice"," -> Choices

        Constant -> Choice
        Interval -> Choice

        Constant ".." Constant -> Interval

        Initialization Invariant? Variant? Loop-body "end" -> Loop

        "from" Compound -> Initialization

        Exit NL "loop" Compound -> Loop-body

        "until" Boolean-expression -> Exit

        "debug" Debug-keys? Compound "end" -> Debug

        "(" Debug-key-list ")" -> Debug-keys

        Debug-key"," -> Debug-key-list

        Manifest-string -> Debug-key

        "rescue" Compound -> Rescue

        "retry" -> Retry

        "unique" -> Unique

        Writable -> Entity
        Read-only -> Entity

        Attribute -> Writable
        Local -> Writable

        Identifier -> Attribute

        Identifier -> Local
        "Result" -> Local

        Formal -> Read-only
        "Current" -> Read-only

        Identifier -> Formal

        Creation-Creation-clause+ -> Creators

        NL "creation" Creation-clause -> Creation-Creation-clause

        Clients? Header-comment? Feature-list NL -> Creation-clause

        "!!" Writable Creation-call? -> Creation
        "!" Type? "!" Writable Creation-call? -> Creation

        "." Unqualified-call -> Creation-call

        Writable ":=" Expression -> Assignment

        Writable "?=" Expression -> Assignment-attempt

        Parenthesized-qualifier? Call-chain -> Call

        Parenthesized "." -> Parenthesized-qualifier

        Unqualified-call Dot-Unqualified-call* -> Call-chain

        "." Unqualified-call -> Dot-Unqualified-call

        Entity Actuals? -> Unqualified-call

        "(" Actual-list ")" -> Actuals

        Actual"," -> Actual-list

        Expression -> Actual
        Address -> Actual

        "$" Address-mark -> Address

        Feature-name -> Address-mark
        "Current" -> Address-mark
        "Result" -> Address-mark

        Equality -> Expression

        Call -> Primitive-expression
        Manifest-constant -> Primitive-expression
        Manifest-array -> Primitive-expression
        Old -> Primitive-expression
        Strip -> Primitive-expression
        Parenthesized -> Primitive-expression

        Expression -> Boolean-expression

        Operator-expression Comparison-Operator-expression* -> Equality

        Comparison Operator-expression -> Comparison-Operator-expression

        "=" -> Comparison
        "/=" -> Comparison

        Parenthesized -> Operator-expression
        Binary-expression -> Operator-expression

        "(" Expression ")" -> Parenthesized

        Prefix-operator* Primitive-expression -> Unary-expression

        Unary-expression Infix-operator-Unary-expression* -> Binary-expression

        Infix-operator Unary-expression -> Infix-operator-Unary-expression

        Unary -> Prefix-operator
        Free-operator -> Prefix-operator

        Binary -> Infix-operator
        Free-operator -> Infix-operator

        Manifest-constant -> Constant
        Constant-attribute -> Constant

        Entity -> Constant-attribute

        Boolean-constant -> Manifest-constant
        Character-constant -> Manifest-constant
        Integer-constant -> Manifest-constant
        Real-constant -> Manifest-constant
        Manifest-string -> Manifest-constant
        Bit-constant -> Manifest-constant

        "+" -> Sign
        "-" -> Sign

        Sign? Integer -> Integer-constant

        Sign? Real -> Real-constant

        "true" -> Boolean-constant
        "false" -> Boolean-constant

        Bit-sequence -> Bit-constant

        "<<" Expression-list ">>" -> Manifest-array

        Expression"," -> Expression-list

        "strip" "(" Attribute-list ")" -> Strip

        Identifier"," -> Attribute-list

        "external" Language-name External-name? NL -> External

        Manifest-string -> Language-name

        "alias" Manifest-string -> External-name

        Id -> Identifier

        String -> Manifest-string

        Comment -> Comment

        Character-constant -> Character-constant

        Integer -> Integer

        Real-number -> Real

        Bit-sequence -> Bit-sequence

        Free-operator -> Free-operator
