module Main

exports
  sorts
        ExecutableProgram ProgramUnit MainProgram ProgramStmt LblDef ProgramName MainRange BodyConstruct SpecificationPartConstruct ImplicitStmt ImplicitSpec TypeSpec KindSelector Expr DefinedBinaryOp Level5Expr EquivOp EquivOperand OrOp OrOperand AndOp AndOperand NotOp Level4Expr Level3Expr ConcatOp Level2Expr AddOp AddOperand MultOp MultOperand Level1Expr DefinedUnaryOp Primary ArrayConstructor AcValueList AcValue AcImpliedDo ImpliedDoVariable UnsignedArithmeticConstant KindParam NamedConstantUse ComplexConst Name DataRef SectionSubscriptList SectionSubscript SubscriptTriplet FunctionReference FunctionArgList FunctionArg LogicalConstant PowerOp Sign RelOp CharSelector TypeParamValue SpecificationExpr TypeName LengthSelector CharLength LetterSpec ParameterStmt NamedConstantDefList NamedConstantDef NamedConstant FormatStmt FormatItemList FormatItem DataEditDescr ControlEditDescr PositionEditDescr SignEditDescr BlankInterpEditDescr CharStringEditDescr EntryStmt EntryName SubroutineParList SubroutinePar DummyArgName DeclarationConstruct TypeDeclarationStmt AttrSpec AccessSpec ArraySpec AssumedShapeSpecList LowerBound DeferredShapeSpecList DeferredShapeSpec AssumedShapeSpec ExplicitShapeSpecList ExplicitShapeSpec UpperBound AssumedSizeSpec IntentSpec EntityDecl ObjectName SpecificationStmt AccessStmt AccessIdList AccessId GenericName GenericSpec DefinedOperator AllocatableStmt ArrayAllocationList ArrayAllocation ArrayName CommonStmt Comblock CommonBlockName CommonBlockObjectList CommonBlockObject VariableName ArrayDeclarator DataStmt Datalist DataStmtSet DataStmtObjectList DataStmtObject Variable Subscript SubstringRange DataImpliedDo DataIDoObjectList DataIDoObject ArrayElement StructureComponent FieldSelector DataStmtValueList DataStmtValue Constant StructureConstructor BozLiteralConstant DimensionStmt ArrayDeclaratorList EquivalenceStmt EquivalenceSetList EquivalenceSet EquivalenceObject ExternalStmt ExternalName IntrinsicStmt IntrinsicProcedureName SaveStmt SavedEntityList SavedEntity IntentStmt IntentParList IntentPar NamelistStmt NamelistGroup NamelistGroupName NamelistGroupObject OptionalStmt OptionalParList OptionalPar PointerStmt PointerStmtObjectList PointerStmtObject TargetStmt TargetObjectList TargetObject DerivedTypeDef DerivedTypeStmt DerivedTypeBody PrivateSequenceStmt ComponentDefStmt ComponentAttrSpecList ComponentAttrSpec ComponentArraySpec ComponentDeclList ComponentDecl ComponentName EndTypeStmt InterfaceBlock InterfaceStmt InterfaceBlockPart InterfaceBody FunctionPrefix FunctionName FunctionInterfaceRange FunctionParList FunctionPar SubprogramInterfaceBody EndFunctionStmt EndName SubroutineName SubroutineInterfaceRange EndSubroutineStmt ModuleProcedureStmt ProcedureNameList ProcedureName EndInterfaceStmt UseStmt RenameList Rename UseName OnlyList Only ExecutableConstruct ActionStmt AllocateStmt AllocationList Allocation AllocateObject AllocatedShape CycleStmt DeallocateStmt AllocateObjectList ExitStmt NullifyStmt PointerObjectList PointerObject PointerField SFExprList SFExpr SFTerm SFFactor SFPrimary SFDummyArgNameList SFDummyArgName PointerAssignmentStmt Target WhereStmt MaskExpr AssignmentStmt ArithmeticIfStmt ScalarNumericExpr LblRef AssignStmt BackspaceStmt UnitIdentifier UFExpr UFTerm UFFactor UFPrimary PositionSpec ScalarVariable CallStmt SubroutineNameUse ActualArg CloseStmt CloseSpecList CloseSpec CExpr CPrimary COperand ContinueStmt EndfileStmt GotoStmt GoToKw ComputedGotoStmt ScalarIntExpr AssignedGotoStmt IfStmt ScalarLogicalExpr InquireStmt InquireSpecList InquireSpec OutputItemList OutputItem OutputImpliedDo OpenStmt ConnectSpecList ConnectSpec PauseStmt PrintStmt FormatIdentifier ReadStmt RdCtlSpec RdUnitId RdIoCtlSpecList IoControlSpec InputItemList InputItem InputImpliedDo RdFmtId RdFmtIdExpr ReturnStmt RewindStmt StopStmt WriteStmt IoControlSpecList DoConstruct BlockDoConstruct LoopControl Int-Real-Dp-Expression LabelDoStmt IfConstruct IfThenStmt IfConstructName ExecutionPartConstruct ElseIfStmt ElseStmt EndIfStmt CaseConstruct SelectCaseRange SelectCaseBody CaseBodyConstruct CaseStmt CaseSelector CaseValueRange EndSelectStmt WhereConstruct WhereConstructStmt ElsewhereStmt EndWhereStmt EndDoStmt EndProgramStmt InternalSubProgPart Body ContainsStmt InternalSubprogram FunctionSubprogram FunctionRange SubroutineSubprogram SubroutineRange Module ModuleStmt ModuleName ModuleBody ModuleSubprogramPartConstruct ModuleSubprogram EndModuleStmt BlockDataSubprogram BlockDataStmt BlockDataName BlockDataBody BlockDataBodyConstruct EndBlockDataStmt 
  context-free syntax
        StartCommentBlock? ProgramUnit+ -> ExecutableProgram

        MainProgram -> ProgramUnit
        FunctionSubprogram -> ProgramUnit
        SubroutineSubprogram -> ProgramUnit
        Module -> ProgramUnit
        BlockDataSubprogram -> ProgramUnit

        ProgramStmt? MainRange -> MainProgram

        LblDef "program" ProgramName EOS -> ProgramStmt

        Label? -> LblDef

        Ident -> ProgramName

        BodyConstruct+ EndProgramStmt -> MainRange
        InternalSubProgPart EndProgramStmt -> MainRange
        EndProgramStmt -> MainRange

        SpecificationPartConstruct -> BodyConstruct
        ExecutableConstruct -> BodyConstruct

        ImplicitStmt -> SpecificationPartConstruct
        ParameterStmt -> SpecificationPartConstruct
        FormatStmt -> SpecificationPartConstruct
        EntryStmt -> SpecificationPartConstruct
        DeclarationConstruct -> SpecificationPartConstruct
        UseStmt -> SpecificationPartConstruct

        LblDef "implicit" "none" EOS -> ImplicitStmt
        LblDef "implicit" ImplicitSpec ("," ImplicitSpec)* EOS -> ImplicitStmt

        TypeSpec "(" LetterSpec ("," LetterSpec)* ")" -> ImplicitSpec

        "integer" KindSelector -> TypeSpec
        "real" KindSelector -> TypeSpec
        "double" "precision" -> TypeSpec
        "complex" KindSelector -> TypeSpec
        "character" CharSelector -> TypeSpec
        "logical" KindSelector -> TypeSpec
        "type" "(" TypeName ")" -> TypeSpec
        "integer" -> TypeSpec
        "real" -> TypeSpec
        "complex" -> TypeSpec
        "logical" -> TypeSpec
        "character" -> TypeSpec
        "character" LengthSelector -> TypeSpec

        "(" ("kind" "=")? Expr ")" -> KindSelector
        "*" Icon -> KindSelector

        (Expr DefinedBinaryOp)? Level5Expr -> Expr

        Dop -> DefinedBinaryOp

        (Level5Expr EquivOp)? EquivOperand -> Level5Expr

        ".eqv." -> EquivOp
        ".neqv." -> EquivOp

        (EquivOperand OrOp)? OrOperand -> EquivOperand

        ".or." -> OrOp

        (OrOperand AndOp)? AndOperand -> OrOperand

        ".and." -> AndOp

        NotOp? Level4Expr -> AndOperand

        ".not." -> NotOp

        (Level3Expr RelOp)? Level3Expr -> Level4Expr

        (Level3Expr ConcatOp)? Level2Expr -> Level3Expr

        "//" -> ConcatOp

        (Level2Expr AddOp)? AddOperand -> Level2Expr
        Sign AddOperand -> Level2Expr

        "+" -> AddOp
        "-" -> AddOp

        (AddOperand MultOp)? MultOperand -> AddOperand

        "*" -> MultOp
        "/" -> MultOp

        Level1Expr (PowerOp MultOperand)? -> MultOperand

        DefinedUnaryOp? Primary -> Level1Expr

        Dop -> DefinedUnaryOp

        ArrayConstructor -> Primary
        UnsignedArithmeticConstant -> Primary
        Name -> Primary
        DataRef -> Primary
        FunctionReference -> Primary
        "(" Expr ")" -> Primary
        Scon -> Primary
        LogicalConstant -> Primary

        "(/" AcValueList "/)" -> ArrayConstructor

        AcValue ("," AcValue)* -> AcValueList

        Expr -> AcValue
        AcImpliedDo -> AcValue

        "(" Expr "," ImpliedDoVariable "=" Expr "," Expr ")" -> AcImpliedDo
        "(" Expr "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")" -> AcImpliedDo
        "(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr ")" -> AcImpliedDo
        "(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")" -> AcImpliedDo

        Ident -> ImpliedDoVariable

        Icon "_" KindParam -> UnsignedArithmeticConstant
        Rcon "_" KindParam -> UnsignedArithmeticConstant
        Icon -> UnsignedArithmeticConstant
        Rcon -> UnsignedArithmeticConstant
        ComplexConst -> UnsignedArithmeticConstant

        Icon -> KindParam
        NamedConstantUse -> KindParam

        Ident -> NamedConstantUse

        "(" Expr "," Expr ")" -> ComplexConst

        Ident -> Name

        Name "%" Name -> DataRef
        DataRef "%" Name -> DataRef
        Name "(" SectionSubscriptList ")" -> DataRef
        DataRef "(" SectionSubscriptList ")" -> DataRef

        SectionSubscript ("," SectionSubscript)* -> SectionSubscriptList

        Expr -> SectionSubscript
        SubscriptTriplet -> SectionSubscript

        Expr? ":" Expr? (":" Expr)? -> SubscriptTriplet

        Name "(" FunctionArgList? ")" -> FunctionReference

        FunctionArg -> FunctionArgList
        FunctionArgList "," FunctionArg -> FunctionArgList
        SectionSubscriptList "," FunctionArg -> FunctionArgList

        Name "=" Expr -> FunctionArg

        ".true." "_" KindParam -> LogicalConstant
        ".false." "_" KindParam -> LogicalConstant
        ".true." -> LogicalConstant
        ".false." -> LogicalConstant

        "**" -> PowerOp

        "+" -> Sign
        "-" -> Sign

        "==" -> RelOp
        "/=" -> RelOp
        "<" -> RelOp
        "<=" -> RelOp
        ">" -> RelOp
        ">=" -> RelOp
        ".eq." -> RelOp
        ".ne." -> RelOp
        ".lt." -> RelOp
        ".le." -> RelOp
        ".gt." -> RelOp
        ".ge." -> RelOp

        "(" "len" "=" TypeParamValue "," "kind" "=" Expr ")" -> CharSelector
        "(" "len" "=" TypeParamValue "," Expr ")" -> CharSelector
        "(" "len" "=" TypeParamValue ")" -> CharSelector
        "(" ("kind" "=")? Expr ")" -> CharSelector

        SpecificationExpr -> TypeParamValue
        "*" -> TypeParamValue

        Expr -> SpecificationExpr

        Ident -> TypeName

        "(" TypeParamValue ")" -> LengthSelector
        "*" CharLength -> LengthSelector

        "(" TypeParamValue ")" -> CharLength
        ScalarIntLiteralConstant -> CharLength

        Letter ("-" Letter)? -> LetterSpec

        LblDef "parameter" "(" NamedConstantDefList ")" EOS -> ParameterStmt

        NamedConstantDef ("," NamedConstantDef)* -> NamedConstantDefList

        NamedConstant "=" Expr -> NamedConstantDef

        Ident -> NamedConstant

        LblDef "format" "(" FormatItemList? ")" EOS -> FormatStmt

        FormatItem ("," FormatItem)* -> FormatItemList

        Icon? DataEditDescr -> FormatItem
        ControlEditDescr -> FormatItem
        CharStringEditDescr -> FormatItem
        Icon? "(" FormatItemList ")" -> FormatItem
        FormatItem ":" FormatItem -> FormatItem

        "I" Icon ("." Icon)? -> DataEditDescr
        "O" Icon ("." Icon)? -> DataEditDescr
        "B" Icon ("." Icon)? -> DataEditDescr
        "Z" Icon ("." Icon)? -> DataEditDescr
        "F" Icon "." Icon -> DataEditDescr
        "E" Icon "." Icon ("E" Icon)? -> DataEditDescr
        "EN" Icon "." Icon ("E" Icon)? -> DataEditDescr
        "ES" Icon "." Icon ("E" Icon)? -> DataEditDescr
        "G" Icon "." Icon ("E" Icon)? -> DataEditDescr
        "L" Icon -> DataEditDescr
        "A" Icon? -> DataEditDescr
        "D" Icon "." Icon -> DataEditDescr

        PositionEditDescr -> ControlEditDescr
        Icon? "/" -> ControlEditDescr
        ":" -> ControlEditDescr
        SignEditDescr -> ControlEditDescr
        ("-" | "+")? Icon "P" (Icon? DataEditDescr)? -> ControlEditDescr
        BlankInterpEditDescr -> ControlEditDescr

        "T" Icon -> PositionEditDescr
        "TL" Icon -> PositionEditDescr
        "TR" Icon -> PositionEditDescr
        Icon "X" -> PositionEditDescr

        "S" -> SignEditDescr
        "SP" -> SignEditDescr
        "SS" -> SignEditDescr

        "BN" -> BlankInterpEditDescr
        "BZ" -> BlankInterpEditDescr

        Scon -> CharStringEditDescr
        Icon "H" Character+ -> CharStringEditDescr

        LblDef "entry" EntryName SubroutineParList EOS -> EntryStmt
        LblDef "entry" EntryName SubroutineParList "result" "(" Name ")" EOS -> EntryStmt

        Ident -> EntryName

        "(" (SubroutinePar ("," SubroutinePar)*)? ")" -> SubroutineParList

        DummyArgName -> SubroutinePar
        "*" -> SubroutinePar

        Ident -> DummyArgName

        TypeDeclarationStmt -> DeclarationConstruct
        SpecificationStmt -> DeclarationConstruct
        DerivedTypeDef -> DeclarationConstruct
        InterfaceBlock -> DeclarationConstruct

        LblDef TypeSpec ("," AttrSpec)* ":" ":" EntityDecl ("," EntityDecl)* EOS -> TypeDeclarationStmt
        LblDef TypeSpec EntityDecl ("," EntityDecl)* EOS -> TypeDeclarationStmt

        "parameter" -> AttrSpec
        AccessSpec -> AttrSpec
        "allocatable" -> AttrSpec
        "dimension" "(" ArraySpec ")" -> AttrSpec
        "external" -> AttrSpec
        "intent" "(" IntentSpec ")" -> AttrSpec
        "intrinsic" -> AttrSpec
        "optional" -> AttrSpec
        "pointer" -> AttrSpec
        "save" -> AttrSpec
        "target" -> AttrSpec

        "public" -> AccessSpec
        "private" -> AccessSpec

        AssumedShapeSpecList -> ArraySpec
        DeferredShapeSpecList -> ArraySpec
        ExplicitShapeSpecList -> ArraySpec
        AssumedSizeSpec -> ArraySpec

        LowerBound ":" -> AssumedShapeSpecList
        DeferredShapeSpecList "," LowerBound ":" -> AssumedShapeSpecList
        AssumedShapeSpecList "," AssumedShapeSpec -> AssumedShapeSpecList

        SpecificationExpr -> LowerBound

        DeferredShapeSpec ("," DeferredShapeSpec)* -> DeferredShapeSpecList

        ":" -> DeferredShapeSpec

        LowerBound? ":" -> AssumedShapeSpec

        ExplicitShapeSpec ("," ExplicitShapeSpec)* -> ExplicitShapeSpecList

        (LowerBound ":")? UpperBound -> ExplicitShapeSpec

        SpecificationExpr -> UpperBound

        (LowerBound ":")? "*" -> AssumedSizeSpec
        ExplicitShapeSpecList "," "*" -> AssumedSizeSpec
        ExplicitShapeSpecList "," LowerBound ":" "*" -> AssumedSizeSpec

        "in" -> IntentSpec
        "out" -> IntentSpec
        "in" "out" -> IntentSpec

        ObjectName "=" Expr -> EntityDecl
        ObjectName "(" ArraySpec ")" "=" Expr -> EntityDecl
        ObjectName "*" CharLength "=" Expr -> EntityDecl
        ObjectName "*" CharLength "(" ArraySpec ")" "=" Expr -> EntityDecl
        ObjectName -> EntityDecl
        ObjectName "*" CharLength -> EntityDecl
        ObjectName "(" ArraySpec ")" -> EntityDecl
        ObjectName "(" ArraySpec ")" "*" CharLength -> EntityDecl

        Ident -> ObjectName

        AccessStmt -> SpecificationStmt
        AllocatableStmt -> SpecificationStmt
        CommonStmt -> SpecificationStmt
        DataStmt -> SpecificationStmt
        DimensionStmt -> SpecificationStmt
        EquivalenceStmt -> SpecificationStmt
        ExternalStmt -> SpecificationStmt
        IntrinsicStmt -> SpecificationStmt
        SaveStmt -> SpecificationStmt
        IntentStmt -> SpecificationStmt
        NamelistStmt -> SpecificationStmt
        OptionalStmt -> SpecificationStmt
        PointerStmt -> SpecificationStmt
        TargetStmt -> SpecificationStmt

        LblDef AccessSpec ":" ":" AccessIdList EOS -> AccessStmt
        LblDef AccessSpec AccessIdList? EOS -> AccessStmt

        AccessId ("," AccessId)* -> AccessIdList

        GenericName -> AccessId
        GenericSpec -> AccessId

        Ident -> GenericName

        "operator" "(" DefinedOperator ")" -> GenericSpec
        "assignment" "(" "=" ")" -> GenericSpec

        Dop -> DefinedOperator
        PowerOp -> DefinedOperator
        MultOp -> DefinedOperator
        AddOp -> DefinedOperator
        ConcatOp -> DefinedOperator
        RelOp -> DefinedOperator
        NotOp -> DefinedOperator
        AndOp -> DefinedOperator
        OrOp -> DefinedOperator
        EquivOp -> DefinedOperator

        LblDef "allocatable" ":" ":" ArrayAllocationList EOS -> AllocatableStmt
        LblDef "allocatable" ArrayAllocationList EOS -> AllocatableStmt

        ArrayAllocation ("," ArrayAllocation)* -> ArrayAllocationList

        ArrayName ("(" DeferredShapeSpecList ")")? -> ArrayAllocation

        Ident -> ArrayName

        LblDef "common" Comblock? CommonBlockObjectList (","? Comblock CommonBlockObjectList)* EOS -> CommonStmt

        "/" CommonBlockName? "/" -> Comblock

        Ident -> CommonBlockName

        CommonBlockObject ("," CommonBlockObject)* -> CommonBlockObjectList

        VariableName -> CommonBlockObject
        ArrayDeclarator -> CommonBlockObject

        Ident -> VariableName

        VariableName "(" ArraySpec ")" -> ArrayDeclarator

        LblDef "data" Datalist EOS -> DataStmt

        DataStmtSet ("," DataStmtSet)* -> Datalist

        DataStmtObjectList "/" DataStmtValueList "/" -> DataStmtSet

        DataStmtObject ("," DataStmtObject)* -> DataStmtObjectList

        Variable -> DataStmtObject
        DataImpliedDo -> DataStmtObject

        VariableName -> Variable
        VariableName "(" Subscript ("," Subscript)* ")" -> Variable
        VariableName SubstringRange -> Variable
        VariableName "(" Subscript ("," Subscript)* ")" SubstringRange -> Variable

        Expr -> Subscript

        "(" SubscriptTriplet ")" -> SubstringRange

        "(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr ("," Expr)? ")" -> DataImpliedDo

        DataIDoObject ("," DataIDoObject)* -> DataIDoObjectList

        ArrayElement -> DataIDoObject
        DataImpliedDo -> DataIDoObject
        StructureComponent -> DataIDoObject

        StructureComponent "(" SectionSubscriptList ")" -> ArrayElement
        VariableName "(" SectionSubscriptList ")" -> ArrayElement

        VariableName FieldSelector -> StructureComponent
        StructureComponent FieldSelector -> StructureComponent

        "(" SectionSubscriptList ")" "%" Name -> FieldSelector
        "%" Name -> FieldSelector

        DataStmtValue ("," DataStmtValue)* -> DataStmtValueList

        Constant -> DataStmtValue
        NamedConstantUse "*" Constant -> DataStmtValue

        NamedConstantUse -> Constant
        UnsignedArithmeticConstant -> Constant
        "+" UnsignedArithmeticConstant -> Constant
        "-" UnsignedArithmeticConstant -> Constant
        Scon -> Constant
        LogicalConstant -> Constant
        Icon "_" Scon -> Constant
        NamedConstantUse "_" Scon -> Constant
        StructureConstructor -> Constant
        BozLiteralConstant -> Constant

        TypeName "(" Expr ("," Expr)* ")" -> StructureConstructor

        BinaryConstant -> BozLiteralConstant
        OctalConstant -> BozLiteralConstant
        HexConstant -> BozLiteralConstant

        LblDef "dimension" ":" ":" ArrayDeclaratorList EOS -> DimensionStmt
        LblDef "dimension" ArrayDeclaratorList EOS -> DimensionStmt

        ArrayDeclarator ("," ArrayDeclarator)* -> ArrayDeclaratorList

        LblDef "equivalence" EquivalenceSetList EOS -> EquivalenceStmt

        EquivalenceSet ("," EquivalenceSet)* -> EquivalenceSetList

        "(" EquivalenceObject "," EquivalenceObject ("," EquivalenceObject)* ")" -> EquivalenceSet

        ArrayName -> EquivalenceObject
        Variable -> EquivalenceObject

        LblDef "external" ExternalName ("," ExternalName)* EOS -> ExternalStmt

        Ident -> ExternalName

        LblDef "intrinsic" IntrinsicProcedureName ("," IntrinsicProcedureName)* EOS -> IntrinsicStmt

        Ident -> IntrinsicProcedureName

        LblDef "save" ":" ":" SavedEntityList EOS -> SaveStmt
        LblDef "save" SavedEntityList? EOS -> SaveStmt

        SavedEntity ("," SavedEntity)* -> SavedEntityList

        VariableName -> SavedEntity
        "/" CommonBlockName "/" -> SavedEntity

        LblDef "intent" "(" IntentSpec ")" ":" ":" IntentParList EOS -> IntentStmt
        LblDef "intent" "(" IntentSpec ")" IntentParList EOS -> IntentStmt

        IntentPar ("," IntentPar)* -> IntentParList

        DummyArgName -> IntentPar

        LblDef "namelist" NamelistGroup (","? NamelistGroup)* EOS -> NamelistStmt

        "/" NamelistGroupName "/" NamelistGroupObject ("," NamelistGroupObject)* -> NamelistGroup

        Ident -> NamelistGroupName

        VariableName -> NamelistGroupObject

        LblDef "optional" ":" ":" OptionalParList EOS -> OptionalStmt
        LblDef "optional" OptionalParList EOS -> OptionalStmt

        OptionalPar ("," OptionalPar)* -> OptionalParList

        DummyArgName -> OptionalPar

        LblDef "pointer" ":" ":" PointerStmtObjectList EOS -> PointerStmt
        LblDef "pointer" PointerStmtObjectList EOS -> PointerStmt

        PointerStmtObject ("," PointerStmtObject)* -> PointerStmtObjectList

        ObjectName -> PointerStmtObject
        ObjectName "(" DeferredShapeSpecList ")" -> PointerStmtObject

        LblDef "target" ":" ":" TargetObjectList EOS -> TargetStmt
        LblDef "target" TargetObjectList EOS -> TargetStmt

        TargetObject ("," TargetObject)* -> TargetObjectList

        ObjectName -> TargetObject
        ObjectName "(" ArraySpec ")" -> TargetObject

        DerivedTypeStmt DerivedTypeBody+ EndTypeStmt -> DerivedTypeDef

        LblDef "type" TypeName EOS -> DerivedTypeStmt
        LblDef "type" ":" ":" TypeName EOS -> DerivedTypeStmt
        LblDef "type" "," AccessSpec ":" ":" TypeName EOS -> DerivedTypeStmt

        PrivateSequenceStmt -> DerivedTypeBody
        ComponentDefStmt -> DerivedTypeBody

        LblDef "private" EOS -> PrivateSequenceStmt
        LblDef "sequence" EOS -> PrivateSequenceStmt

        LblDef TypeSpec ("," ComponentAttrSpecList)? ":" ":" ComponentDeclList EOS -> ComponentDefStmt
        LblDef TypeSpec ComponentDeclList EOS -> ComponentDefStmt

        ComponentAttrSpec ("," ComponentAttrSpec)* -> ComponentAttrSpecList

        "pointer" -> ComponentAttrSpec
        "dimension" "(" ComponentArraySpec ")" -> ComponentAttrSpec

        ExplicitShapeSpecList -> ComponentArraySpec
        DeferredShapeSpecList -> ComponentArraySpec

        ComponentDecl ("," ComponentDecl)* -> ComponentDeclList

        ComponentName ("(" ComponentArraySpec ")")? ("*" CharLength)? -> ComponentDecl

        Ident -> ComponentName

        LblDef "end" "type" TypeName? EOS -> EndTypeStmt

        InterfaceStmt InterfaceBlockPart+ EndInterfaceStmt -> InterfaceBlock

        LblDef "interface" GenericName EOS -> InterfaceStmt
        LblDef "interface" GenericSpec EOS -> InterfaceStmt
        LblDef "interface" EOS -> InterfaceStmt

        InterfaceBody -> InterfaceBlockPart
        ModuleProcedureStmt -> InterfaceBlockPart

        LblDef FunctionPrefix FunctionName FunctionInterfaceRange -> InterfaceBody
        LblDef "subroutine" SubroutineName SubroutineInterfaceRange -> InterfaceBody

        "recursive" "function" -> FunctionPrefix
        "recursive" TypeSpec "function" -> FunctionPrefix
        TypeSpec "recursive" "function" -> FunctionPrefix
        TypeSpec? "function" -> FunctionPrefix

        Ident -> FunctionName

        FunctionParList EOS SubprogramInterfaceBody EndFunctionStmt -> FunctionInterfaceRange
        FunctionParList EOS EndFunctionStmt -> FunctionInterfaceRange

        "(" (FunctionPar ("," FunctionPar)*)? ")" -> FunctionParList

        DummyArgName -> FunctionPar

        SpecificationPartConstruct -> SubprogramInterfaceBody
        SubprogramInterfaceBody SpecificationPartConstruct -> SubprogramInterfaceBody

        LblDef "end" EOS -> EndFunctionStmt
        LblDef "end" "function" EndName? EOS -> EndFunctionStmt

        Ident -> EndName

        Ident -> SubroutineName

        SubroutineParList EOS SubprogramInterfaceBody EndSubroutineStmt -> SubroutineInterfaceRange
        SubroutineParList EOS EndSubroutineStmt -> SubroutineInterfaceRange

        LblDef "end" "subroutine" EndName? EOS -> EndSubroutineStmt
        LblDef "end" EOS -> EndSubroutineStmt

        LblDef "module" "procedure" ProcedureNameList EOS -> ModuleProcedureStmt

        ProcedureName ("," ProcedureName)* -> ProcedureNameList

        Ident -> ProcedureName

        LblDef "end" "interface" EOS -> EndInterfaceStmt

        LblDef "use" Name ("," RenameList)? EOS -> UseStmt
        LblDef "use" Name "," "only" ":" OnlyList? EOS -> UseStmt

        Rename ("," Rename)* -> RenameList

        Ident "=>" UseName -> Rename

        Ident -> UseName

        Only ("," Only)* -> OnlyList

        GenericSpec -> Only
        (Ident "=>")? UseName -> Only

        ActionStmt -> ExecutableConstruct
        DoConstruct -> ExecutableConstruct
        IfConstruct -> ExecutableConstruct
        CaseConstruct -> ExecutableConstruct
        WhereConstruct -> ExecutableConstruct
        EndDoStmt -> ExecutableConstruct

        AllocateStmt -> ActionStmt
        CycleStmt -> ActionStmt
        DeallocateStmt -> ActionStmt
        ExitStmt -> ActionStmt
        NullifyStmt -> ActionStmt
        PointerAssignmentStmt -> ActionStmt
        WhereStmt -> ActionStmt
        ArithmeticIfStmt -> ActionStmt
        AssignmentStmt -> ActionStmt
        AssignStmt -> ActionStmt
        BackspaceStmt -> ActionStmt
        CallStmt -> ActionStmt
        CloseStmt -> ActionStmt
        ContinueStmt -> ActionStmt
        EndfileStmt -> ActionStmt
        GotoStmt -> ActionStmt
        ComputedGotoStmt -> ActionStmt
        AssignedGotoStmt -> ActionStmt
        IfStmt -> ActionStmt
        InquireStmt -> ActionStmt
        OpenStmt -> ActionStmt
        PauseStmt -> ActionStmt
        PrintStmt -> ActionStmt
        ReadStmt -> ActionStmt
        ReturnStmt -> ActionStmt
        RewindStmt -> ActionStmt
        StopStmt -> ActionStmt
        WriteStmt -> ActionStmt

        LblDef "allocate" "(" AllocationList "," "stat" "=" Variable ")" EOS -> AllocateStmt
        LblDef "allocate" "(" AllocationList ")" EOS -> AllocateStmt

        Allocation ("," Allocation)* -> AllocationList

        AllocateObject AllocatedShape? -> Allocation

        VariableName -> AllocateObject
        AllocateObject FieldSelector -> AllocateObject

        "(" SectionSubscriptList ")" -> AllocatedShape

        LblDef "cycle" EndName? EOS -> CycleStmt

        LblDef "deallocate" "(" AllocateObjectList "," "stat" "=" Variable ")" EOS -> DeallocateStmt
        LblDef "deallocate" "(" AllocateObjectList ")" EOS -> DeallocateStmt

        AllocateObject ("," AllocateObject)* -> AllocateObjectList

        LblDef "exit" EndName? EOS -> ExitStmt

        LblDef "nullify" "(" PointerObjectList ")" EOS -> NullifyStmt

        PointerObject ("," PointerObject)* -> PointerObjectList

        Name -> PointerObject
        PointerField -> PointerObject

        Name "(" SFExprList ")" "%" Name -> PointerField
        Name "(" SFDummyArgNameList ")" "%" Name -> PointerField
        Name "%" Name -> PointerField
        PointerField FieldSelector -> PointerField

        SFExpr ":" Expr ":" Expr -> SFExprList
        SFExpr ":" ":" Expr -> SFExprList
        ":" Expr ":" Expr -> SFExprList
        ":" ":" Expr -> SFExprList
        ":" -> SFExprList
        ":" Expr -> SFExprList
        SFExpr -> SFExprList
        SFExpr ":" -> SFExprList
        SFExpr ":" Expr -> SFExprList
        SFExprList "," SectionSubscript -> SFExprList
        SFDummyArgNameList "," ":" -> SFExprList
        SFDummyArgNameList "," ":" Expr -> SFExprList
        SFDummyArgNameList "," SFExpr ":" -> SFExprList
        SFDummyArgNameList "," SFExpr ":" Expr -> SFExprList

        SFTerm -> SFExpr
        Sign AddOperand -> SFExpr
        SFExpr AddOp AddOperand -> SFExpr

        SFFactor -> SFTerm
        SFTerm MultOp MultOperand -> SFTerm

        SFPrimary -> SFFactor
        SFPrimary PowerOp MultOperand -> SFFactor

        ArrayConstructor -> SFPrimary
        Icon -> SFPrimary
        Name -> SFPrimary
        DataRef -> SFPrimary
        FunctionReference -> SFPrimary
        "(" Expr ")" -> SFPrimary

        SFDummyArgName ("," SFDummyArgName)* -> SFDummyArgNameList

        Ident -> SFDummyArgName

        LblDef Name "=>" Target EOS -> PointerAssignmentStmt
        LblDef Name "%" Name "=>" Target EOS -> PointerAssignmentStmt
        LblDef Name "%" DataRef "=>" Target EOS -> PointerAssignmentStmt
        LblDef Name "(" SFExprList ")" "%" Name "=>" Target EOS -> PointerAssignmentStmt
        LblDef Name "(" SFExprList ")" "%" DataRef "=>" Target EOS -> PointerAssignmentStmt
        LblDef Name "(" SFDummyArgNameList ")" "%" Name "=>" Target EOS -> PointerAssignmentStmt
        LblDef Name "(" SFDummyArgNameList ")" "%" DataRef "=>" Target EOS -> PointerAssignmentStmt

        Expr -> Target

        LblDef "where" "(" MaskExpr ")" AssignmentStmt -> WhereStmt

        Expr -> MaskExpr

        LblDef Name "%" Name "=" Expr EOS -> AssignmentStmt
        LblDef Name "%" DataRef "=" Expr EOS -> AssignmentStmt
        LblDef Name "(" SFExprList ")" "%" Name "=" Expr EOS -> AssignmentStmt
        LblDef Name "(" SFExprList ")" "%" DataRef "=" Expr EOS -> AssignmentStmt
        LblDef Name "(" SFDummyArgNameList ")" "%" Name "=" Expr EOS -> AssignmentStmt
        LblDef Name "(" SFDummyArgNameList ")" "%" DataRef "=" Expr EOS -> AssignmentStmt
        LblDef Name "=" Expr EOS -> AssignmentStmt
        LblDef Name "(" SFExprList ")" "=" Expr EOS -> AssignmentStmt
        LblDef Name "(" SFExprList ")" SubstringRange "=" Expr EOS -> AssignmentStmt

        LblDef "if" "(" ScalarNumericExpr ")" LblRef "," LblRef "," LblRef EOS -> ArithmeticIfStmt

        Expr -> ScalarNumericExpr

        Icon -> LblRef

        LblDef "assign" LblRef "to" VariableName EOS -> AssignStmt

        LblDef "backspace" UnitIdentifier EOS -> BackspaceStmt
        LblDef "backspace" "(" PositionSpec ("," PositionSpec)* ")" EOS -> BackspaceStmt

        UFExpr -> UnitIdentifier
        "*" -> UnitIdentifier

        UFTerm -> UFExpr
        Sign UFTerm -> UFExpr
        UFExpr AddOp UFTerm -> UFExpr

        UFFactor -> UFTerm
        UFTerm MultOp UFFactor -> UFTerm
        UFTerm ConcatOp UFPrimary -> UFTerm

        UFPrimary -> UFFactor
        UFPrimary PowerOp UFFactor -> UFFactor

        Icon -> UFPrimary
        Scon -> UFPrimary
        Name -> UFPrimary
        FunctionReference -> UFPrimary
        DataRef -> UFPrimary
        "(" UFExpr ")" -> UFPrimary

        "unit="? UnitIdentifier -> PositionSpec
        "iostat=" ScalarVariable -> PositionSpec
        "err=" LblRef -> PositionSpec

        VariableName -> ScalarVariable
        ArrayElement -> ScalarVariable

        LblDef "call" SubroutineNameUse EOS -> CallStmt
        LblDef "call" SubroutineNameUse "(" (ActualArg ("," ActualArg)*)? ")" EOS -> CallStmt

        Ident -> SubroutineNameUse

        (Name "=")? Expr -> ActualArg
        (Name "=")? "*" LblRef -> ActualArg

        LblDef "close" "(" CloseSpecList ")" EOS -> CloseStmt

        CloseSpec ("," CloseSpec)* -> CloseSpecList

        UnitIdentifier -> CloseSpec
        "unit" "=" UnitIdentifier -> CloseSpec
        "iostat" "=" ScalarVariable -> CloseSpec
        "err" "=" LblRef -> CloseSpec
        "status" "=" CExpr -> CloseSpec

        (CExpr ConcatOp)? CPrimary -> CExpr

        COperand -> CPrimary
        "(" CExpr ")" -> CPrimary

        Scon -> COperand
        Name -> COperand
        DataRef -> COperand
        FunctionReference -> COperand

        LblDef "continue" EOS -> ContinueStmt

        LblDef "end" "file" UnitIdentifier EOS -> EndfileStmt
        LblDef "end" "file" "(" PositionSpec ("," PositionSpec)* ")" EOS -> EndfileStmt

        LblDef GoToKw LblRef EOS -> GotoStmt

        "go" "to" -> GoToKw

        LblDef GoToKw "(" LblRef ("," LblRef)* ")" ","? ScalarIntExpr EOS -> ComputedGotoStmt

        Expr -> ScalarIntExpr

        LblDef GoToKw VariableName EOS -> AssignedGotoStmt
        LblDef GoToKw VariableName ","? "(" LblRef ("," LblRef)* ")" EOS -> AssignedGotoStmt

        LblDef "if" "(" ScalarLogicalExpr ")" ActionStmt -> IfStmt

        Expr -> ScalarLogicalExpr

        LblDef "inquire" "(" InquireSpecList ")" EOS -> InquireStmt
        LblDef "inquire" "(" "iolength" "=" ScalarVariable ")" OutputItemList EOS -> InquireStmt

        UnitIdentifier "," InquireSpec ("," InquireSpec)* -> InquireSpecList
        InquireSpec ("," InquireSpec)* -> InquireSpecList

        "unit" "=" UnitIdentifier -> InquireSpec
        "file" "=" CExpr -> InquireSpec
        "iostat" "=" ScalarVariable -> InquireSpec
        "err" "=" LblRef -> InquireSpec
        "exist" "=" ScalarVariable -> InquireSpec
        "opened" "=" ScalarVariable -> InquireSpec
        "number" "=" ScalarVariable -> InquireSpec
        "named" "=" ScalarVariable -> InquireSpec
        "name" "=" ScalarVariable -> InquireSpec
        "access" "=" ScalarVariable -> InquireSpec
        "sequential" "=" ScalarVariable -> InquireSpec
        "direct" "=" ScalarVariable -> InquireSpec
        "form" "=" ScalarVariable -> InquireSpec
        "formatted" "=" ScalarVariable -> InquireSpec
        "unformatted" "=" ScalarVariable -> InquireSpec
        "recl" "=" Expr -> InquireSpec
        "nextrec" "=" ScalarVariable -> InquireSpec
        "blank" "=" ScalarVariable -> InquireSpec
        "position" "=" ScalarVariable -> InquireSpec
        "action" "=" ScalarVariable -> InquireSpec
        "read" "=" ScalarVariable -> InquireSpec
        "write" "=" ScalarVariable -> InquireSpec
        "readwrite" "=" ScalarVariable -> InquireSpec
        "delim" "=" ScalarVariable -> InquireSpec
        "pad" "=" ScalarVariable -> InquireSpec

        OutputItem ("," OutputItem)* -> OutputItemList

        Expr -> OutputItem
        OutputImpliedDo -> OutputItem

        "(" OutputItemList "," ImpliedDoVariable "=" Expr "," Expr ")" -> OutputImpliedDo
        "(" OutputItemList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")" -> OutputImpliedDo

        LblDef "open" "(" ConnectSpecList ")" EOS -> OpenStmt

        ConnectSpec ("," ConnectSpec)* -> ConnectSpecList

        UnitIdentifier -> ConnectSpec
        "unit" "=" UnitIdentifier -> ConnectSpec
        "iostat" "=" ScalarVariable -> ConnectSpec
        "err" "=" LblRef -> ConnectSpec
        "file" "=" CExpr -> ConnectSpec
        "status" "=" CExpr -> ConnectSpec
        "access" "=" CExpr -> ConnectSpec
        "form" "=" CExpr -> ConnectSpec
        "recl" "=" Expr -> ConnectSpec
        "blank" "=" CExpr -> ConnectSpec
        "position" "=" CExpr -> ConnectSpec
        "action" "=" CExpr -> ConnectSpec
        "delim" "=" CExpr -> ConnectSpec
        "pad" "=" CExpr -> ConnectSpec

        LblDef "pause" (Icon | Scon)? EOS -> PauseStmt

        LblDef "print" FormatIdentifier ("," OutputItemList)? EOS -> PrintStmt

        LblRef -> FormatIdentifier
        CExpr -> FormatIdentifier
        "*" -> FormatIdentifier

        LblDef "read" RdCtlSpec InputItemList? EOS -> ReadStmt
        LblDef "read" RdFmtId EOS -> ReadStmt
        LblDef "read" RdFmtId "," InputItemList EOS -> ReadStmt

        RdUnitId -> RdCtlSpec
        "(" RdIoCtlSpecList ")" -> RdCtlSpec

        "(" UFExpr ")" -> RdUnitId
        "(" "*" ")" -> RdUnitId

        UnitIdentifier "," IoControlSpec -> RdIoCtlSpecList
        UnitIdentifier "," FormatIdentifier -> RdIoCtlSpecList
        IoControlSpec -> RdIoCtlSpecList
        RdIoCtlSpecList "," IoControlSpec -> RdIoCtlSpecList

        "unit" "=" UnitIdentifier -> IoControlSpec
        "fmt" "=" FormatIdentifier -> IoControlSpec
        "nml" "=" NamelistGroupName -> IoControlSpec
        "rec" "=" Expr -> IoControlSpec
        "iostat" "=" ScalarVariable -> IoControlSpec
        "err" "=" LblRef -> IoControlSpec
        "end" "=" LblRef -> IoControlSpec
        "advance" "=" CExpr -> IoControlSpec
        "size" "=" Variable -> IoControlSpec
        "eor" "=" LblRef -> IoControlSpec

        InputItem ("," InputItem)* -> InputItemList

        Name -> InputItem
        DataRef -> InputItem
        InputImpliedDo -> InputItem

        "(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr ")" -> InputImpliedDo
        "(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")" -> InputImpliedDo

        LblRef -> RdFmtId
        "*" -> RdFmtId
        COperand -> RdFmtId
        COperand ConcatOp CPrimary -> RdFmtId
        RdFmtIdExpr ConcatOp CPrimary -> RdFmtId

        "(" UFExpr ")" -> RdFmtIdExpr

        LblDef "return" Expr? EOS -> ReturnStmt

        LblDef "rewind" UnitIdentifier EOS -> RewindStmt
        LblDef "rewind" "(" PositionSpec ("," PositionSpec)* ")" EOS -> RewindStmt

        LblDef "stop" (Icon | Scon)? EOS -> StopStmt

        LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS -> WriteStmt

        UnitIdentifier "," FormatIdentifier? -> IoControlSpecList
        UnitIdentifier "," IoControlSpec -> IoControlSpecList
        IoControlSpec -> IoControlSpecList
        IoControlSpecList "," IoControlSpec -> IoControlSpecList

        BlockDoConstruct -> DoConstruct
        LabelDoStmt -> DoConstruct

        LblDef "do" LblRef EOS -> BlockDoConstruct
        LblDef "do" LoopControl EOS -> BlockDoConstruct
        LblDef "do" EOS -> BlockDoConstruct
        LblDef Name ":" "do" LblRef LoopControl EOS -> BlockDoConstruct
        LblDef Name ":" "do" LblRef EOS -> BlockDoConstruct
        LblDef Name ":" "do" LoopControl EOS -> BlockDoConstruct
        LblDef Name ":" "do" EOS -> BlockDoConstruct

        "while" "(" Expr ")" -> LoopControl
        VariableName "=" Int-Real-Dp-Expression "," Int-Real-Dp-Expression ("," Int-Real-Dp-Expression)? -> LoopControl

        Expr -> Int-Real-Dp-Expression

        LblDef "do" LblRef ","? LoopControl EOS -> LabelDoStmt

        IfThenStmt ExecutionPartConstruct* (ElseIfStmt ExecutionPartConstruct*)* (ElseStmt ExecutionPartConstruct*)? EndIfStmt -> IfConstruct

        LblDef (IfConstructName ":")? "if" "(" ScalarLogicalExpr ")" "then" EOS -> IfThenStmt

        Ident -> IfConstructName

        ExecutableConstruct -> ExecutionPartConstruct
        FormatStmt -> ExecutionPartConstruct
        DataStmt -> ExecutionPartConstruct
        EntryStmt -> ExecutionPartConstruct

        LblDef "else" "if" "(" ScalarLogicalExpr ")" "then" IfConstructName? EOS -> ElseIfStmt

        LblDef "else" IfConstructName? EOS -> ElseStmt

        LblDef "end" "if" IfConstructName? EOS -> EndIfStmt

        LblDef Name ":" "select" "case" "(" Expr ")" EOS SelectCaseRange -> CaseConstruct
        LblDef "select" "case" "(" Expr ")" EOS SelectCaseRange -> CaseConstruct

        SelectCaseBody EndSelectStmt -> SelectCaseRange
        EndSelectStmt -> SelectCaseRange

        CaseBodyConstruct+ -> SelectCaseBody

        CaseStmt -> CaseBodyConstruct
        ExecutionPartConstruct -> CaseBodyConstruct

        LblDef "case" CaseSelector Name? EOS -> CaseStmt

        "(" CaseValueRange ("," CaseValueRange)* ")" -> CaseSelector
        "default" -> CaseSelector

        Expr -> CaseValueRange
        Expr ":" -> CaseValueRange
        ":" Expr -> CaseValueRange
        Expr ":" Expr -> CaseValueRange

        LblDef "end" "select" EndName? EOS -> EndSelectStmt

        WhereConstructStmt AssignmentStmt* (ElsewhereStmt AssignmentStmt*)? EndWhereStmt -> WhereConstruct

        LblDef "where" "(" MaskExpr ")" EOS -> WhereConstructStmt

        LblDef "elsewhere" EOS -> ElsewhereStmt

        LblDef "end" "where" EOS -> EndWhereStmt

        LblDef "end" "do" Name? EOS -> EndDoStmt

        LblDef "end" EOS -> EndProgramStmt
        LblDef "end" "program" EndName? EOS -> EndProgramStmt

        Body ContainsStmt InternalSubprogram -> InternalSubProgPart
        ContainsStmt InternalSubprogram -> InternalSubProgPart
        InternalSubProgPart InternalSubprogram -> InternalSubProgPart

        BodyConstruct+ -> Body

        LblDef "contains" EOS -> ContainsStmt

        FunctionSubprogram -> InternalSubprogram
        SubroutineSubprogram -> InternalSubprogram

        LblDef FunctionPrefix FunctionName FunctionRange -> FunctionSubprogram

        FunctionParList EOS Body? EndFunctionStmt -> FunctionRange
        FunctionParList "result" "(" Name ")" EOS InternalSubProgPart EndFunctionStmt -> FunctionRange
        FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt -> FunctionRange
        FunctionParList "result" "(" Name ")" EOS EndFunctionStmt -> FunctionRange
        FunctionParList EOS InternalSubProgPart EndFunctionStmt -> FunctionRange

        LblDef "recursive"? "subroutine" SubroutineName SubroutineRange -> SubroutineSubprogram

        SubroutineParList? EOS Body? EndSubroutineStmt -> SubroutineRange
        SubroutineParList EOS InternalSubProgPart EndSubroutineStmt -> SubroutineRange

        ModuleStmt ModuleBody EndModuleStmt -> Module
        ModuleStmt EndModuleStmt -> Module

        LblDef "module" ModuleName EOS -> ModuleStmt

        Ident -> ModuleName

        SpecificationPartConstruct -> ModuleBody
        ModuleSubprogramPartConstruct -> ModuleBody
        ModuleBody SpecificationPartConstruct -> ModuleBody
        ModuleBody ModuleSubprogramPartConstruct -> ModuleBody

        ContainsStmt -> ModuleSubprogramPartConstruct
        ModuleSubprogram -> ModuleSubprogramPartConstruct

        FunctionSubprogram -> ModuleSubprogram
        SubroutineSubprogram -> ModuleSubprogram

        LblDef "end" EOS -> EndModuleStmt
        LblDef "end" "module" EndName? EOS -> EndModuleStmt

        BlockDataStmt BlockDataBody EndBlockDataStmt -> BlockDataSubprogram
        BlockDataStmt EndBlockDataStmt -> BlockDataSubprogram

        LblDef "block" "data" BlockDataName? EOS -> BlockDataStmt

        Ident -> BlockDataName

        BlockDataBodyConstruct+ -> BlockDataBody

        SpecificationPartConstruct -> BlockDataBodyConstruct

        LblDef "end" "block" "data" EndName? EOS -> EndBlockDataStmt
        LblDef "end" EOS -> EndBlockDataStmt
