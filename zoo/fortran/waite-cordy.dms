Ident = id ;
EOS = CommentOrNewline CommentOrNewline* ;
CommentOrNewline = comment ;
CommentOrNewline = newline ;
program = IN_6 CommentOrNewline* ExecutableProgram CommentOrNewline* EX_6 ;
ExecutableProgram = ProgramUnit+ ;
ProgramUnit = MainProgram ;
ProgramUnit = FunctionSubprogram ;
ProgramUnit = SubroutineSubprogram ;
ProgramUnit = BlockDataSubprogram ;
MainProgram = ProgramStmt? MainRange ;
MainRange = Body? EndProgramStmt ;
EndProgramStmt = LblDef 'end' EOS ;
Body = BodyConstruct+ ;
BodyConstruct = SpecificationPartConstruct ;
BodyConstruct = ExecutableConstruct ;
SpecificationPartConstruct = ImplicitStmt ;
SpecificationPartConstruct = ParameterStmt ;
SpecificationPartConstruct = FormatStmt ;
SpecificationPartConstruct = EntryStmt ;
SpecificationPartConstruct = DeclarationConstruct ;
SpecificationPartConstruct = IncludeStmt ;
IncludeStmt = 'include' Scon EOS ;
DeclarationConstruct = TypeDeclarationStmt ;
DeclarationConstruct = SpecificationStmt ;
FunctionSubprogram = LblDef FunctionPrefix FunctionName FunctionRange ;
FunctionRange = FunctionParList EOS Body? EndFunctionStmt ;
EndFunctionStmt = LblDef 'end' EOS ;
SubroutineSubprogram = LblDef 'subroutine' SubroutineName SubroutineRange ;
SubroutineRange = SubroutineParList EOS Body? EndSubroutineStmt ;
EndSubroutineStmt = LblDef 'end' EOS ;
BlockDataSubprogram = BlockDataStmt BlockDataBody EndBlockDataStmt ;
BlockDataSubprogram = BlockDataStmt EndBlockDataStmt ;
EndBlockDataStmt = LblDef 'end' EOS ;
BlockDataBody = BlockDataBodyConstruct ;
BlockDataBody = BlockDataBody BlockDataBodyConstruct ;
BlockDataBodyConstruct = SpecificationPartConstruct ;
SpecificationStmt = CommonStmt ;
SpecificationStmt = DataStmt ;
SpecificationStmt = DimensionStmt ;
SpecificationStmt = EquivalenceStmt ;
SpecificationStmt = ExternalStmt ;
SpecificationStmt = IntrinsicStmt ;
SpecificationStmt = SaveStmt ;
ExecutionPartConstruct = ExecutableConstruct ;
ExecutionPartConstruct = FormatStmt ;
ExecutionPartConstruct = DataStmt ;
ExecutionPartConstruct = EntryStmt ;
ExecutableConstruct = ActionStmt ;
ExecutableConstruct = DoConstruct ;
ExecutableConstruct = IfConstruct ;
ActionStmt = ArithmeticIfStmt ;
ActionStmt = AssignmentStmt ;
ActionStmt = AssignStmt ;
ActionStmt = BackspaceStmt ;
ActionStmt = CallStmt ;
ActionStmt = CloseStmt ;
ActionStmt = ContinueStmt ;
ActionStmt = EndfileStmt ;
ActionStmt = GotoStmt ;
ActionStmt = ComputedGotoStmt ;
ActionStmt = AssignedGotoStmt ;
ActionStmt = IfStmt ;
ActionStmt = InquireStmt ;
ActionStmt = OpenStmt ;
ActionStmt = PauseStmt ;
ActionStmt = PrintStmt ;
ActionStmt = ReadStmt ;
ActionStmt = ReturnStmt ;
ActionStmt = RewindStmt ;
ActionStmt = StmtFunctionStmt ;
ActionStmt = StopStmt ;
ActionStmt = WriteStmt ;
ProgramStmt = LblDef 'program' ProgramName EOS ;
FunctionPrefix = 'function' ;
FunctionPrefix = TypeSpec 'function' ;
FunctionParList = '(' FunctionPars ')' ;
FunctionParList =  ;
FunctionPars = FunctionPar',' ;
FunctionPar = DummyArgName ;
SubroutineParList = '(' SubroutinePars ')' ;
SubroutineParList =  ;
SubroutinePars = SubroutinePar',' ;
SubroutinePar = DummyArgName ;
SubroutinePar = '*' ;
EntryStmt = LblDef 'entry' EntryName SubroutineParList 'result' '(' Name ')' EOS ;
BlockDataStmt = LblDef 'blockdata' BlockDataName? EOS ;
DimensionStmt = LblDef 'dimension' ArrayDeclaratorList EOS ;
ArrayDeclaratorList = ArrayDeclarator+ ;
ArrayDeclarator = VariableName '(' ArraySpec ')' ;
ArraySpec = ExplicitShapeSpecList ;
ArraySpec = AssumedSizeSpec ;
ExplicitShapeSpecList = ExplicitShapeSpec+ ;
ExplicitShapeSpec = LowerBound ':' UpperBound ;
ExplicitShapeSpec = UpperBound ;
LowerBound = Expr ;
UpperBound = Expr ;
AssumedSizeSpec = '*' ;
AssumedSizeSpec = LowerBound ':' '*' ;
AssumedSizeSpec = ExplicitShapeSpecList ',' '*' ;
AssumedSizeSpec = ExplicitShapeSpecList ',' LowerBound ':' '*' ;
EquivalenceStmt = LblDef 'equivalence' EquivalenceSetList EOS ;
EquivalenceSetList = EquivalenceSet+ ;
EquivalenceSet = '(' EquivalenceObject ',' EquivalenceObjectList ')' ;
EquivalenceObjectList = EquivalenceObject+ ;
EquivalenceObject = Variable ;
CommonStmt = LblDef 'common' Comlist EOS ;
Comlist = Comblock? CommonBlockObject ;
Comlist = Comlist ',' Comblock? CommonBlockObject ;
Comlist = Comlist Comblock CommonBlockObject ;
Comblock = '/' SPOFF '/' SPON ;
Comblock = '/' CommonBlockName '/' ;
CommonBlockObject = VariableName ;
CommonBlockObject = ArrayDeclarator ;
TypeDeclarationStmt = LblDef TypeSpec EntityDeclList EOS ;
TypeSpec = 'integer' ;
TypeSpec = 'real' ;
TypeSpec = 'doubleprecision' ;
TypeSpec = 'complex' ;
TypeSpec = 'logical' ;
TypeSpec = 'character' ;
TypeSpec = 'character' LengthSelector ;
EntityDeclList = EntityDecl+ ;
EntityDecl = ObjectName ;
EntityDecl = ObjectName '(' ArraySpec ')' ;
EntityDecl = ObjectName '*' CharLength ;
EntityDecl = ObjectName '(' ArraySpec ')' '*' CharLength ;
LengthSelector = '*' CharLength ;
ImplicitStmt = LblDef 'implicit' ImplicitSpecList EOS ;
ImplicitSpecList = ImplicitSpec+ ;
ImplicitSpec = TypeSpec ImplicitRanges ;
ImplicitSpec = TypeSpec '(' ImplicitRanges ')' ;
ImplicitRanges = ImplicitRange',' ;
ImplicitRange = Ident '-' Ident ;
CharLength = '(' TypeParamValue ')' ;
CharLength = Constant ;
TypeParamValue = Expr ;
TypeParamValue = '*' ;
ParameterStmt = LblDef 'parameter' '(' NamedConstantDefList ')' EOS ;
NamedConstantDefList = NamedConstantDef+ ;
NamedConstantDef = NamedConstant '=' Expr ;
NamedConstant = Ident ;
NamedConstantUse = Ident ;
ExternalStmt = LblDef 'external' ExternalNameList EOS ;
ExternalNameList = ExternalName+ ;
IntrinsicStmt = LblDef 'intrinsic' IntrinsicList EOS ;
IntrinsicList = IntrinsicProcedureName+ ;
SaveStmt = LblDef 'save' EOS ;
SaveStmt = LblDef 'save' SavedEntityList EOS ;
SavedEntityList = SavedEntity+ ;
SavedEntity = VariableName ;
SavedEntity = SavedCommonBlock ;
SavedCommonBlock = '/' CommonBlockName '/' ;
DataStmt = LblDef 'data' Datalist EOS ;
Datalist = DataStmtSet ;
Datalist = Datalist? ','? DataStmtSet ;
DataStmtSet = DataStmtObjectList '/' DataStmtValueList '/' ;
DataStmtObjectList = DataStmtObject+ ;
DataStmtObject = Variable ;
DataStmtObject = DataImpliedDo ;
DataStmtValueList = DataStmtValue+ ;
DataStmtValue = Constant ;
DataStmtValue = Constant '*' Constant ;
DataStmtValue = NamedConstantUse '*' Constant ;
DataImpliedDo = '(' DataIDoObjectList ',' ImpliedDoVariable '=' Expr ',' Expr ')' ;
DataImpliedDo = '(' DataIDoObjectList ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')' ;
DataIDoObjectList = DataIDoObject+ ;
DataIDoObject = ArrayElement ;
DataIDoObject = DataImpliedDo ;
AssignmentStmt = LblDef Name SFExprListRef? SubstringRange? '=' Expr EOS ;
SFExprListRef = '(' SFExprList CommaSectionSubscript* ')' ;
SFExprList = Expr ':'? Expr? ;
SFExprList = ':' Expr? ;
CommaSectionSubscript = ',' SectionSubscript ;
AssignStmt = LblDef 'assign' LblRef 'to' VariableName EOS ;
GotoStmt = LblDef GoToKw LblRef EOS ;
GoToKw = 'goto' ;
ComputedGotoStmt = LblDef GoToKw '(' LblRefList ')' ','? Expr EOS ;
LblRefList = LblRef+ ;
LblRef = Label ;
AssignedGotoStmt = LblDef GoToKw VariableName EOS ;
AssignedGotoStmt = LblDef GoToKw VariableName '(' LblRefList ')' EOS ;
AssignedGotoStmt = LblDef GoToKw VariableComma '(' LblRefList ')' EOS ;
VariableComma = VariableName ',' ;
ArithmeticIfStmt = LblDef 'if' '(' Expr ')' LblRef ',' LblRef ',' LblRef EOS ;
IfStmt = LblDef 'if' '(' Expr ')' ActionStmt ;
IfConstruct = IfThenStmt ConditionalBody ElseIfConstruct* ElseConstruct? EndIfStmt ;
ElseIfConstruct = ElseIfStmt ConditionalBody ;
ElseConstruct = ElseStmt ConditionalBody ;
ConditionalBody = ExecutionPartConstruct* ;
IfThenStmt = LblDef 'if' '(' Expr ')' 'then' EOS IN_2 ;
ElseIfStmt = LblDef EX_2 'elseif' '(' Expr ')' 'then' EOS IN_2 ;
ElseStmt = LblDef EX_2 'else' EOS IN_2 ;
EndIfStmt = LblDef EX_2 'endif' EOS ;
DoConstruct = LabelDoStmt ;
LabelDoStmt = LblDef 'do' DoLblRef CommaLoopControl EOS IN_2 ExecutionPartConstruct* EX_2 DoLblDef DoLabelStmt ;
CommaLoopControl = ','? LoopControl ;
DoLblRef =  ;
DoLblDef = TAB_2 TAB_9 ;
DoubleDoStmt = 'do' LblRef CommaLoopControl EOS ;
DoLabelStmt = ActionStmt ;
LoopControl = VariableName '=' Expr ',' Expr CommaExpr? ;
ContinueStmt = LblDef 'continue' EOS ;
StopStmt = LblDef 'stop' IconOrScon? EOS ;
IconOrScon = Icon ;
IconOrScon = Scon ;
PauseStmt = LblDef 'pause' IconOrScon? EOS ;
WriteStmt = LblDef 'write' '(' IoControlSpecList ')' OutputItemList? EOS ;
ReadStmt = LblDef 'read' RdCtlSpec InputItemList? EOS ;
ReadStmt = LblDef 'read' RdFmtId CommaInputItemList? EOS ;
CommaInputItemList = ',' InputItemList ;
RdCtlSpec = RdUnitId ;
RdCtlSpec = '(' RdIoCtlSpecList ')' ;
RdUnitId = '(' UFExpr ')' ;
RdUnitId = '(' '*' ')' ;
RdIoCtlSpecList = UnitIdentifier ',' IoControlSpec ;
RdIoCtlSpecList = UnitIdentifier ',' FormatIdentifier ;
RdIoCtlSpecList = IoControlSpec ;
RdIoCtlSpecList = RdIoCtlSpecList ',' IoControlSpec ;
RdFmtId = LblRef ;
RdFmtId = '*' ;
RdFmtId = COperand ;
RdFmtId = COperand ConcatOp CPrimary ;
RdFmtId = RdFmtIdExpr ConcatOp CPrimary ;
RdFmtIdExpr = '(' UFExpr ')' ;
PrintStmt = LblDef 'print' FormatIdentifier ',' OutputItemList EOS ;
PrintStmt = LblDef 'print' FormatIdentifier EOS ;
IoControlSpecList = UnitIdentifier '$' ',' ;
IoControlSpecList = UnitIdentifier ',' FormatIdentifier ;
IoControlSpecList = UnitIdentifier ',' IoControlSpec ;
IoControlSpecList = IoControlSpec ;
IoControlSpecList = IoControlSpecList ',' IoControlSpec ;
IoControlSpec = 'fmt=' FormatIdentifier ;
IoControlSpec = 'unit=' UnitIdentifier ;
IoControlSpec = 'rec=' Expr ;
IoControlSpec = 'end=' LblRef ;
IoControlSpec = 'err=' LblRef ;
IoControlSpec = 'iostat=' ScalarVariable ;
InputItemList = InputItem+ ;
InputItem = NameDataRef ;
InputItem = InputImpliedDo ;
OutputItemList = Expr ;
OutputItemList = OutputItemList1 ;
OutputItemList1 = Expr ',' Expr ;
OutputItemList1 = Expr ',' OutputImpliedDo ;
OutputItemList1 = OutputImpliedDo ;
OutputItemList1 = OutputItemList1 ',' Expr ;
OutputItemList1 = OutputItemList1 ',' OutputImpliedDo ;
InputImpliedDo = '(' InputItemList ',' ImpliedDoVariable '=' Expr ',' Expr CommaExpr? ')' ;
CommaExpr = ',' Expr ;
OutputImpliedDo = '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr CommaExpr? ')' ;
OutputImpliedDo = '(' OutputItemList1 ',' ImpliedDoVariable '=' Expr ',' Expr CommaExpr? ')' ;
OpenStmt = LblDef 'open' '(' ConnectSpecList ')' EOS ;
ConnectSpecList = UnitIdentifierComma? ConnectSpec',' ;
UnitIdentifierComma = UnitIdentifier ',' ;
ConnectSpec = 'unit=' UnitIdentifier ;
ConnectSpec = 'err=' LblRef ;
ConnectSpec = 'file=' CExpr ;
ConnectSpec = 'status=' CExpr ;
ConnectSpec = 'access=' CExpr ;
ConnectSpec = 'form=' CExpr ;
ConnectSpec = 'recl=' Expr ;
ConnectSpec = 'blank=' CExpr ;
ConnectSpec = 'iostat=' ScalarVariable ;
CloseStmt = LblDef 'close' '(' CloseSpecList ')' EOS ;
CloseSpecList = UnitIdentifierComma? CloseSpec',' ;
CloseSpec = 'unit=' UnitIdentifier ;
CloseSpec = 'err=' LblRef ;
CloseSpec = 'status=' CExpr ;
CloseSpec = 'iostat=' ScalarVariable ;
InquireStmt = LblDef 'inquire' '(' InquireSpecList ')' EOS ;
InquireSpecList = UnitIdentifier? InquireSpec',' ;
InquireSpec = 'unit=' UnitIdentifier ;
InquireSpec = 'file=' CExpr ;
InquireSpec = 'err=' LblRef ;
InquireSpec = 'iostat=' ScalarVariable ;
InquireSpec = 'exist=' ScalarVariable ;
InquireSpec = 'opened=' ScalarVariable ;
InquireSpec = 'number=' ScalarVariable ;
InquireSpec = 'named=' ScalarVariable ;
InquireSpec = 'name=' ScalarVariable ;
InquireSpec = 'access=' ScalarVariable ;
InquireSpec = 'sequential=' ScalarVariable ;
InquireSpec = 'direct=' ScalarVariable ;
InquireSpec = 'form=' ScalarVariable ;
InquireSpec = 'formatted=' ScalarVariable ;
InquireSpec = 'unformatted=' ScalarVariable ;
InquireSpec = 'recl=' Expr ;
InquireSpec = 'nextrec=' ScalarVariable ;
InquireSpec = 'blank=' ScalarVariable ;
BackspaceStmt = LblDef 'backspace' UnitIdentifier EOS ;
BackspaceStmt = LblDef 'backspace' '(' PositionSpecList ')' EOS ;
EndfileStmt = LblDef 'endfile' UnitIdentifier EOS ;
EndfileStmt = LblDef 'endfile' '(' PositionSpecList ')' EOS ;
RewindStmt = LblDef 'rewind' UnitIdentifier EOS ;
RewindStmt = LblDef 'rewind' '(' PositionSpecList ')' EOS ;
PositionSpecList = UnitIdentifierComma? PositionSpec+ ;
PositionSpec = 'unit=' UnitIdentifier ;
PositionSpec = 'err=' LblRef ;
PositionSpec = 'iostat=' ScalarVariable ;
UnitIdentifier = UFExpr ;
UnitIdentifier = '*' ;
FormatIdentifier = LblRef ;
FormatIdentifier = CExpr ;
FormatIdentifier = '*' ;
FormatStmt = LblDef 'format' '(' FmtSpec? ')' EOS ;
FmtSpec = Formatedit ;
FmtSpec = Formatsep ;
FmtSpec = Formatsep Formatedit ;
FmtSpec = FmtSpec Formatsep ;
FmtSpec = FmtSpec Formatsep Formatedit ;
FmtSpec = FmtSpec ',' Formatedit ;
FmtSpec = FmtSpec ',' Formatsep ;
FmtSpec = FmtSpec ',' Formatsep Formatedit ;
Formatedit = EditElement ;
Formatedit = Icon EditElement ;
Formatedit = Xcon ;
Formatedit = Pcon ;
Formatedit = Pcon EditElement ;
Formatedit = Pcon Icon EditElement ;
EditElement = Fcon ;
EditElement = MislexedFcon ;
EditElement = Scon ;
EditElement = Hcon ;
EditElement = Ident ;
EditElement = '(' FmtSpec ')' ;
MislexedFcon = RDcon SPOFF RDcon SPON ;
MislexedFcon = Ident SPOFF RDcon SPON ;
Formatsep = '/' ;
Formatsep = ':' ;
StmtFunctionStmt = LblDef Name StmtFunctionRange ;
StmtFunctionRange = '(' SFDummyArgNameList? ')' '=' Expr EOS ;
SFDummyArgNameList = SFDummyArgName+ ;
CallStmt = LblDef 'call' SubroutineNameUse EOS ;
CallStmt = LblDef 'call' SubroutineNameUse '(' SubroutineArgList ')' EOS ;
SubroutineArgList = SubroutineArg',' ;
SubroutineArg = Expr ;
SubroutineArg = Hcon ;
SubroutineArg = '*' LblRef ;
ReturnStmt = LblDef 'return' Expr? EOS ;
FunctionReference = Name '(' ')' ;
NameDataRef = Name ComplexDataRefTail* ;
ComplexDataRefTail = SectionSubscriptRef ;
SectionSubscriptRef = '(' SectionSubscriptList ')' ;
SectionSubscriptList = SectionSubscript+ ;
SectionSubscript = Expr SubscriptTripletTail? ;
SectionSubscript = SubscriptTripletTail ;
Expr = Level5Expr ;
Primary = UnsignedArithmeticConstant ;
Primary = NameDataRef ;
Primary = FunctionReference ;
Primary = '(' Expr ')' ;
Level1Expr = Primary ;
MultOperand = Level1Expr PowerUpMultOperand? ;
PowerUpMultOperand = PowerOp MultOperand ;
AddOperand = MultOperand MultOpMultOperand* ;
MultOpMultOperand = MultOp MultOperand ;
Level2Expr = Sign? AddOperand AddOpAddOperand* ;
AddOpAddOperand = AddOp AddOperand ;
PowerOp = '**' ;
MultOp = '*' ;
MultOp = '/' ;
AddOp = '+' ;
AddOp = '-' ;
Sign = '+' ;
Sign = '-' ;
UFExpr = UFTerm ;
UFExpr = Sign UFTerm ;
UFExpr = UFExpr AddOp UFTerm ;
UFTerm = UFFactor ;
UFTerm = UFTerm MultOp UFFactor ;
UFTerm = UFTerm ConcatOp UFPrimary ;
UFFactor = UFPrimary ;
UFFactor = UFPrimary PowerOp UFFactor ;
UFPrimary = Icon ;
UFPrimary = Scon ;
UFPrimary = NameDataRef ;
UFPrimary = FunctionReference ;
UFPrimary = '(' UFExpr ')' ;
CExpr = CPrimary CPrimaryConcatOp* ;
CPrimaryConcatOp = CPrimary ConcatOp ;
CPrimary = COperand ;
CPrimary = '(' CExpr ')' ;
COperand = Scon ;
COperand = NameDataRef ;
COperand = FunctionReference ;
Level3Expr = Level2Expr ConcatOpLevel2Expr* ;
ConcatOpLevel2Expr = ConcatOp Level2Expr ;
ConcatOp = '/' SPOFF '/' SPON ;
AndOperand = NotOp? Level4Expr ;
OrOperand = AndOperand AndOpAndOperand* ;
AndOpAndOperand = AndOp AndOperand ;
EquivOperand = OrOperand OrUpOrOperand* ;
OrUpOrOperand = OrOp OrOperand ;
Level5Expr = EquivOperand EquivOpEquivOperand* ;
EquivOpEquivOperand = EquivOp EquivOperand ;
NotOp = SP '.not.' SP ;
AndOp = SP '.and.' SP ;
OrOp = SP '.or.' SP ;
EquivOp = SP '.eqv.' SP ;
EquivOp = SP '.neqv.' SP ;
Level4Expr = Level3Expr RelOpLevel3Expr* ;
RelOpLevel3Expr = RelOp Level3Expr ;
RelOp = SP '.eq.' SP ;
RelOp = SP '.ne.' SP ;
RelOp = SP '.lt.' SP ;
RelOp = SP '.le.' SP ;
RelOp = SP '.gt.' SP ;
RelOp = SP '.ge.' SP ;
ArrayElement = VariableName '(' SectionSubscriptList ')' ;
SubstringRange = '(' Expr? SubscriptTripletTail ')' ;
SubscriptTripletTail = ':' Expr? ;
Name = Ident ;
Constant = NamedConstantUse ;
Constant = PlusMinus? UnsignedArithmeticConstant ;
Constant = Scon ;
Constant = Hcon ;
Constant = LogicalConstant ;
PlusMinus = '+' ;
PlusMinus = '-' ;
UnsignedArithmeticConstant = Icon ;
UnsignedArithmeticConstant = RDcon ;
UnsignedArithmeticConstant = ComplexConst ;
ComplexConst = '(' ComplexComponent ',' ComplexComponent ')' ;
ComplexComponent = Sign? Icon ;
ComplexComponent = RDcon ;
ComplexComponent = Name ;
LogicalConstant = SP '.true.' SP ;
LogicalConstant = SP '.false.' SP ;
Label = Icon ;
BlockDataName = Ident ;
CommonBlockName = Ident ;
DummyArgName = Ident ;
EntryName = Ident ;
ExternalName = Ident ;
FunctionName = Ident ;
ImpliedDoVariable = Ident ;
IntrinsicProcedureName = Ident ;
ObjectName = Ident ;
ProgramName = Ident ;
SFDummyArgName = Ident ;
SFVarName = Ident ;
SubroutineName = Ident ;
SubroutineNameUse = Ident ;
VariableName = Ident ;
ScalarVariable = VariableName ;
ScalarVariable = ArrayElement ;
Variable = VariableName SubscriptListRef? SubstringRange? ;
SubscriptListRef = '(' SubscriptList ')' ;
SubscriptList = Subscript+ ;
Subscript = Expr ;
LblDef =  ;
LblDef = TAB_2 Label TAB_7 ;
BodyPlusInternals = Body ContainsStmt InternalSubprogram ;
BodyPlusInternals = ContainsStmt InternalSubprogram ;
BodyPlusInternals = BodyPlusInternals InternalSubprogram ;
InternalSubprogram = FunctionSubprogram ;
InternalSubprogram = SubroutineSubprogram ;
ModuleSubprogramPartConstruct = ContainsStmt ;
ModuleSubprogramPartConstruct = ModuleSubprogram ;
ModuleSubprogram = FunctionSubprogram ;
ModuleSubprogram = SubroutineSubprogram ;
DefinedOperator = Dop ;
DefinedOperator = PowerOp ;
DefinedOperator = MultOp ;
DefinedOperator = AddOp ;
DefinedOperator = RelOp ;
DefinedOperator = ConcatOp ;
DefinedOperator = NotOp ;
DefinedOperator = AndOp ;
DefinedOperator = OrOp ;
DefinedOperator = EquivOp ;
KindParam = Icon ;
KindParam = NamedConstantUse ;
BozLiteralConstant = Bcon ;
BozLiteralConstant = Ocon ;
BozLiteralConstant = Zcon ;
DerivedTypeDef = DerivedTypeStmt DerivedTypeBody EndTypeStmt ;
DerivedTypeBody = DerivedTypeBodyConstruct ;
DerivedTypeBody = DerivedTypeBody DerivedTypeBodyConstruct ;
DerivedTypeBodyConstruct = PrivateSequenceStmt ;
DerivedTypeBodyConstruct = ComponentDefStmt ;
PrivateSequenceStmt = LblDef 'private' EOS ;
PrivateSequenceStmt = LblDef 'sequence' EOS ;
DerivedTypeStmt = LblDef 'type' TypeName EOS ;
DerivedTypeStmt = LblDef 'type' '::' TypeName EOS ;
DerivedTypeStmt = LblDef 'type' ',' AccessSpec '::' TypeName EOS ;
EndTypeStmt = LblDef 'endtype' TypeName EOS ;
EndTypeStmt = LblDef 'endtype' EOS ;
EndTypeStmt = LblDef 'end' 'type' TypeName EOS ;
EndTypeStmt = LblDef 'end' 'type' EOS ;
ComponentDefStmt = LblDef TypeSpec ',' ComponentAttrSpecList '::' ComponentDeclList EOS ;
ComponentDefStmt = LblDef TypeSpec '::' ComponentDeclList EOS ;
ComponentDefStmt = LblDef TypeSpec ComponentDeclList EOS ;
ComponentAttrSpecList = ComponentAttrSpec+ ;
ComponentAttrSpec = 'pointer' ;
ComponentAttrSpec = 'dimension' '(' ComponentArraySpec ')' ;
ComponentArraySpec = ExplicitShapeSpecList ;
ComponentArraySpec = DeferredShapeSpecList ;
ComponentDeclList = ComponentDecl+ ;
ComponentDecl = ComponentName '(' ComponentArraySpec ')' '*' CharLength ;
ComponentDecl = ComponentName '(' ComponentArraySpec ')' ;
ComponentDecl = ComponentName '*' CharLength ;
ComponentDecl = ComponentName ;
StructureConstructor = TypeName '(' ExprList ')' ;
ExprList = Expr+ ;
ArrayConstructor = '(/' AcValueList '/)' ;
AcValueList = Expr ;
AcValueList = AcValueList1 ;
AcValueList1 = Expr ',' Expr ;
AcValueList1 = Expr ',' AcImpliedDo ;
AcValueList1 = AcImpliedDo ;
AcValueList1 = AcValueList1 ',' Expr ;
AcValueList1 = AcValueList1 ',' AcImpliedDo ;
AcImpliedDo = '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ')' ;
AcImpliedDo = '(' Expr ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')' ;
AcImpliedDo = '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ')' ;
AcImpliedDo = '(' AcImpliedDo ',' ImpliedDoVariable '=' Expr ',' Expr ',' Expr ')' ;
AttrSpecSeq = ',' AttrSpec ;
AttrSpecSeq = AttrSpecSeq ',' AttrSpec ;
AttrSpec = 'parameter' ;
AttrSpec = AccessSpec ;
AttrSpec = 'allocatable' ;
AttrSpec = 'dimension' '(' ArraySpec ')' ;
AttrSpec = 'external' ;
AttrSpec = 'intent' '(' IntentSpec ')' ;
AttrSpec = 'intrinsic' ;
AttrSpec = 'optional' ;
AttrSpec = 'pointer' ;
AttrSpec = 'save' ;
AttrSpec = 'target' ;
KindSelector = '(' 'kind=' Expr ')' ;
KindSelector = '(' Expr ')' ;
CharSelector = '(' 'len=' TypeParamValue ',' 'kind=' Expr ')' ;
CharSelector = '(' 'len=' TypeParamValue ',' Expr ')' ;
CharSelector = '(' 'len=' TypeParamValue ')' ;
CharSelector = '(' 'kind=' Expr ')' ;
CharSelector = '(' Expr ')' ;
AccessSpec = 'public' ;
AccessSpec = 'private' ;
IntentSpec = 'in' ;
IntentSpec = 'out' ;
IntentSpec = 'inout' ;
AssumedShapeSpecList = LowerBound ':' ;
AssumedShapeSpecList = DeferredShapeSpecList ',' LowerBound ':' ;
AssumedShapeSpecList = AssumedShapeSpecList ',' AssumedShapeSpec ;
AssumedShapeSpec = LowerBound ':' ;
AssumedShapeSpec = ':' ;
DeferredShapeSpecList = DeferredShapeSpec+ ;
DeferredShapeSpec = ':' ;
IntentStmt = LblDef 'intent' '(' IntentSpec ')' ColonColon? IntentParList EOS ;
ColonColon = '::' ;
IntentParList = IntentPar+ ;
IntentPar = DummyArgName ;
OptionalStmt = LblDef 'optional' ColonColon? OptionalParList EOS ;
OptionalParList = OptionalPar+ ;
OptionalPar = DummyArgName ;
AccessStmt = LblDef AccessSpec ColonColon? AccessIdList EOS ;
AccessStmt = LblDef AccessSpec EOS ;
AccessIdList = AccessId+ ;
AccessId = GenericName ;
AccessId = GenericSpec ;
AllocatableStmt = LblDef 'allocatable' ColonColon? ArrayAllocationList EOS ;
ArrayAllocationList = ArrayAllocation+ ;
ArrayAllocation = ArrayName ;
ArrayAllocation = ArrayName '(' DeferredShapeSpecList ')' ;
PointerStmt = LblDef 'pointer' ColonColon? PointerStmtObjectList EOS ;
PointerStmtObjectList = PointerStmtObject+ ;
PointerStmtObject = ObjectName ;
PointerStmtObject = ObjectName '(' DeferredShapeSpecList ')' ;
TargetStmt = LblDef 'target' ColonColon? TargetObjectList EOS ;
TargetObjectList = TargetObject+ ;
TargetObject = ObjectName ;
TargetObject = ObjectName '(' ArraySpec ')' ;
NamelistStmt = LblDef 'namelist' NamelistGroups EOS ;
NamelistGroups = '/' NamelistGroupName '/' NamelistGroupObject ;
NamelistGroups = NamelistGroups '/' NamelistGroupName '/' NamelistGroupObject ;
NamelistGroups = NamelistGroups ',' '/' NamelistGroupName '/' NamelistGroupObject ;
NamelistGroups = NamelistGroups ',' NamelistGroupObject ;
NamelistGroupObject = VariableName ;
StructureComponent = VariableName FieldSelector ;
StructureComponent = StructureComponent FieldSelector ;
FieldSelector = '(' SectionSubscriptList ')' '%' Name ;
FieldSelector = '%' Name ;
AllocateStmt = LblDef 'allocate' '(' AllocationList ',' 'stat=' Variable ')' EOS ;
AllocateStmt = LblDef 'allocate' '(' AllocationList ')' EOS ;
AllocationList = Allocation+ ;
Allocation = AllocateObject ;
Allocation = AllocateObject AllocatedShape ;
AllocatedShape = '(' SectionSubscriptList ')' ;
AllocateObjectList = AllocateObject+ ;
AllocateObject = VariableName ;
AllocateObject = AllocateObject FieldSelector ;
NullifyStmt = LblDef 'nullify' '(' PointerObjectList ')' EOS ;
PointerObjectList = PointerObject+ ;
PointerObject = Name ;
PointerObject = PointerField ;
PointerField = Name SFExprListRef? '%' Name ;
PointerField = PointerField FieldSelector ;
DeallocateStmt = LblDef 'deallocate' '(' AllocateObjectList ',' 'stat=' Variable ')' EOS ;
DeallocateStmt = LblDef 'deallocate' '(' AllocateObjectList ')' EOS ;
DefinedUnaryOp = Dop ;
DefinedBinaryOp = Dop ;
PointerAssignmentStmt = LblDef Name '=>' Target EOS ;
PointerAssignmentStmt = LblDef Name SFExprListRef? '%' NameDataRef '=>' Target EOS ;
Target = Expr ;
WhereStmt = LblDef 'where' '(' MaskExpr ')' AssignmentStmt ;
WhereConstruct = Where EndWhereStmt ;
WhereConstruct = ElseWhere EndWhereStmt ;
Where = WhereConstructStmt ;
Where = Where AssignmentStmt ;
ElseWhere = Where ElsewhereStmt ;
ElseWhere = ElseWhere AssignmentStmt ;
WhereConstructStmt = LblDef 'where' '(' MaskExpr ')' EOS ;
MaskExpr = Expr ;
ElsewhereStmt = LblDef 'elsewhere' EOS ;
EndWhereStmt = LblDef 'endwhere' EOS ;
EndWhereStmt = LblDef 'end' 'where' EOS ;
CaseConstruct = LblDef Name ':' 'selectcase' '(' Expr ')' EOS SelectCaseRange ;
CaseConstruct = LblDef 'selectcase' '(' Expr ')' EOS SelectCaseRange ;
CaseConstruct = LblDef Name ':' 'select' 'case' '(' Expr ')' EOS SelectCaseRange ;
CaseConstruct = LblDef 'select' 'case' '(' Expr ')' EOS SelectCaseRange ;
SelectCaseRange = SelectCaseBody EndSelectStmt ;
SelectCaseRange = EndSelectStmt ;
SelectCaseBody = CaseStmt ;
SelectCaseBody = SelectCaseBody CaseBodyConstruct ;
CaseBodyConstruct = CaseStmt ;
CaseBodyConstruct = ExecutionPartConstruct ;
CaseStmt = LblDef 'case' CaseSelector EOS ;
CaseStmt = LblDef 'case' CaseSelector Name EOS ;
EndSelectStmt = LblDef 'endselect' EndName? EOS ;
EndSelectStmt = LblDef 'end' 'select' EndName? EOS ;
CaseSelector = '(' CaseValueRangeList ')' ;
CaseSelector = 'default' ;
CaseValueRangeList = CaseValueRange+ ;
CaseValueRange = Expr ;
CaseValueRange = Expr ':' ;
CaseValueRange = ':' Expr ;
CaseValueRange = Expr ':' Expr ;
BlockDoConstruct = LblDef NameColon? 'do' CommaLoopControl? EOS IN_2 ExecutionPartConstruct* EX_2 EndDoStmt ;
NameColon = Name ':' ;
EndDoStmt = LblDef 'enddo' EndName? EOS ;
EndDoStmt = LblDef 'end' 'do' EndName? EOS ;
CycleStmt = LblDef 'cycle' EndName? EOS ;
ExitStmt = LblDef 'exit' EndName? EOS ;
Module = ModuleStmt ModuleBody EndModuleStmt ;
Module = ModuleStmt EndModuleStmt ;
ModuleBody = SpecificationPartConstruct ;
ModuleBody = ModuleSubprogramPartConstruct ;
ModuleBody = ModuleBody SpecificationPartConstruct ;
ModuleBody = ModuleBody ModuleSubprogramPartConstruct ;
ModuleStmt = LblDef 'module' ModuleName EOS ;
EndModuleStmt = LblDef 'endmodule' EndName? EOS ;
EndModuleStmt = LblDef 'end' 'module' EndName? EOS ;
EndModuleStmt = LblDef 'end' EOS ;
UseStmt = LblDef 'use' Name EOS ;
UseStmt = LblDef 'use' Name ',' 'only' ':' EOS ;
UseStmt = LblDef 'use' Name ',' RenameList EOS ;
UseStmt = LblDef 'use' Name ',' 'only' ':' OnlyList EOS ;
RenameList = Rename+ ;
OnlyList = Only+ ;
Rename = Ident '=>' UseName ;
Only = GenericSpec ;
Only = Ident '=>' UseName ;
Only = UseName ;
InterfaceBlock = InterfaceStmt InterfaceBlockBody EndInterfaceStmt ;
InterfaceBlockBody = InterfaceBodyPartConstruct ;
InterfaceBlockBody = InterfaceBlockBody InterfaceBodyPartConstruct ;
InterfaceBodyPartConstruct = InterfaceBody ;
InterfaceBodyPartConstruct = ModuleProcedureStmt ;
InterfaceStmt = LblDef 'interface' GenericName EOS ;
InterfaceStmt = LblDef 'interface' GenericSpec EOS ;
InterfaceStmt = LblDef 'interface' EOS ;
EndInterfaceStmt = LblDef 'endinterface' EOS ;
EndInterfaceStmt = LblDef 'end' 'interface' EOS ;
InterfaceBody = LblDef FunctionPrefix FunctionName FunctionInterfaceRange ;
InterfaceBody = LblDef 'subroutine' SubroutineName SubroutineInterfaceRange ;
FunctionInterfaceRange = FunctionParList EOS SubprogramInterfaceBody? EndFunctionStmt ;
SubroutineInterfaceRange = SubroutineParList EOS SubprogramInterfaceBody? EndSubroutineStmt ;
SubprogramInterfaceBody = SpecificationPartConstruct ;
SubprogramInterfaceBody = SubprogramInterfaceBody SpecificationPartConstruct ;
ModuleProcedureStmt = LblDef 'module' 'procedure' ProcedureNameList EOS ;
ProcedureNameList = ProcedureName+ ;
ProcedureName = Ident ;
GenericSpec = 'operator' '(' DefinedOperator ')' ;
GenericSpec = 'assignment' '(' '=' ')' ;
FunctionArgList = FunctionArg ;
FunctionArgList = FunctionArgList ',' FunctionArg ;
FunctionArgList = SectionSubscriptList ',' FunctionArg ;
FunctionArg = Name '=' Expr ;
ContainsStmt = LblDef 'contains' EOS ;
ArrayName = Ident ;
ComponentName = Ident ;
GenericName = Ident ;
ModuleName = Ident ;
NamelistGroupName = Ident ;
UseName = Ident ;
TypeName = Ident ;
EndName = Ident ;
