applet:
        applet::(applet.attlist param* Flow.model)
applet.attlist:
        Core.attrib alt::Text.datatype (archive::STR)? (code::STR)? (codebase::URI.datatype)? (object::STR)? height::Length.datatype width::Length.datatype
applet.attlist:
        (align::("top" | "middle" | "bottom" | "left" | "right"))? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)?
applet.attlist:
        name.attlist
Inline.class:
        applet
Inline.class:
        bdo
Inline.class:
        map
Inline.class:
        Edit.class
Inline.class:
        a
Inline.class:
        iframe
Inline.class:
        img
Inline.class:
        font
        basefont
        s
        strike
        u
Inline.class:
        object
Inline.class:
        b
        big
        i
        small
        sub
        sup
        tt
Inline.class:
        Script.class
Inline.class:
        abbr
        acronym
        br
        cite
        code
        dfn
        em
        kbd
        q
        samp
        span
        strong
        var
id.attrib:
        (id::ID.datatype)?
class.attrib:
        (class::NMTOKENS.datatype)?
title.attrib:
        (title::Text.datatype)?
Core.attrib:
        id.attrib class.attrib title.attrib
Core.attrib:
        (style::STR)?
lang.attrib:
        (xml:lang::LanguageCode.datatype)?
lang.attrib:
        (lang::LanguageCode.datatype)?
I18n.attrib:
        lang.attrib
I18n.attrib:
        dir.attrib?
Common.attrib:
        Core.attrib I18n.attrib
Common.attrib:
        Events.attrib
CommonIdRequired.attrib:
        id::ID.datatype class.attrib title.attrib I18n.attrib
CommonIdRequired.attrib:
        Events.attrib
base:
        base::base.attlist
base.attlist:
        href::URI.datatype
base.attlist:
        target.attrib
head.content:
        base?
head.content:
        isindex?
head.content:
        link*
head.content:
        meta*
head.content:
        script*
head.content:
        style*
bdo:
        bdo::(bdo.attlist Inline.model)
bdo.attlist:
        Core.attrib lang.attrib dir.attrib
dir.attrib:
        dir::("ltr" | "rtl")
area:
        area::area.attlist
area.attlist:
        Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)?
area.attlist:
        (onblur::Script.datatype)? (onfocus::Script.datatype)?
area.attlist:
        target.attrib
map:
        map::(map.attlist (Block.class | area)+)
map.attlist:
        CommonIdRequired.attrib
map.attlist:
        name.attlist
a.attlist:
        shape.attrib coords.attrib
a.attlist:
        (onblur::Script.datatype)? (onfocus::Script.datatype)?
a.attlist:
        Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)?
a.attlist:
        name.attlist
a.attlist:
        target.attrib
img.attlist:
        usemap.attlist
img.attlist:
        Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)?
img.attlist:
        (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)?
img.attlist:
        name.attlist
img.attlist:
        (ismap::"ismap")?
object.attlist:
        usemap.attlist
object.attlist:
        (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)?
object.attlist:
        Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::STR)? (tabindex::Number.datatype)?
usemap.attlist:
        (usemap::IDREF.datatype)?
shape.attrib:
        (shape::("rect" | "circle" | "poly" | "default"))?
coords.attrib:
        (coords::STR)?
Length.datatype:
        STR
LinkTypes.datatype:
        NMTOKENS.datatype
MediaDesc.datatype:
        STR
MultiLength.datatype:
        STR
Number.datatype:
        STR
Pixels.datatype:
        STR
Script.datatype:
        STR
Text.datatype:
        STR
Character.datatype:
        STR
Charset.datatype:
        STR
Charsets.datatype:
        STR
ContentType.datatype:
        STR
ContentTypes.datatype:
        STR
Datetime.datatype:
        STR
FPI.datatype:
        STR
LanguageCode.datatype:
        STR
URI.datatype:
        STR
URIs.datatype:
        STR
NMTOKEN.datatype:
        STR
NMTOKENS.datatype:
        STR
ID.datatype:
        STR
IDREF.datatype:
        STR
IDREFS.datatype:
        STR
del:
        del::(del.attlist Inline.model)
del.attlist:
        Edit.attrib
ins:
        ins::(ins.attlist Inline.model)
ins.attlist:
        Edit.attrib
Edit.attrib:
        (cite::URI.datatype)? (datetime::Datetime.datatype)?
Edit.class:
        del
        ins
Block.class:
        Edit.class
Block.class:
        center
        isindex
Block.class:
        List.class
Block.class:
        hr
Block.class:
        Script.class
Block.class:
        address
        blockquote
        div
        p
        pre
        Heading.class
form.attlist:
        (onreset::Script.datatype)? (onsubmit::Script.datatype)?
form.attlist:
        (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)?
form.attlist:
        name.attlist
form.attlist:
        target.attrib
body.attlist:
        (onload::Script.datatype)? (onunload::Script.datatype)?
body.attlist:
        (background::URI.datatype)? (bgcolor::Color.datatype)? (text::Color.datatype)? (link::Color.datatype)? (vlink::Color.datatype)? (alink::Color.datatype)?
label.attlist:
        (onblur::Script.datatype)? (onfocus::Script.datatype)?
input.attlist:
        (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)?
input.attlist:
        (disabled::"disabled")? (readonly::"readonly")? (alt::STR)? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)?
input.attlist:
        align.attrib
select.attlist:
        (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)?
select.attlist:
        (disabled::"disabled")? (tabindex::Number.datatype)?
textarea.attlist:
        (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)?
textarea.attlist:
        (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)?
button.attlist:
        (onblur::Script.datatype)? (onfocus::Script.datatype)?
button.attlist:
        Common.attrib (name::STR)? (value::STR)? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)?
Events.attrib:
        (onclick::Script.datatype)? (ondblclick::Script.datatype)? (onmousedown::Script.datatype)? (onmouseup::Script.datatype)? (onmouseover::Script.datatype)? (onmousemove::Script.datatype)? (onmouseout::Script.datatype)? (onkeypress::Script.datatype)? (onkeydown::Script.datatype)? (onkeyup::Script.datatype)?
InputType.class:
        "image"
        "button"
option.attlist:
        (disabled::"disabled")? (label::Text.datatype)?
optgroup:
        optgroup::(optgroup.attlist option+)
optgroup.attlist:
        Common.attrib (disabled::"disabled")? label::Text.datatype
fieldset:
        fieldset::(fieldset.attlist legend Flow.model)
fieldset.attlist:
        Common.attrib
button:
        button::(button.attlist Flow.model)
legend:
        legend::(legend.attlist Inline.model)
legend.attlist:
        Common.attrib (accesskey::Character.datatype)?
legend.attlist:
        (align::("top" | "bottom" | "left" | "right"))?
Form.class:
        fieldset
Formctrl.class:
        button
frameset:
        frameset::(frameset.attlist (frameset | frame)+ noframes?)
frameset:
        body
frameset.attlist:
        Core.attrib (cols::MultiLength.datatype)? (rows::MultiLength.datatype)?
frame:
        frame::frame.attlist
frame.attlist:
        Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (noresize::"noresize")? (scrolling::("yes" | "no" | "auto"))?
noframes:
        noframes::(noframes.attlist body)
noframes.attlist:
        Common.attrib
a:
        a::(a.attlist Inline.model)
iframe:
        iframe::(iframe.attlist Flow.model)
iframe.attlist:
        Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))?
iframe.attlist:
        name.attlist
img:
        img::img.attlist
basefont:
        basefont::basefont.attlist
basefont.attlist:
        id.attrib Font.attrib
center:
        center::(center.attlist Flow.model)
center.attlist:
        Common.attrib
font:
        font::(font.attlist Inline.model)
font.attlist:
        Core.attrib I18n.attrib Font.attrib
Font.attrib:
        (size::STR)? (color::Color.datatype)? (face::STR)?
s:
        s::(s.attlist Inline.model)
s.attlist:
        Common.attrib
strike:
        strike::(strike.attlist Inline.model)
strike.attlist:
        Common.attrib
u:
        u::(u.attlist Inline.model)
u.attlist:
        Common.attrib
dir:
        dir::(dir.attlist li.noblock+)
dir.attlist:
        Common.attrib (compact::"compact")?
menu:
        menu::(menu.attlist li.noblock+)
menu.attlist:
        Common.attrib (compact::"compact")?
li.noblock:
        li::(li.attlist Inline.model)
isindex:
        isindex::isindex.attlist
isindex.attlist:
        Core.attrib I18n.attrib (prompt::Text.datatype)?
br.attlist:
        (clear::("left" | "all" | "right" | "none"))?
br.attlist:
        Core.attrib
caption.attlist:
        align.attrib
div.attlist:
        align.attrib
div.attlist:
        Common.attrib
dl.attlist:
        (compact::"compact")?
dl.attlist:
        Common.attrib
Heading.attrib:
        align.attrib
Heading.attrib:
        Common.attrib
hr.attlist:
        (align::("left" | "center" | "right"))? (noshade::"noshade")? (size::Pixels.datatype)? (width::Pixels.datatype)?
hr.attlist:
        Common.attrib
li.attlist:
        (type::STR)? (value::STR)?
li.attlist:
        Common.attrib
ol.attlist:
        (type::STR)? (compact::"compact")? (start::STR)?
ol.attlist:
        Common.attrib
p.attlist:
        align.attrib
p.attlist:
        Common.attrib
pre.attlist:
        (width::Length.datatype)?
pre.attlist:
        Common.attrib (xml:space::"preserve")?
script.attlist:
        (language::ContentType.datatype)?
script.attlist:
        (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")?
table.attlist:
        align.attrib (bgcolor::Color.datatype)?
table.attlist:
        (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)?
tr.attlist:
        (bgcolor::Color.datatype)?
Cell.attrib:
        (nowrap::"nowrap")? (bgcolor::Color.datatype)? (width::Pixels.datatype)? (height::Pixels.datatype)?
ul.attlist:
        (type::STR)? (compact::"compact")?
ul.attlist:
        Common.attrib
align.attrib:
        (align::("left" | "all" | "right" | "none"))?
Color.datatype:
        STR
List.class:
        dir
        menu
List.class:
        ul
        ol
        dl
Block.mix:
        STR
        Inline.class
Block.mix:
        Block.class
link:
        link::link.attlist
link.attlist:
        Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)?
dl:
        dl::(dl.attlist (dt | dd)+)
dt:
        dt::(dt.attlist Inline.model)
dt.attlist:
        Common.attrib
dd:
        dd::(dd.attlist Flow.model)
dd.attlist:
        Common.attrib
ol:
        ol::(ol.attlist li+)
ul:
        ul::(ul.attlist li+)
li:
        li::(li.attlist Flow.model)
meta:
        meta::meta.attlist
meta.attlist:
        I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::STR)? (scheme::STR)?
frame.attrib:
        name.attlist
frame.attrib:
        (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))?
name.attlist:
        (name::STR)?
object:
        object::(object.attlist param* Flow.model)
param:
        param::param.attlist
param.attlist:
        id.attrib name::STR (value::STR)? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)?
hr:
        hr::hr.attlist
b:
        b::(b.attlist Inline.model)
b.attlist:
        Common.attrib
big:
        big::(big.attlist Inline.model)
big.attlist:
        Common.attrib
i:
        i::(i.attlist Inline.model)
i.attlist:
        Common.attrib
small:
        small::(small.attlist Inline.model)
small.attlist:
        Common.attrib
sub:
        sub::(sub.attlist Inline.model)
sub.attlist:
        Common.attrib
sup:
        sup::(sup.attlist Inline.model)
sup.attlist:
        Common.attrib
tt:
        tt::(tt.attlist Inline.model)
tt.attlist:
        Common.attrib
script:
        script::(script.attlist STR)
noscript:
        noscript::(noscript.attlist Block.model)
noscript.attlist:
        Common.attrib
Script.class:
        noscript
        script
style:
        style::(style.attlist STR)
style.attlist:
        title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")?
col:
        col::col.attlist
col.attlist:
        Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib
colgroup:
        colgroup::(colgroup.attlist col*)
colgroup.attlist:
        Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib
tbody:
        tbody::(tbody.attlist tr+)
tbody.attlist:
        Common.attrib CellHAlign.attrib CellVAlign.attrib
thead:
        thead::(thead.attlist tr+)
thead.attlist:
        Common.attrib CellHAlign.attrib CellVAlign.attrib
tfoot:
        tfoot::(tfoot.attlist tr+)
tfoot.attlist:
        Common.attrib CellHAlign.attrib CellVAlign.attrib
rules.attrib:
        (rules::("none" | "groups" | "rows" | "cols" | "all"))?
link.attrib:
        target.attrib
target.attrib:
        (target::STR)?
br:
        br::br.attlist
span:
        span::(span.attlist Inline.model)
span.attlist:
        Common.attrib
abbr:
        abbr::(abbr.attlist Inline.model)
abbr.attlist:
        Common.attrib
acronym:
        acronym::(acronym.attlist Inline.model)
acronym.attlist:
        Common.attrib
cite:
        cite::(cite.attlist Inline.model)
cite.attlist:
        Common.attrib
code:
        code::(code.attlist Inline.model)
code.attlist:
        Common.attrib
dfn:
        dfn::(dfn.attlist Inline.model)
dfn.attlist:
        Common.attrib
em:
        em::(em.attlist Inline.model)
em.attlist:
        Common.attrib
kbd:
        kbd::(kbd.attlist Inline.model)
kbd.attlist:
        Common.attrib
q:
        q::(q.attlist Inline.model)
q.attlist:
        Common.attrib (cite::URI.datatype)?
samp:
        samp::(samp.attlist Inline.model)
samp.attlist:
        Common.attrib
strong:
        strong::(strong.attlist Inline.model)
strong.attlist:
        Common.attrib
var:
        var::(var.attlist Inline.model)
var.attlist:
        Common.attrib
div:
        div::(div.attlist Flow.model)
p:
        p::(p.attlist Inline.model)
address:
        address::(address.attlist Inline.model)
address.attlist:
        Common.attrib
blockquote:
        blockquote::(blockquote.attlist Block.model)
blockquote.attlist:
        Common.attrib (cite::URI.datatype)?
pre:
        pre::(pre.attlist Inline.model)
h1:
        h1::(Heading.attrib Heading.content)
h2:
        h2::(Heading.attrib Heading.content)
h3:
        h3::(Heading.attrib Heading.content)
h4:
        h4::(Heading.attrib Heading.content)
h5:
        h5::(Heading.attrib Heading.content)
h6:
        h6::(Heading.attrib Heading.content)
Heading.content:
        Inline.model
Heading.class:
        h1
        h2
        h3
        h4
        h5
        h6
Inline.model:
        (STR | Inline.class)*
Block.model:
        Block.mix+
Flow.model:
        (STR | Inline.class | Block.class)*
