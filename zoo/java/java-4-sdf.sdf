module Main

exports
 context-free start-symbols Top-sort
  sorts
        Top-sort CompilationUnits CompilationUnit PackageDeclaration Name Type PrimitiveType NumericType IntegralType FloatingPointType ReferenceType ClassOrInterfaceType ArrayType Identifier ImportDeclaration SingleTypeImportDeclaration TypeImportOnDemandDeclaration TypeDeclaration ClassDeclaration Modifier Super ClassType Interfaces InterfaceType ClassBody ClassBodyDeclaration ClassMemberDeclaration FieldDeclaration VariableDeclarator VariableDeclaratorId VariableInitializer Expression Primary PrimaryNoNewArray Literal IntegerLiteral LongLiteral ClassInstanceCreationExpression FieldAccess MethodInvocation ArrayAccess ArrayCreationExpression DimExpr Dim DimExprInitialized ArrayInitializer StatementExpression Assignment LeftHandSide AssignmentOperator MethodDeclaration MethodHeader MethodRes MethodDeclarator FormalParameter Throws MethodBody Block BlockStatement LocalVariableDeclarationStatement LocalVariableDeclaration Statement StatementWithoutTrailingSubstatement EmptyStatement ExpressionStatement SwitchStatement SwitchBlock SwitchBlockStatementGroup SwitchLabel DoStatement BreakStatement ContinueStatement ReturnStatement SynchronizedStatement ThrowStatement TryStatement CatchClause Finally LabeledStatement IfThenStatement IfThenElseStatement StatementNoShortIf LabeledStatementNoShortIf WhileStatementNoShortIf WhileStatement ForStatement ForInit StatementExpressionList ForUpdate AssertStatement StaticInitializer ConstructorDeclaration ConstructorDeclarator SimpleName ConstructorBody ExplicitConstructorInvocation InterfaceDeclaration ExtendsInterfaces InterfaceBody InterfaceMemberDeclaration ConstantDeclaration AbstractMethodDeclaration 
  context-free syntax
        CompilationUnits -> Top-sort

        CompilationUnit* -> CompilationUnits

        PackageDeclaration? ImportDeclaration* TypeDeclaration+ -> CompilationUnit

        "package" Name ";" -> PackageDeclaration

        Type "." "class" -> Name

        Identifier ("." Identifier)* -> Name

        PrimitiveType -> Type

        ReferenceType -> Type

        NumericType -> PrimitiveType

        "boolean" -> PrimitiveType

        IntegralType -> NumericType

        FloatingPointType -> NumericType

        "byte" -> IntegralType

        "short" -> IntegralType

        "int" -> IntegralType

        "long" -> IntegralType

        "char" -> IntegralType

        "float" -> FloatingPointType

        "double" -> FloatingPointType

        ClassOrInterfaceType -> ReferenceType

        ArrayType -> ReferenceType

        Name -> ClassOrInterfaceType

        PrimitiveType "[" "]" -> ArrayType

        Name "[" "]" -> ArrayType

        ArrayType "[" "]" -> ArrayType

        "@" NatCon -> Identifier

        SingleTypeImportDeclaration -> ImportDeclaration

        TypeImportOnDemandDeclaration -> ImportDeclaration

        "import" Name ";" -> SingleTypeImportDeclaration

        "import" Name "." "*" ";" -> TypeImportOnDemandDeclaration

        ClassDeclaration -> TypeDeclaration

        InterfaceDeclaration -> TypeDeclaration

        ";" -> TypeDeclaration

        Modifier* "class" Identifier Super? Interfaces? ClassBody -> ClassDeclaration

        "public" -> Modifier

        "protected" -> Modifier

        "private" -> Modifier

        "static" -> Modifier

        "abstract" -> Modifier

        "final" -> Modifier

        "native" -> Modifier

        "synchronized" -> Modifier

        "transient" -> Modifier

        "volatile" -> Modifier

        "extends" ClassType -> Super

        ClassOrInterfaceType -> ClassType

        "implements" (InterfaceType ("," InterfaceType)*) -> Interfaces

        ClassOrInterfaceType -> InterfaceType

        "{" ClassBodyDeclaration* "}" -> ClassBody

        ClassMemberDeclaration -> ClassBodyDeclaration

        StaticInitializer -> ClassBodyDeclaration

        ConstructorDeclaration -> ClassBodyDeclaration

        ";" -> ClassBodyDeclaration

        ClassDeclaration -> ClassBodyDeclaration

        InterfaceDeclaration -> ClassBodyDeclaration

        FieldDeclaration -> ClassMemberDeclaration

        MethodDeclaration -> ClassMemberDeclaration

        Block -> ClassMemberDeclaration

        Modifier* Type (VariableDeclarator ("," VariableDeclarator)*) ";" -> FieldDeclaration

        VariableDeclaratorId -> VariableDeclarator

        VariableDeclaratorId "=" VariableInitializer -> VariableDeclarator

        Identifier -> VariableDeclaratorId

        VariableDeclaratorId "[" "]" -> VariableDeclaratorId

        Expression -> VariableInitializer

        ArrayInitializer -> VariableInitializer

        Primary -> Expression

        "+" Expression -> Expression

        "-" Expression -> Expression

        "~" Expression -> Expression

        "!" Expression -> Expression

        "(" PrimitiveType Dim* ")" Expression -> Expression

        "(" Type ")" Expression -> Expression

        "(" Name Dim+ ")" Expression -> Expression

        Expression "*" Expression -> Expression

        Expression "/" Expression -> Expression

        Expression "%" Expression -> Expression

        Expression "+" Expression -> Expression

        Expression "-" Expression -> Expression

        Expression "<<" Expression -> Expression

        Expression ">>" Expression -> Expression

        Expression ">>>" Expression -> Expression

        Expression "<" Expression -> Expression

        Expression ">" Expression -> Expression

        Expression "<=" Expression -> Expression

        Expression ">=" Expression -> Expression

        Expression "instanceof" ReferenceType -> Expression

        Expression "==" Expression -> Expression

        Expression "!=" Expression -> Expression

        Expression "&" Expression -> Expression

        Expression "^" Expression -> Expression

        Expression "|" Expression -> Expression

        Expression "&&" Expression -> Expression

        Expression "||" Expression -> Expression

        Expression "?" Expression ":" Expression -> Expression

        StatementExpression -> Expression

        Assignment -> Expression

        "+" Expression -> Expression

        "-" Expression -> Expression

        "~" Expression -> Expression

        "!" Expression -> Expression

        Expression "<" Expression -> Expression

        Expression ">" Expression -> Expression

        Expression "<=" Expression -> Expression

        Expression ">=" Expression -> Expression

        PrimaryNoNewArray -> Primary

        ArrayCreationExpression -> Primary

        Literal -> PrimaryNoNewArray

        "this" -> PrimaryNoNewArray

        Name "." "this" -> PrimaryNoNewArray

        "(" Expression ")" -> PrimaryNoNewArray

        ClassInstanceCreationExpression -> PrimaryNoNewArray

        FieldAccess -> PrimaryNoNewArray

        MethodInvocation -> PrimaryNoNewArray

        ArrayAccess -> PrimaryNoNewArray

        IntegerLiteral -> Literal

        LongLiteral -> Literal

        FloatingPointLiteral -> Literal

        DoubleLiteral -> Literal

        BooleanLiteral -> Literal

        CharacterLiteral -> Literal

        StringLiteral -> Literal

        NullLiteral -> Literal

        DecimalIntegerLiteral -> IntegerLiteral

        HexIntegerLiteral -> IntegerLiteral

        OctalIntegerLiteral -> IntegerLiteral

        DecimalLongLiteral -> LongLiteral

        HexLongLiteral -> LongLiteral

        OctalLongLiteral -> LongLiteral

        "new" ClassType "(" (Expression ("," Expression)*)? ")" -> ClassInstanceCreationExpression

        "new" ClassType "(" (Expression ("," Expression)*)? ")" ClassBody -> ClassInstanceCreationExpression

        Name -> FieldAccess

        Primary "." Identifier -> FieldAccess

        "super" "." Identifier -> FieldAccess

        Name "(" (Expression ("," Expression)*)? ")" -> MethodInvocation

        Primary "." Identifier "(" (Expression ("," Expression)*)? ")" -> MethodInvocation

        Primary "." ClassInstanceCreationExpression -> MethodInvocation

        "super" "." Identifier "(" (Expression ("," Expression)*)? ")" -> MethodInvocation

        Name "[" Expression "]" -> ArrayAccess

        PrimaryNoNewArray "[" Expression "]" -> ArrayAccess

        "new" PrimitiveType DimExpr+ Dim* -> ArrayCreationExpression

        "new" ClassOrInterfaceType DimExpr+ Dim* -> ArrayCreationExpression

        "new" PrimitiveType DimExprInitialized+ ArrayInitializer -> ArrayCreationExpression

        "new" ClassOrInterfaceType DimExprInitialized+ ArrayInitializer -> ArrayCreationExpression

        "[" Expression "]" -> DimExpr

        "[" "]" -> Dim

        "[" Expression? "]" -> DimExprInitialized

        "{" (VariableInitializer ("," VariableInitializer)*)? ","? "}" -> ArrayInitializer

        Expression "++" -> StatementExpression

        Expression "--" -> StatementExpression

        "++" Expression -> StatementExpression

        "--" Expression -> StatementExpression

        Assignment -> StatementExpression

        Expression "++" -> StatementExpression

        Expression "--" -> StatementExpression

        "++" Expression -> StatementExpression

        "--" Expression -> StatementExpression

        MethodInvocation -> StatementExpression

        ClassInstanceCreationExpression -> StatementExpression

        LeftHandSide AssignmentOperator Expression -> Assignment

        FieldAccess -> LeftHandSide

        ArrayAccess -> LeftHandSide

        "=" -> AssignmentOperator

        "*=" -> AssignmentOperator

        "/=" -> AssignmentOperator

        "%=" -> AssignmentOperator

        "+=" -> AssignmentOperator

        "-=" -> AssignmentOperator

        "<<=" -> AssignmentOperator

        ">>=" -> AssignmentOperator

        ">>>=" -> AssignmentOperator

        "&=" -> AssignmentOperator

        "^=" -> AssignmentOperator

        "|=" -> AssignmentOperator

        MethodHeader MethodBody -> MethodDeclaration

        Modifier* MethodRes MethodDeclarator Throws? -> MethodHeader

        "void" -> MethodRes

        Type -> MethodRes

        Identifier "(" (FormalParameter ("," FormalParameter)*)? ")" -> MethodDeclarator

        MethodDeclarator "[" "]" -> MethodDeclarator

        Modifier* Type VariableDeclaratorId -> FormalParameter

        "throws" (ClassType ("," ClassType)*) -> Throws

        Block -> MethodBody

        ";" -> MethodBody

        "{" BlockStatement* "}" -> Block

        Modifier* LocalVariableDeclarationStatement -> BlockStatement

        Statement -> BlockStatement

        LocalVariableDeclaration ";" -> LocalVariableDeclarationStatement

        Type (VariableDeclarator ("," VariableDeclarator)*) -> LocalVariableDeclaration

        StatementWithoutTrailingSubstatement -> Statement

        LabeledStatement -> Statement

        IfThenStatement -> Statement

        IfThenElseStatement -> Statement

        WhileStatement -> Statement

        ForStatement -> Statement

        ClassDeclaration -> Statement

        AssertStatement -> Statement

        Block -> StatementWithoutTrailingSubstatement

        EmptyStatement -> StatementWithoutTrailingSubstatement

        ExpressionStatement -> StatementWithoutTrailingSubstatement

        SwitchStatement -> StatementWithoutTrailingSubstatement

        DoStatement -> StatementWithoutTrailingSubstatement

        BreakStatement -> StatementWithoutTrailingSubstatement

        ContinueStatement -> StatementWithoutTrailingSubstatement

        ReturnStatement -> StatementWithoutTrailingSubstatement

        SynchronizedStatement -> StatementWithoutTrailingSubstatement

        ThrowStatement -> StatementWithoutTrailingSubstatement

        TryStatement -> StatementWithoutTrailingSubstatement

        ";" -> EmptyStatement

        StatementExpression ";" -> ExpressionStatement

        "switch" "(" Expression ")" SwitchBlock -> SwitchStatement

        "{" SwitchBlockStatementGroup* SwitchLabel* "}" -> SwitchBlock

        SwitchLabel+ BlockStatement+ -> SwitchBlockStatementGroup

        "case" Expression ":" -> SwitchLabel

        "default" ":" -> SwitchLabel

        "do" Statement "while" "(" Expression ")" ";" -> DoStatement

        "break" Identifier? ";" -> BreakStatement

        "continue" Identifier? ";" -> ContinueStatement

        "return" Expression? ";" -> ReturnStatement

        "synchronized" "(" Expression ")" Block -> SynchronizedStatement

        "throw" Expression ";" -> ThrowStatement

        "try" Block CatchClause+ -> TryStatement

        "try" Block CatchClause* Finally -> TryStatement

        "catch" "(" FormalParameter ")" Block -> CatchClause

        "finally" Block -> Finally

        Identifier ":" Statement -> LabeledStatement

        "if" "(" Expression ")" Statement -> IfThenStatement

        "if" "(" Expression ")" StatementNoShortIf "else" Statement -> IfThenElseStatement

        StatementWithoutTrailingSubstatement -> StatementNoShortIf

        LabeledStatementNoShortIf -> StatementNoShortIf

        IfThenElseStatementNoShortIf -> StatementNoShortIf

        WhileStatementNoShortIf -> StatementNoShortIf

        ForStatementNoShortIf -> StatementNoShortIf

        Identifier ":" StatementNoShortIf -> LabeledStatementNoShortIf

        "while" "(" Expression ")" StatementNoShortIf -> WhileStatementNoShortIf

        "while" "(" Expression ")" Statement -> WhileStatement

        "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement -> ForStatement

        StatementExpressionList -> ForInit

        LocalVariableDeclaration -> ForInit

        StatementExpression ("," StatementExpression)* -> StatementExpressionList

        StatementExpressionList -> ForUpdate

        "assert" Expression ";" -> AssertStatement

        "static" Block -> StaticInitializer

        Modifier* ConstructorDeclarator Throws? ConstructorBody -> ConstructorDeclaration

        SimpleName "(" (FormalParameter ("," FormalParameter)*)? ")" -> ConstructorDeclarator

        Identifier -> SimpleName

        "{" ExplicitConstructorInvocation? BlockStatement* "}" -> ConstructorBody

        "this" "(" (Expression ("," Expression)*)? ")" ";" -> ExplicitConstructorInvocation

        "super" "(" (Expression ("," Expression)*)? ")" ";" -> ExplicitConstructorInvocation

        Modifier* "interface" Identifier ExtendsInterfaces? InterfaceBody -> InterfaceDeclaration

        "extends" (InterfaceType ("," InterfaceType)*) -> ExtendsInterfaces

        "{" InterfaceMemberDeclaration* "}" -> InterfaceBody

        ConstantDeclaration -> InterfaceMemberDeclaration

        AbstractMethodDeclaration -> InterfaceMemberDeclaration

        InterfaceDeclaration -> InterfaceMemberDeclaration

        ClassDeclaration -> InterfaceMemberDeclaration

        FieldDeclaration -> ConstantDeclaration

        MethodHeader ";" -> AbstractMethodDeclaration
