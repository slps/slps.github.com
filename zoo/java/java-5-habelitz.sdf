module Main

exports
  sorts
        JavaSource CompilationUnit AnnotationList Annotation AT QualifiedIdentifier IDENT JAVA-ID-START JAVA-ID-PART DOT AnnotationInit LPAREN AnnotationInitializers AnnotationInitializer ASSIGN AnnotationElementValue AnnotationElementValueExpression ConditionalExpression LogicalOrExpression LogicalAndExpression InclusiveOrExpression ExclusiveOrExpression AndExpression EqualityExpression InstanceOfExpression RelationalExpression ShiftExpression AdditiveExpression MultiplicativeExpression UnaryExpression PLUS MINUS INC PostfixedExpression PrimaryExpression ParenthesizedExpression Expression AssignmentExpression PLUS-ASSIGN MINUS-ASSIGN STAR-ASSIGN DIV-ASSIGN AND-ASSIGN OR-ASSIGN XOR-ASSIGN MOD-ASSIGN SHIFT-LEFT-ASSIGN SHIFT-RIGHT-ASSIGN BIT-SHIFT-RIGHT-ASSIGN RPAREN Literal HEX-LITERAL HEX-DIGIT INTEGER-TYPE-SUFFIX OCTAL-LITERAL DECIMAL-LITERAL FLOATING-POINT-LITERAL EXPONENT FLOAT-TYPE-SUFFIX CHARACTER-LITERAL ESCAPE-SEQUENCE UNICODE-ESCAPE OCTAL-ESCAPE STRING-LITERAL TRUE FALSE NULL NewExpression NEW PrimitiveType BOOLEAN CHAR BYTE SHORT INT LONG FLOAT DOUBLE NewArrayConstruction ArrayDeclaratorList ArrayDeclarator LBRACK RBRACK ArrayInitializer LCURLY VariableInitializer COMMA RCURLY GenericTypeArgumentListSimplified LESS-THAN GenericTypeArgumentSimplified Type SimpleType ObjectType QualifiedTypeIdent TypeIdent GenericTypeArgumentList GenericTypeArgument QUESTION GenericWildcardBoundType EXTENDS SUPER GenericTypeListClosing GREATER-THAN SHIFT-RIGHT BIT-SHIFT-RIGHT QualifiedTypeIdentSimplified TypeIdentSimplified Arguments ExpressionList ClassBody ClassScopeDeclarations Block BlockStatement LocalVariableDeclaration LocalModifierList LocalModifier FINAL ClassFieldDeclaratorList ClassFieldDeclarator VariableDeclaratorId SEMI TypeDeclaration ModifierList Modifier PUBLIC PROTECTED PRIVATE STATIC ABSTRACT NATIVE SYNCHRONIZED TRANSIENT VOLATILE STRICTFP ClassTypeDeclaration CLASS GenericTypeParameterList GenericTypeParameter Bound AND ClassExtendsClause ImplementsClause IMPLEMENTS TypeList InterfaceTypeDeclaration INTERFACE InterfaceExtendsClause InterfaceBody InterfaceScopeDeclarations FormalParameterList FormalParameterStandardDecl FormalParameterVarArgDecl ELLIPSIS ThrowsClause THROWS QualifiedIdentList VOID InterfaceFieldDeclaratorList InterfaceFieldDeclarator EnumTypeDeclaration ENUM EnumBody EnumScopeDeclarations EnumConstants EnumConstant EnumClassScopeDeclarations AnnotationTypeDeclaration AnnotationBody AnnotationScopeDeclarations AnnotationDefaultValue DEFAULT Statement ASSERT COLON IF ELSE FOR ForInit ForCondition ForUpdater WHILE DO TRY Catches CatchClause CATCH FinallyClause FINALLY SWITCH SwitchBlockLabels SwitchCaseLabels SwitchCaseLabel CASE SwitchDefaultLabel RETURN THROW BREAK CONTINUE QualifiedIdentExpression THIS InnerNewExpression DEC UnaryExpressionNotPlusMinus NOT LOGICAL-NOT STAR DIV MOD SHIFT-LEFT LESS-OR-EQUAL GREATER-OR-EQUAL INSTANCEOF EQUAL NOT-EQUAL XOR OR LOGICAL-AND LOGICAL-OR AnnotationElementValueArrayInitializer PackageDeclaration PACKAGE ImportDeclaration IMPORT DOTSTAR TypeDecls 
  context-free syntax
        CompilationUnit -> JavaSource

        AnnotationList PackageDeclaration? ImportDeclaration* TypeDecls* -> CompilationUnit

        Annotation* -> AnnotationList

        AT QualifiedIdentifier AnnotationInit? -> Annotation

        "@" -> AT

        IDENT (DOT ident::IDENT)* -> QualifiedIdentifier

        JAVA-ID-START JAVA-ID-PART* -> IDENT

        "a" -> JAVA-ID-START
        "b" -> JAVA-ID-START
        "c" -> JAVA-ID-START
        "d" -> JAVA-ID-START
        "e" -> JAVA-ID-START
        "f" -> JAVA-ID-START
        "g" -> JAVA-ID-START
        "h" -> JAVA-ID-START
        "i" -> JAVA-ID-START
        "j" -> JAVA-ID-START
        "k" -> JAVA-ID-START
        "l" -> JAVA-ID-START
        "m" -> JAVA-ID-START
        "n" -> JAVA-ID-START
        "o" -> JAVA-ID-START
        "p" -> JAVA-ID-START
        "q" -> JAVA-ID-START
        "r" -> JAVA-ID-START
        "s" -> JAVA-ID-START
        "t" -> JAVA-ID-START
        "u" -> JAVA-ID-START
        "v" -> JAVA-ID-START
        "w" -> JAVA-ID-START
        "x" -> JAVA-ID-START
        "y" -> JAVA-ID-START
        "z" -> JAVA-ID-START
        "A" -> JAVA-ID-START
        "B" -> JAVA-ID-START
        "C" -> JAVA-ID-START
        "D" -> JAVA-ID-START
        "E" -> JAVA-ID-START
        "F" -> JAVA-ID-START
        "G" -> JAVA-ID-START
        "H" -> JAVA-ID-START
        "I" -> JAVA-ID-START
        "J" -> JAVA-ID-START
        "K" -> JAVA-ID-START
        "L" -> JAVA-ID-START
        "M" -> JAVA-ID-START
        "N" -> JAVA-ID-START
        "O" -> JAVA-ID-START
        "P" -> JAVA-ID-START
        "Q" -> JAVA-ID-START
        "R" -> JAVA-ID-START
        "S" -> JAVA-ID-START
        "T" -> JAVA-ID-START
        "U" -> JAVA-ID-START
        "V" -> JAVA-ID-START
        "W" -> JAVA-ID-START
        "X" -> JAVA-ID-START
        "Y" -> JAVA-ID-START
        "Z" -> JAVA-ID-START

        JAVA-ID-START -> JAVA-ID-PART
        "0" -> JAVA-ID-PART
        "1" -> JAVA-ID-PART
        "2" -> JAVA-ID-PART
        "3" -> JAVA-ID-PART
        "4" -> JAVA-ID-PART
        "5" -> JAVA-ID-PART
        "6" -> JAVA-ID-PART
        "7" -> JAVA-ID-PART
        "8" -> JAVA-ID-PART
        "9" -> JAVA-ID-PART

        "." -> DOT

        LPAREN AnnotationInitializers RPAREN -> AnnotationInit

        "(" -> LPAREN

        AnnotationInitializer (COMMA AnnotationInitializer)* -> AnnotationInitializers
        AnnotationElementValue -> AnnotationInitializers

        IDENT ASSIGN AnnotationElementValue -> AnnotationInitializer

        "=" -> ASSIGN

        AnnotationElementValueExpression -> AnnotationElementValue
        Annotation -> AnnotationElementValue
        AnnotationElementValueArrayInitializer -> AnnotationElementValue

        ConditionalExpression -> AnnotationElementValueExpression

        LogicalOrExpression (QUESTION AssignmentExpression COLON ConditionalExpression)? -> ConditionalExpression

        LogicalAndExpression (LOGICAL-OR LogicalAndExpression)* -> LogicalOrExpression

        InclusiveOrExpression (LOGICAL-AND InclusiveOrExpression)* -> LogicalAndExpression

        ExclusiveOrExpression (OR ExclusiveOrExpression)* -> InclusiveOrExpression

        AndExpression (XOR AndExpression)* -> ExclusiveOrExpression

        EqualityExpression (AND EqualityExpression)* -> AndExpression

        InstanceOfExpression ((EQUAL | NOT-EQUAL) InstanceOfExpression)* -> EqualityExpression

        RelationalExpression (INSTANCEOF Type)? -> InstanceOfExpression

        ShiftExpression ((LESS-OR-EQUAL | GREATER-OR-EQUAL | LESS-THAN | GREATER-THAN) ShiftExpression)* -> RelationalExpression

        AdditiveExpression ((BIT-SHIFT-RIGHT | SHIFT-RIGHT | SHIFT-LEFT) AdditiveExpression)* -> ShiftExpression

        MultiplicativeExpression ((PLUS | MINUS) MultiplicativeExpression)* -> AdditiveExpression

        UnaryExpression ((STAR | DIV | MOD) UnaryExpression)* -> MultiplicativeExpression

        PLUS UnaryExpression -> UnaryExpression
        MINUS UnaryExpression -> UnaryExpression
        INC PostfixedExpression -> UnaryExpression
        DEC PostfixedExpression -> UnaryExpression
        UnaryExpressionNotPlusMinus -> UnaryExpression

        "+" -> PLUS

        "-" -> MINUS

        "++" -> INC

        PrimaryExpression ((outerDot::DOT ((GenericTypeArgumentListSimplified? IDENT Arguments?) | THIS | (Super::SUPER Arguments) | (SUPER innerDot::DOT IDENT Arguments?) | InnerNewExpression)) | (LBRACK Expression RBRACK))* (INC | DEC)? -> PostfixedExpression

        ParenthesizedExpression -> PrimaryExpression
        Literal -> PrimaryExpression
        NewExpression -> PrimaryExpression
        QualifiedIdentExpression -> PrimaryExpression
        GenericTypeArgumentListSimplified ((SUPER (Arguments | (DOT IDENT Arguments))) | (IDENT Arguments) | (THIS Arguments)) -> PrimaryExpression
        THIS Arguments? -> PrimaryExpression
        SUPER Arguments -> PrimaryExpression
        SUPER DOT IDENT (Arguments | ) -> PrimaryExpression
        PrimitiveType ArrayDeclarator* DOT CLASS -> PrimaryExpression
        VOID DOT CLASS -> PrimaryExpression

        LPAREN Expression RPAREN -> ParenthesizedExpression

        AssignmentExpression -> Expression

        ConditionalExpression ((ASSIGN | PLUS-ASSIGN | MINUS-ASSIGN | STAR-ASSIGN | DIV-ASSIGN | AND-ASSIGN | OR-ASSIGN | XOR-ASSIGN | MOD-ASSIGN | SHIFT-LEFT-ASSIGN | SHIFT-RIGHT-ASSIGN | BIT-SHIFT-RIGHT-ASSIGN) AssignmentExpression)? -> AssignmentExpression

        "+=" -> PLUS-ASSIGN

        "-=" -> MINUS-ASSIGN

        "*=" -> STAR-ASSIGN

        "/=" -> DIV-ASSIGN

        "&=" -> AND-ASSIGN

        "|=" -> OR-ASSIGN

        "^=" -> XOR-ASSIGN

        "%=" -> MOD-ASSIGN

        "<<=" -> SHIFT-LEFT-ASSIGN

        ">>=" -> SHIFT-RIGHT-ASSIGN

        ">>>=" -> BIT-SHIFT-RIGHT-ASSIGN

        ")" -> RPAREN

        HEX-LITERAL -> Literal
        OCTAL-LITERAL -> Literal
        DECIMAL-LITERAL -> Literal
        FLOATING-POINT-LITERAL -> Literal
        CHARACTER-LITERAL -> Literal
        STRING-LITERAL -> Literal
        TRUE -> Literal
        FALSE -> Literal
        NULL -> Literal

        "0" ("x" | "X") HEX-DIGIT+ INTEGER-TYPE-SUFFIX? -> HEX-LITERAL

        "0" -> HEX-DIGIT
        "1" -> HEX-DIGIT
        "2" -> HEX-DIGIT
        "3" -> HEX-DIGIT
        "4" -> HEX-DIGIT
        "5" -> HEX-DIGIT
        "6" -> HEX-DIGIT
        "7" -> HEX-DIGIT
        "8" -> HEX-DIGIT
        "9" -> HEX-DIGIT
        "a" -> HEX-DIGIT
        "b" -> HEX-DIGIT
        "c" -> HEX-DIGIT
        "d" -> HEX-DIGIT
        "e" -> HEX-DIGIT
        "f" -> HEX-DIGIT
        "A" -> HEX-DIGIT
        "B" -> HEX-DIGIT
        "C" -> HEX-DIGIT
        "D" -> HEX-DIGIT
        "E" -> HEX-DIGIT
        "F" -> HEX-DIGIT

        "l" -> INTEGER-TYPE-SUFFIX
        "L" -> INTEGER-TYPE-SUFFIX

        "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ INTEGER-TYPE-SUFFIX? -> OCTAL-LITERAL

        ("0" | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)) INTEGER-TYPE-SUFFIX? -> DECIMAL-LITERAL

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ((DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? FLOAT-TYPE-SUFFIX?) | (EXPONENT FLOAT-TYPE-SUFFIX?) | FLOAT-TYPE-SUFFIX) -> FLOATING-POINT-LITERAL
        DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? FLOAT-TYPE-SUFFIX? -> FLOATING-POINT-LITERAL

        ("e" | "E") ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> EXPONENT

        "f" -> FLOAT-TYPE-SUFFIX
        "F" -> FLOAT-TYPE-SUFFIX
        "d" -> FLOAT-TYPE-SUFFIX
        "D" -> FLOAT-TYPE-SUFFIX

        "\'" (ESCAPE-SEQUENCE | STR) "\'" -> CHARACTER-LITERAL

        "\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") -> ESCAPE-SEQUENCE
        UNICODE-ESCAPE -> ESCAPE-SEQUENCE
        OCTAL-ESCAPE -> ESCAPE-SEQUENCE

        "\\" "u" HEX-DIGIT HEX-DIGIT HEX-DIGIT HEX-DIGIT -> UNICODE-ESCAPE

        ("0" | "1" | "2" | "3") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") -> OCTAL-ESCAPE
        "\\" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") -> OCTAL-ESCAPE
        "\\" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") -> OCTAL-ESCAPE

        """ (ESCAPE-SEQUENCE | STR)* """ -> STRING-LITERAL

        "true" -> TRUE

        "false" -> FALSE

        "null" -> NULL

        NEW ((PrimitiveType NewArrayConstruction) | (GenericTypeArgumentListSimplified? QualifiedTypeIdentSimplified (NewArrayConstruction | (Arguments ClassBody?)))) -> NewExpression

        "new" -> NEW

        BOOLEAN -> PrimitiveType
        CHAR -> PrimitiveType
        BYTE -> PrimitiveType
        SHORT -> PrimitiveType
        INT -> PrimitiveType
        LONG -> PrimitiveType
        FLOAT -> PrimitiveType
        DOUBLE -> PrimitiveType

        "boolean" -> BOOLEAN

        "char" -> CHAR

        "byte" -> BYTE

        "short" -> SHORT

        "int" -> INT

        "long" -> LONG

        "float" -> FLOAT

        "double" -> DOUBLE

        ArrayDeclaratorList ArrayInitializer -> NewArrayConstruction
        LBRACK Expression RBRACK (LBRACK Expression RBRACK)* ArrayDeclaratorList? -> NewArrayConstruction

        ArrayDeclarator+ -> ArrayDeclaratorList

        LBRACK RBRACK -> ArrayDeclarator

        "[" -> LBRACK

        "]" -> RBRACK

        LCURLY (VariableInitializer (COMMA VariableInitializer)* COMMA?)? RCURLY -> ArrayInitializer

        "{" -> LCURLY

        ArrayInitializer -> VariableInitializer
        Expression -> VariableInitializer

        "," -> COMMA

        "}" -> RCURLY

        LESS-THAN GenericTypeArgumentSimplified (COMMA GenericTypeArgumentSimplified)* GenericTypeListClosing -> GenericTypeArgumentListSimplified

        "<" -> LESS-THAN

        Type -> GenericTypeArgumentSimplified
        QUESTION -> GenericTypeArgumentSimplified

        SimpleType -> Type
        ObjectType -> Type

        PrimitiveType ArrayDeclaratorList? -> SimpleType

        QualifiedTypeIdent ArrayDeclaratorList? -> ObjectType

        TypeIdent (DOT TypeIdent)* -> QualifiedTypeIdent

        IDENT GenericTypeArgumentList? -> TypeIdent

        LESS-THAN GenericTypeArgument (COMMA GenericTypeArgument)* GenericTypeListClosing -> GenericTypeArgumentList

        Type -> GenericTypeArgument
        QUESTION GenericWildcardBoundType? -> GenericTypeArgument

        "?" -> QUESTION

        (EXTENDS | SUPER) Type -> GenericWildcardBoundType

        "extends" -> EXTENDS

        "super" -> SUPER

        GREATER-THAN -> GenericTypeListClosing
        SHIFT-RIGHT -> GenericTypeListClosing
        BIT-SHIFT-RIGHT -> GenericTypeListClosing
         -> GenericTypeListClosing

        ">" -> GREATER-THAN

        ">>" -> SHIFT-RIGHT

        ">>>" -> BIT-SHIFT-RIGHT

        TypeIdentSimplified (DOT TypeIdentSimplified)* -> QualifiedTypeIdentSimplified

        IDENT GenericTypeArgumentListSimplified? -> TypeIdentSimplified

        LPAREN ExpressionList? RPAREN -> Arguments

        Expression (COMMA Expression)* -> ExpressionList

        LCURLY ClassScopeDeclarations* RCURLY -> ClassBody

        Block -> ClassScopeDeclarations
        STATIC Block -> ClassScopeDeclarations
        ModifierList ((GenericTypeParameterList? ((Type IDENT FormalParameterList ArrayDeclaratorList? ThrowsClause? (Block | SEMI)) | (VOID IDENT FormalParameterList ThrowsClause? (Block | SEMI)) | (ident::IDENT FormalParameterList ThrowsClause? Block))) | (Type ClassFieldDeclaratorList SEMI)) -> ClassScopeDeclarations
        TypeDeclaration -> ClassScopeDeclarations
        SEMI -> ClassScopeDeclarations

        LCURLY BlockStatement* RCURLY -> Block

        LocalVariableDeclaration SEMI -> BlockStatement
        TypeDeclaration -> BlockStatement
        Statement -> BlockStatement

        LocalModifierList Type ClassFieldDeclaratorList -> LocalVariableDeclaration

        LocalModifier* -> LocalModifierList

        FINAL -> LocalModifier
        Annotation -> LocalModifier

        "final" -> FINAL

        ClassFieldDeclarator (COMMA ClassFieldDeclarator)* -> ClassFieldDeclaratorList

        VariableDeclaratorId (ASSIGN VariableInitializer)? -> ClassFieldDeclarator

        IDENT ArrayDeclaratorList? -> VariableDeclaratorId

        ";" -> SEMI

        ModifierList (ClassTypeDeclaration | InterfaceTypeDeclaration | EnumTypeDeclaration | AnnotationTypeDeclaration) -> TypeDeclaration

        Modifier* -> ModifierList

        PUBLIC -> Modifier
        PROTECTED -> Modifier
        PRIVATE -> Modifier
        STATIC -> Modifier
        ABSTRACT -> Modifier
        NATIVE -> Modifier
        SYNCHRONIZED -> Modifier
        TRANSIENT -> Modifier
        VOLATILE -> Modifier
        STRICTFP -> Modifier
        LocalModifier -> Modifier

        "public" -> PUBLIC

        "protected" -> PROTECTED

        "private" -> PRIVATE

        "static" -> STATIC

        "abstract" -> ABSTRACT

        "native" -> NATIVE

        "synchronized" -> SYNCHRONIZED

        "transient" -> TRANSIENT

        "volatile" -> VOLATILE

        "strictfp" -> STRICTFP

        CLASS IDENT GenericTypeParameterList? ClassExtendsClause? ImplementsClause? ClassBody -> ClassTypeDeclaration

        "class" -> CLASS

        LESS-THAN GenericTypeParameter (COMMA GenericTypeParameter)* GenericTypeListClosing -> GenericTypeParameterList

        IDENT Bound? -> GenericTypeParameter

        EXTENDS Type (AND Type)* -> Bound

        "&" -> AND

        EXTENDS Type -> ClassExtendsClause

        IMPLEMENTS TypeList -> ImplementsClause

        "implements" -> IMPLEMENTS

        Type (COMMA Type)* -> TypeList

        INTERFACE IDENT GenericTypeParameterList? InterfaceExtendsClause? InterfaceBody -> InterfaceTypeDeclaration

        "interface" -> INTERFACE

        EXTENDS TypeList -> InterfaceExtendsClause

        LCURLY InterfaceScopeDeclarations* RCURLY -> InterfaceBody

        ModifierList ((GenericTypeParameterList? ((Type IDENT FormalParameterList ArrayDeclaratorList? ThrowsClause? SEMI) | (VOID IDENT FormalParameterList ThrowsClause? SEMI))) | (Type InterfaceFieldDeclaratorList SEMI)) -> InterfaceScopeDeclarations
        TypeDeclaration -> InterfaceScopeDeclarations
        SEMI -> InterfaceScopeDeclarations

        LPAREN ((FormalParameterStandardDecl (COMMA FormalParameterStandardDecl)* (COMMA FormalParameterVarArgDecl)?) | FormalParameterVarArgDecl | ) RPAREN -> FormalParameterList

        LocalModifierList Type VariableDeclaratorId -> FormalParameterStandardDecl

        LocalModifierList Type ELLIPSIS VariableDeclaratorId -> FormalParameterVarArgDecl

        "..." -> ELLIPSIS

        THROWS QualifiedIdentList -> ThrowsClause

        "throws" -> THROWS

        QualifiedIdentifier (COMMA QualifiedIdentifier)* -> QualifiedIdentList

        "void" -> VOID

        InterfaceFieldDeclarator (COMMA InterfaceFieldDeclarator)* -> InterfaceFieldDeclaratorList

        VariableDeclaratorId ASSIGN VariableInitializer -> InterfaceFieldDeclarator

        ENUM IDENT ImplementsClause? EnumBody -> EnumTypeDeclaration

        "enum" -> ENUM

        LCURLY EnumScopeDeclarations RCURLY -> EnumBody

        EnumConstants COMMA? EnumClassScopeDeclarations? -> EnumScopeDeclarations

        EnumConstant (COMMA EnumConstant)* -> EnumConstants

        AnnotationList IDENT Arguments? ClassBody? -> EnumConstant

        SEMI ClassScopeDeclarations* -> EnumClassScopeDeclarations

        AT INTERFACE IDENT AnnotationBody -> AnnotationTypeDeclaration

        LCURLY AnnotationScopeDeclarations* RCURLY -> AnnotationBody

        ModifierList Type ((IDENT LPAREN RPAREN AnnotationDefaultValue? SEMI) | (ClassFieldDeclaratorList SEMI)) -> AnnotationScopeDeclarations
        TypeDeclaration -> AnnotationScopeDeclarations

        DEFAULT AnnotationElementValue -> AnnotationDefaultValue

        "default" -> DEFAULT

        Block -> Statement
        ASSERT expr1::Expression ((COLON expr2::Expression SEMI) | SEMI) -> Statement
        IF ParenthesizedExpression ifStat::Statement ((ELSE elseStat::Statement) | ) -> Statement
        FOR LPAREN ((ForInit SEMI ForCondition SEMI ForUpdater RPAREN Statement) | (LocalModifierList Type IDENT COLON Expression RPAREN Statement)) -> Statement
        WHILE ParenthesizedExpression Statement -> Statement
        DO Statement WHILE ParenthesizedExpression SEMI -> Statement
        TRY Block ((Catches FinallyClause?) | FinallyClause) -> Statement
        SWITCH ParenthesizedExpression LCURLY SwitchBlockLabels RCURLY -> Statement
        SYNCHRONIZED ParenthesizedExpression Block -> Statement
        RETURN Expression? SEMI -> Statement
        THROW Expression SEMI -> Statement
        BREAK IDENT? SEMI -> Statement
        CONTINUE IDENT? SEMI -> Statement
        IDENT COLON Statement -> Statement
        Expression SEMI -> Statement
        SEMI -> Statement

        "assert" -> ASSERT

        ":" -> COLON

        "if" -> IF

        "else" -> ELSE

        "for" -> FOR

        LocalVariableDeclaration -> ForInit
        ExpressionList -> ForInit
         -> ForInit

        Expression? -> ForCondition

        ExpressionList? -> ForUpdater

        "while" -> WHILE

        "do" -> DO

        "try" -> TRY

        CatchClause+ -> Catches

        CATCH LPAREN FormalParameterStandardDecl RPAREN Block -> CatchClause

        "catch" -> CATCH

        FINALLY Block -> FinallyClause

        "finally" -> FINALLY

        "switch" -> SWITCH

        SwitchCaseLabels SwitchDefaultLabel? SwitchCaseLabels -> SwitchBlockLabels

        SwitchCaseLabel* -> SwitchCaseLabels

        CASE Expression COLON BlockStatement* -> SwitchCaseLabel

        "case" -> CASE

        DEFAULT COLON BlockStatement* -> SwitchDefaultLabel

        "return" -> RETURN

        "throw" -> THROW

        "break" -> BREAK

        "continue" -> CONTINUE

        QualifiedIdentifier ((ArrayDeclarator+ DOT CLASS) | Arguments | (outerDot::DOT (CLASS | (GenericTypeArgumentListSimplified ((Super::SUPER Arguments) | (SUPER innerDot::DOT IDENT Arguments) | (IDENT Arguments))) | THIS | (Super::SUPER Arguments) | InnerNewExpression)))? -> QualifiedIdentExpression

        "this" -> THIS

        NEW GenericTypeArgumentListSimplified? IDENT Arguments ClassBody? -> InnerNewExpression

        "--" -> DEC

        NOT UnaryExpression -> UnaryExpressionNotPlusMinus
        LOGICAL-NOT UnaryExpression -> UnaryExpressionNotPlusMinus
        LPAREN Type RPAREN UnaryExpression -> UnaryExpressionNotPlusMinus
        PostfixedExpression -> UnaryExpressionNotPlusMinus

        "~" -> NOT

        "!" -> LOGICAL-NOT

        "*" -> STAR

        "/" -> DIV

        "%" -> MOD

        "<<" -> SHIFT-LEFT

        "<=" -> LESS-OR-EQUAL

        ">=" -> GREATER-OR-EQUAL

        "instanceof" -> INSTANCEOF

        "==" -> EQUAL

        "!=" -> NOT-EQUAL

        "^" -> XOR

        "|" -> OR

        "&&" -> LOGICAL-AND

        "||" -> LOGICAL-OR

        LCURLY (AnnotationElementValue (COMMA AnnotationElementValue)*)? COMMA? RCURLY -> AnnotationElementValueArrayInitializer

        PACKAGE QualifiedIdentifier SEMI -> PackageDeclaration

        "package" -> PACKAGE

        IMPORT STATIC? QualifiedIdentifier DOTSTAR? SEMI -> ImportDeclaration

        "import" -> IMPORT

        ".*" -> DOTSTAR

        TypeDeclaration -> TypeDecls
        SEMI -> TypeDecls
