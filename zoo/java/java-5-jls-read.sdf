module Main

exports
  sorts
        ClassBodyDeclarations NormalClassDeclaration PostDecrementExpression ReferenceTypeList PrimitiveType InterfaceTypeList Statement AndExpression Annotations ConstructorBody TypeParameter ArgumentList MethodName ClassMemberDeclaration Assignment Interfaces CatchClause AbstractMethodModifiers ClassInstanceCreationExpression TypeName InterfaceType BlockStatement IfThenStatement Annotation SwitchBlockStatementGroups EnumConstant ClassModifier EnumBodyDeclarations SingleTypeImportDeclaration AnnotationTypeDeclaration ConstantDeclaration PreIncrementExpression ExplicitConstructorInvocation ActualTypeArgumentList VariableInitializers DimExpr Throws BlockStatements InterfaceModifiers PrimaryNoNewArray AssignmentOperator AnnotationTypeElementDeclarations StatementWithoutTrailingSubstatement AdditionalBound FieldDeclaration TypeBound AdditionalBoundList VariableDeclarator PostfixExpression SwitchLabel ConstantModifier FormalParameter PackageName VariableModifiers ConditionalAndExpression MethodModifiers Type EqualityExpression InterfaceMemberDeclaration MultiplicativeExpression ActualTypeArgument ExceptionType BreakStatement ConstructorModifier ElementValuePairs SynchronizedStatement Literal ElementValue Super ArrayCreationExpression ArrayInitializer InterfaceModifier UnaryExpressionNotPlusMinus NonWildTypeArguments SwitchBlock EmptyStatement EnumConstants LastFormalParameter AbstractMethodDeclaration IfThenElseStatement EnhancedForStatement ReturnStatement Block ForUpdate ForInit EnumDeclaration VariableDeclarators ThrowStatement ExclusiveOrExpression Primary PackageDeclaration RelationalExpression StatementNoShortIf WhileStatementNoShortIf ExtendsInterfaces WildcardBounds AbstractMethodModifier MethodInvocation ConstantExpression TypeDeclSpecifier ExceptionTypeList VariableInitializer StaticInitializer Finally MarkerAnnotation ConstructorDeclaration ElementValuePair TypeImportOnDemandDeclaration ArrayAccess InterfaceMemberDeclarations ForStatement PostIncrementExpression PackageOrTypeName AmbiguousName ContinueStatement ImportDeclaration CompilationUnit ElementValues SwitchStatement Dims ClassBody AssertStatement ClassBodyDeclaration SwitchBlockStatementGroup MethodDeclaration PreDecrementExpression MethodModifier DoStatement TypeArguments ConditionalExpression ClassOrInterfaceType InstanceInitializer TryStatement SwitchLabels Wildcard FormalParameterList Expression StatementExpressionList AdditiveExpression FloatingPointType ExpressionStatement LocalVariableDeclaration ConstructorDeclarator InclusiveOrExpression ClassType WhileStatement FormalParameters VariableModifier ClassDeclaration FieldAccess AssignmentExpression BasicForStatement ConditionalOrExpression NormalAnnotation ImportDeclarations TypeDeclaration LabeledStatement ExpressionName ArrayType StatementExpression Arguments MethodDeclarator VariableDeclaratorId IntegralType UnaryExpression NumericType AnnotationTypeBody LeftHandSide IfThenElseStatementNoShortIf LocalVariableDeclarationStatement CastExpression ShiftExpression FieldModifiers MethodBody TypeVariable DefaultValue Catches ResultType ConstructorModifiers StaticImportOnDemandDeclaration EnumBody ReferenceType ClassModifiers ForStatementNoShortIf MethodHeader LabeledStatementNoShortIf InterfaceBody ConstantModifiers SingleElementAnnotation EnumConstantName TypeDeclarations FieldModifier AnnotationTypeElementDeclaration DimExprs SingleStaticImportDeclaration InterfaceDeclaration NormalInterfaceDeclaration ElementValueArrayInitializer TypeParameters TypeParameterList ClassName 
  context-free syntax
        ClassBodyDeclaration -> ClassBodyDeclarations

        ClassBodyDeclarations ClassBodyDeclaration -> ClassBodyDeclarations

        ClassModifiers? "class" Identifier TypeParameters? Super? Interfaces? ClassBody -> NormalClassDeclaration

        PostfixExpression "--" -> PostDecrementExpression

        ReferenceType -> ReferenceTypeList

        ReferenceTypeList "," ReferenceType -> ReferenceTypeList

        NumericType -> PrimitiveType

        "boolean" -> PrimitiveType

        InterfaceType -> InterfaceTypeList

        InterfaceTypeList "," InterfaceType -> InterfaceTypeList

        StatementWithoutTrailingSubstatement -> Statement

        LabeledStatement -> Statement

        IfThenStatement -> Statement

        IfThenElseStatement -> Statement

        WhileStatement -> Statement

        ForStatement -> Statement

        EqualityExpression -> AndExpression

        AndExpression "&" EqualityExpression -> AndExpression

        Annotation -> Annotations

        Annotations Annotation -> Annotations

        "{" ExplicitConstructorInvocation? BlockStatements? "}" -> ConstructorBody

        TypeVariable TypeBound? -> TypeParameter

        Expression -> ArgumentList

        ArgumentList "," Expression -> ArgumentList

        Identifier -> MethodName

        AmbiguousName "." Identifier -> MethodName

        FieldDeclaration -> ClassMemberDeclaration

        MethodDeclaration -> ClassMemberDeclaration

        ClassDeclaration -> ClassMemberDeclaration

        InterfaceDeclaration -> ClassMemberDeclaration

        ";" -> ClassMemberDeclaration

        LeftHandSide AssignmentOperator AssignmentExpression -> Assignment

        "implements" InterfaceTypeList -> Interfaces

        "catch" "(" FormalParameter ")" Block -> CatchClause

        AbstractMethodModifier -> AbstractMethodModifiers

        AbstractMethodModifiers AbstractMethodModifier -> AbstractMethodModifiers

        "new" TypeArguments? ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? -> ClassInstanceCreationExpression

        Primary "." "new" TypeArguments? Identifier TypeArguments? "(" ArgumentList? ")" ClassBody? -> ClassInstanceCreationExpression

        Identifier -> TypeName

        PackageOrTypeName "." Identifier -> TypeName

        TypeDeclSpecifier TypeArguments? -> InterfaceType

        LocalVariableDeclarationStatement -> BlockStatement

        ClassDeclaration -> BlockStatement

        Statement -> BlockStatement

        "if" "(" Expression ")" Statement -> IfThenStatement

        NormalAnnotation -> Annotation

        MarkerAnnotation -> Annotation

        SingleElementAnnotation -> Annotation

        SwitchBlockStatementGroup -> SwitchBlockStatementGroups

        SwitchBlockStatementGroups SwitchBlockStatementGroup -> SwitchBlockStatementGroups

        Annotations Identifier Arguments? ClassBody? -> EnumConstant

        Annotation -> ClassModifier

        "public" -> ClassModifier

        "protected" -> ClassModifier

        "private" -> ClassModifier

        "abstract" -> ClassModifier

        "static" -> ClassModifier

        "final" -> ClassModifier

        "strictfp" -> ClassModifier

        ";" ClassBodyDeclarations? -> EnumBodyDeclarations

        "import" TypeName ";" -> SingleTypeImportDeclaration

        InterfaceModifiers? "@" "interface" Identifier AnnotationTypeBody -> AnnotationTypeDeclaration

        ConstantModifiers? Type VariableDeclarators ";" -> ConstantDeclaration

        "++" UnaryExpression -> PreIncrementExpression

        NonWildTypeArguments? "this" "(" ArgumentList? ")" ";" -> ExplicitConstructorInvocation

        NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" -> ExplicitConstructorInvocation

        Primary "." NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" -> ExplicitConstructorInvocation

        ActualTypeArgument -> ActualTypeArgumentList

        ActualTypeArgumentList "," ActualTypeArgument -> ActualTypeArgumentList

        VariableInitializer -> VariableInitializers

        VariableInitializers "," VariableInitializer -> VariableInitializers

        "[" Expression "]" -> DimExpr

        "throws" ExceptionTypeList -> Throws

        BlockStatement -> BlockStatements

        BlockStatements BlockStatement -> BlockStatements

        InterfaceModifier -> InterfaceModifiers

        InterfaceModifiers InterfaceModifier -> InterfaceModifiers

        Literal -> PrimaryNoNewArray

        Type "." "class" -> PrimaryNoNewArray

        "void" "." "class" -> PrimaryNoNewArray

        "this" -> PrimaryNoNewArray

        ClassName "." "this" -> PrimaryNoNewArray

        "(" Expression ")" -> PrimaryNoNewArray

        ClassInstanceCreationExpression -> PrimaryNoNewArray

        FieldAccess -> PrimaryNoNewArray

        MethodInvocation -> PrimaryNoNewArray

        ArrayAccess -> PrimaryNoNewArray

        "=" -> AssignmentOperator

        "*=" -> AssignmentOperator

        "/=" -> AssignmentOperator

        "%=" -> AssignmentOperator

        "+=" -> AssignmentOperator

        "-=" -> AssignmentOperator

        "<<=" -> AssignmentOperator

        ">>=" -> AssignmentOperator

        ">>>=" -> AssignmentOperator

        "&=" -> AssignmentOperator

        "^=" -> AssignmentOperator

        "|=" -> AssignmentOperator

        AnnotationTypeElementDeclaration -> AnnotationTypeElementDeclarations

        AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration -> AnnotationTypeElementDeclarations

        Block -> StatementWithoutTrailingSubstatement

        EmptyStatement -> StatementWithoutTrailingSubstatement

        ExpressionStatement -> StatementWithoutTrailingSubstatement

        AssertStatement -> StatementWithoutTrailingSubstatement

        SwitchStatement -> StatementWithoutTrailingSubstatement

        DoStatement -> StatementWithoutTrailingSubstatement

        BreakStatement -> StatementWithoutTrailingSubstatement

        ContinueStatement -> StatementWithoutTrailingSubstatement

        ReturnStatement -> StatementWithoutTrailingSubstatement

        SynchronizedStatement -> StatementWithoutTrailingSubstatement

        ThrowStatement -> StatementWithoutTrailingSubstatement

        TryStatement -> StatementWithoutTrailingSubstatement

        "&" InterfaceType -> AdditionalBound

        FieldModifiers? Type VariableDeclarators ";" -> FieldDeclaration

        "extends" ClassOrInterfaceType AdditionalBoundList? -> TypeBound

        AdditionalBound AdditionalBoundList -> AdditionalBoundList

        AdditionalBound -> AdditionalBoundList

        VariableDeclaratorId -> VariableDeclarator

        VariableDeclaratorId "=" VariableInitializer -> VariableDeclarator

        Primary -> PostfixExpression

        ExpressionName -> PostfixExpression

        PostIncrementExpression -> PostfixExpression

        PostDecrementExpression -> PostfixExpression

        "case" ConstantExpression ":" -> SwitchLabel

        "case" EnumConstantName ":" -> SwitchLabel

        "default" ":" -> SwitchLabel

        Annotation -> ConstantModifier

        "public" -> ConstantModifier

        "static" -> ConstantModifier

        "final" -> ConstantModifier

        VariableModifiers? Type VariableDeclaratorId -> FormalParameter

        Identifier -> PackageName

        PackageName "." Identifier -> PackageName

        VariableModifier -> VariableModifiers

        VariableModifiers VariableModifier -> VariableModifiers

        InclusiveOrExpression -> ConditionalAndExpression

        ConditionalAndExpression "&&" InclusiveOrExpression -> ConditionalAndExpression

        MethodModifier -> MethodModifiers

        MethodModifiers MethodModifier -> MethodModifiers

        PrimitiveType -> Type

        ReferenceType -> Type

        RelationalExpression -> EqualityExpression

        EqualityExpression "==" RelationalExpression -> EqualityExpression

        EqualityExpression "!=" RelationalExpression -> EqualityExpression

        ConstantDeclaration -> InterfaceMemberDeclaration

        AbstractMethodDeclaration -> InterfaceMemberDeclaration

        ClassDeclaration -> InterfaceMemberDeclaration

        InterfaceDeclaration -> InterfaceMemberDeclaration

        ";" -> InterfaceMemberDeclaration

        UnaryExpression -> MultiplicativeExpression

        MultiplicativeExpression "*" UnaryExpression -> MultiplicativeExpression

        MultiplicativeExpression "/" UnaryExpression -> MultiplicativeExpression

        MultiplicativeExpression "%" UnaryExpression -> MultiplicativeExpression

        ReferenceType -> ActualTypeArgument

        Wildcard -> ActualTypeArgument

        ClassType -> ExceptionType

        TypeVariable -> ExceptionType

        "break" Identifier? ";" -> BreakStatement

        Annotation -> ConstructorModifier

        "public" -> ConstructorModifier

        "protected" -> ConstructorModifier

        "private" -> ConstructorModifier

        ElementValuePair -> ElementValuePairs

        ElementValuePairs "," ElementValuePair -> ElementValuePairs

        "synchronized" "(" Expression ")" Block -> SynchronizedStatement

        IntegerLiteral -> Literal

        FloatingPointLiteral -> Literal

        BooleanLiteral -> Literal

        CharacterLiteral -> Literal

        StringLiteral -> Literal

        NullLiteral -> Literal

        ConditionalExpression -> ElementValue

        Annotation -> ElementValue

        ElementValueArrayInitializer -> ElementValue

        "extends" ClassType -> Super

        "new" PrimitiveType DimExprs Dims? -> ArrayCreationExpression

        "new" ClassOrInterfaceType DimExprs Dims? -> ArrayCreationExpression

        "new" PrimitiveType Dims ArrayInitializer -> ArrayCreationExpression

        "new" ClassOrInterfaceType Dims ArrayInitializer -> ArrayCreationExpression

        "{" VariableInitializers? ","? "}" -> ArrayInitializer

        Annotation -> InterfaceModifier

        "public" -> InterfaceModifier

        "protected" -> InterfaceModifier

        "private" -> InterfaceModifier

        "abstract" -> InterfaceModifier

        "static" -> InterfaceModifier

        "strictfp" -> InterfaceModifier

        PostfixExpression -> UnaryExpressionNotPlusMinus

        "~" UnaryExpression -> UnaryExpressionNotPlusMinus

        "!" UnaryExpression -> UnaryExpressionNotPlusMinus

        CastExpression -> UnaryExpressionNotPlusMinus

        "<" ReferenceTypeList ">" -> NonWildTypeArguments

        "{" SwitchBlockStatementGroups? SwitchLabels? "}" -> SwitchBlock

        ";" -> EmptyStatement

        EnumConstant -> EnumConstants

        EnumConstants "," EnumConstant -> EnumConstants

        VariableModifiers? Type "..."? VariableDeclaratorId -> LastFormalParameter

        FormalParameter -> LastFormalParameter

        AbstractMethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ";" -> AbstractMethodDeclaration

        "if" "(" Expression ")" StatementNoShortIf "else" Statement -> IfThenElseStatement

        "for" "(" VariableModifiers? Type Identifier ":" Expression ")" Statement -> EnhancedForStatement

        "return" Expression? ";" -> ReturnStatement

        "{" BlockStatements? "}" -> Block

        StatementExpressionList -> ForUpdate

        StatementExpressionList -> ForInit

        LocalVariableDeclaration -> ForInit

        ClassModifiers? "enum" Identifier Interfaces? EnumBody -> EnumDeclaration

        VariableDeclarator -> VariableDeclarators

        VariableDeclarators "," VariableDeclarator -> VariableDeclarators

        "throw" Expression ";" -> ThrowStatement

        AndExpression -> ExclusiveOrExpression

        ExclusiveOrExpression "^" AndExpression -> ExclusiveOrExpression

        PrimaryNoNewArray -> Primary

        ArrayCreationExpression -> Primary

        Annotations? "package" PackageName ";" -> PackageDeclaration

        ShiftExpression -> RelationalExpression

        RelationalExpression "<" ShiftExpression -> RelationalExpression

        RelationalExpression ">" ShiftExpression -> RelationalExpression

        RelationalExpression "<=" ShiftExpression -> RelationalExpression

        RelationalExpression ">=" ShiftExpression -> RelationalExpression

        RelationalExpression "instanceof" ReferenceType -> RelationalExpression

        StatementWithoutTrailingSubstatement -> StatementNoShortIf

        LabeledStatementNoShortIf -> StatementNoShortIf

        IfThenElseStatementNoShortIf -> StatementNoShortIf

        WhileStatementNoShortIf -> StatementNoShortIf

        ForStatementNoShortIf -> StatementNoShortIf

        "while" "(" Expression ")" StatementNoShortIf -> WhileStatementNoShortIf

        "extends" InterfaceType -> ExtendsInterfaces

        ExtendsInterfaces "," InterfaceType -> ExtendsInterfaces

        "extends" ReferenceType -> WildcardBounds

        "super" ReferenceType -> WildcardBounds

        Annotation -> AbstractMethodModifier

        "public" -> AbstractMethodModifier

        "abstract" -> AbstractMethodModifier

        MethodName "(" ArgumentList? ")" -> MethodInvocation

        Primary "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" -> MethodInvocation

        "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" -> MethodInvocation

        ClassName "." "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" -> MethodInvocation

        TypeName "." NonWildTypeArguments Identifier "(" ArgumentList? ")" -> MethodInvocation

        Expression -> ConstantExpression

        TypeName -> TypeDeclSpecifier

        ClassOrInterfaceType "." Identifier -> TypeDeclSpecifier

        ExceptionType -> ExceptionTypeList

        ExceptionTypeList "," ExceptionType -> ExceptionTypeList

        Expression -> VariableInitializer

        ArrayInitializer -> VariableInitializer

        "static" Block -> StaticInitializer

        "finally" Block -> Finally

        "@" TypeName -> MarkerAnnotation

        ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody -> ConstructorDeclaration

        Identifier "=" ElementValue -> ElementValuePair

        "import" PackageOrTypeName "." "*" ";" -> TypeImportOnDemandDeclaration

        ExpressionName "[" Expression "]" -> ArrayAccess

        PrimaryNoNewArray "[" Expression "]" -> ArrayAccess

        InterfaceMemberDeclaration -> InterfaceMemberDeclarations

        InterfaceMemberDeclarations InterfaceMemberDeclaration -> InterfaceMemberDeclarations

        BasicForStatement -> ForStatement

        EnhancedForStatement -> ForStatement

        PostfixExpression "++" -> PostIncrementExpression

        Identifier -> PackageOrTypeName

        PackageOrTypeName "." Identifier -> PackageOrTypeName

        Identifier -> AmbiguousName

        AmbiguousName "." Identifier -> AmbiguousName

        "continue" Identifier? ";" -> ContinueStatement

        SingleTypeImportDeclaration -> ImportDeclaration

        TypeImportOnDemandDeclaration -> ImportDeclaration

        SingleStaticImportDeclaration -> ImportDeclaration

        StaticImportOnDemandDeclaration -> ImportDeclaration

        PackageDeclaration? ImportDeclarations? TypeDeclarations? -> CompilationUnit

        ElementValue -> ElementValues

        ElementValues "," ElementValue -> ElementValues

        "switch" "(" Expression ")" SwitchBlock -> SwitchStatement

        "[" "]" -> Dims

        Dims "[" "]" -> Dims

        "{" ClassBodyDeclarations? "}" -> ClassBody

        "assert" Expression ";" -> AssertStatement

        "assert" Expression ":" Expression ";" -> AssertStatement

        ClassMemberDeclaration -> ClassBodyDeclaration

        InstanceInitializer -> ClassBodyDeclaration

        StaticInitializer -> ClassBodyDeclaration

        ConstructorDeclaration -> ClassBodyDeclaration

        SwitchLabels BlockStatements -> SwitchBlockStatementGroup

        MethodHeader MethodBody -> MethodDeclaration

        "--" UnaryExpression -> PreDecrementExpression

        Annotation -> MethodModifier

        "public" -> MethodModifier

        "protected" -> MethodModifier

        "private" -> MethodModifier

        "abstract" -> MethodModifier

        "static" -> MethodModifier

        "final" -> MethodModifier

        "synchronized" -> MethodModifier

        "native" -> MethodModifier

        "strictfp" -> MethodModifier

        "do" Statement "while" "(" Expression ")" ";" -> DoStatement

        "<" ActualTypeArgumentList ">" -> TypeArguments

        ConditionalOrExpression -> ConditionalExpression

        ConditionalOrExpression "?" Expression ":" ConditionalExpression -> ConditionalExpression

        ClassType -> ClassOrInterfaceType

        InterfaceType -> ClassOrInterfaceType

        Block -> InstanceInitializer

        "try" Block Catches -> TryStatement

        "try" Block Catches? Finally -> TryStatement

        SwitchLabel -> SwitchLabels

        SwitchLabels SwitchLabel -> SwitchLabels

        "?" WildcardBounds? -> Wildcard

        LastFormalParameter -> FormalParameterList

        FormalParameters "," LastFormalParameter -> FormalParameterList

        AssignmentExpression -> Expression

        StatementExpression -> StatementExpressionList

        StatementExpressionList "," StatementExpression -> StatementExpressionList

        MultiplicativeExpression -> AdditiveExpression

        AdditiveExpression "+" MultiplicativeExpression -> AdditiveExpression

        AdditiveExpression "-" MultiplicativeExpression -> AdditiveExpression

        "float" -> FloatingPointType

        "double" -> FloatingPointType

        StatementExpression ";" -> ExpressionStatement

        VariableModifiers? Type VariableDeclarators -> LocalVariableDeclaration

        TypeParameters? Identifier "(" FormalParameterList? ")" -> ConstructorDeclarator

        ExclusiveOrExpression -> InclusiveOrExpression

        InclusiveOrExpression "|" ExclusiveOrExpression -> InclusiveOrExpression

        TypeDeclSpecifier TypeArguments? -> ClassType

        "while" "(" Expression ")" Statement -> WhileStatement

        FormalParameter -> FormalParameters

        FormalParameters "," FormalParameter -> FormalParameters

        "final" -> VariableModifier

        Annotation -> VariableModifier

        NormalClassDeclaration -> ClassDeclaration

        EnumDeclaration -> ClassDeclaration

        Primary "." Identifier -> FieldAccess

        "super" "." Identifier -> FieldAccess

        ClassName "." "super" "." Identifier -> FieldAccess

        ConditionalExpression -> AssignmentExpression

        Assignment -> AssignmentExpression

        "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement -> BasicForStatement

        ConditionalAndExpression -> ConditionalOrExpression

        ConditionalOrExpression "||" ConditionalAndExpression -> ConditionalOrExpression

        "@" TypeName "(" ElementValuePairs? ")" -> NormalAnnotation

        ImportDeclaration -> ImportDeclarations

        ImportDeclarations ImportDeclaration -> ImportDeclarations

        ClassDeclaration -> TypeDeclaration

        InterfaceDeclaration -> TypeDeclaration

        ";" -> TypeDeclaration

        Identifier ":" Statement -> LabeledStatement

        Identifier -> ExpressionName

        AmbiguousName "." Identifier -> ExpressionName

        Type "[" "]" -> ArrayType

        Assignment -> StatementExpression

        PreIncrementExpression -> StatementExpression

        PreDecrementExpression -> StatementExpression

        PostIncrementExpression -> StatementExpression

        PostDecrementExpression -> StatementExpression

        MethodInvocation -> StatementExpression

        ClassInstanceCreationExpression -> StatementExpression

        "(" ArgumentList? ")" -> Arguments

        Identifier "(" FormalParameterList? ")" -> MethodDeclarator

        MethodDeclarator "[" "]" -> MethodDeclarator

        Identifier -> VariableDeclaratorId

        VariableDeclaratorId "[" "]" -> VariableDeclaratorId

        "byte" -> IntegralType

        "short" -> IntegralType

        "int" -> IntegralType

        "long" -> IntegralType

        "char" -> IntegralType

        PreIncrementExpression -> UnaryExpression

        PreDecrementExpression -> UnaryExpression

        "+" UnaryExpression -> UnaryExpression

        "-" UnaryExpression -> UnaryExpression

        UnaryExpressionNotPlusMinus -> UnaryExpression

        IntegralType -> NumericType

        FloatingPointType -> NumericType

        "{" AnnotationTypeElementDeclarations? "}" -> AnnotationTypeBody

        ExpressionName -> LeftHandSide

        FieldAccess -> LeftHandSide

        ArrayAccess -> LeftHandSide

        "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf -> IfThenElseStatementNoShortIf

        LocalVariableDeclaration ";" -> LocalVariableDeclarationStatement

        "(" PrimitiveType Dims? ")" UnaryExpression -> CastExpression

        "(" ReferenceType ")" UnaryExpressionNotPlusMinus -> CastExpression

        AdditiveExpression -> ShiftExpression

        ShiftExpression "<<" AdditiveExpression -> ShiftExpression

        ShiftExpression ">>" AdditiveExpression -> ShiftExpression

        ShiftExpression ">>>" AdditiveExpression -> ShiftExpression

        FieldModifier -> FieldModifiers

        FieldModifiers FieldModifier -> FieldModifiers

        Block -> MethodBody

        ";" -> MethodBody

        Identifier -> TypeVariable

        "default" ElementValue -> DefaultValue

        CatchClause -> Catches

        Catches CatchClause -> Catches

        Type -> ResultType

        "void" -> ResultType

        ConstructorModifier -> ConstructorModifiers

        ConstructorModifiers ConstructorModifier -> ConstructorModifiers

        "import" "static" TypeName "." "*" ";" -> StaticImportOnDemandDeclaration

        (EnumConstants? ","? EnumBodyDeclarations?)* -> EnumBody

        ClassOrInterfaceType -> ReferenceType

        TypeVariable -> ReferenceType

        ArrayType -> ReferenceType

        ClassModifier -> ClassModifiers

        ClassModifiers ClassModifier -> ClassModifiers

        "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf -> ForStatementNoShortIf

        MethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? -> MethodHeader

        Identifier ":" StatementNoShortIf -> LabeledStatementNoShortIf

        "{" InterfaceMemberDeclarations? "}" -> InterfaceBody

        ConstantModifier -> ConstantModifiers

        ConstantModifier ConstantModifiers -> ConstantModifiers

        "@" TypeName "(" ElementValue ")" -> SingleElementAnnotation

        Identifier -> EnumConstantName

        TypeDeclaration -> TypeDeclarations

        TypeDeclarations TypeDeclaration -> TypeDeclarations

        Annotation -> FieldModifier

        "public" -> FieldModifier

        "protected" -> FieldModifier

        "private" -> FieldModifier

        "static" -> FieldModifier

        "final" -> FieldModifier

        "transient" -> FieldModifier

        "volatile" -> FieldModifier

        AbstractMethodModifiers? Type Identifier "(" ")" Dims? DefaultValue? ";" -> AnnotationTypeElementDeclaration

        ConstantDeclaration -> AnnotationTypeElementDeclaration

        ClassDeclaration -> AnnotationTypeElementDeclaration

        InterfaceDeclaration -> AnnotationTypeElementDeclaration

        EnumDeclaration -> AnnotationTypeElementDeclaration

        AnnotationTypeDeclaration -> AnnotationTypeElementDeclaration

        ";" -> AnnotationTypeElementDeclaration

        DimExpr -> DimExprs

        DimExprs DimExpr -> DimExprs

        "import" "static" TypeName "." Identifier ";" -> SingleStaticImportDeclaration

        NormalInterfaceDeclaration -> InterfaceDeclaration

        AnnotationTypeDeclaration -> InterfaceDeclaration

        InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody -> NormalInterfaceDeclaration

        "{" ElementValues? ","? "}" -> ElementValueArrayInitializer

        "<" TypeParameterList ">" -> TypeParameters

        TypeParameterList "," TypeParameter -> TypeParameterList

        TypeParameter -> TypeParameterList

        Identifier -> ClassName

        AmbiguousName "." Identifier -> ClassName
