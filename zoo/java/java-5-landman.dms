LocalVarDec = Type VarDec',' ;
TypeParams = '<' TypeParam',' '>' ;
Literal = CharLiteral ;
Literal = BoolLiteral ;
Literal = ClassLiteral ;
Literal = FloatLiteral ;
Literal = StringLiteral ;
Literal = NullLiteral ;
Literal = IntLiteral ;
ClassMod = 'abstract' ;
ClassMod = 'static' ;
ClassMod = 'public' ;
ClassMod = 'strictfp' ;
ClassMod = 'final' ;
ClassMod = 'private' ;
ClassMod = 'protected' ;
ClassDecHead = 'class' Id TypeParams? Super? Interfaces? ;
ClassDec = EnumDec ;
ClassDec = ClassDecHead ClassBody ;
SwitchGroup = SwitchLabel+ BlockStm+ ;
ClassBodyDec = ClassMemberDec ;
ClassBodyDec = StaticInit ;
ClassBodyDec = ConstrDec ;
ClassBodyDec = InstanceInit ;
FloatType = 'double' ;
FloatType = 'float' ;
ClassMemberDec = ClassDec ;
ClassMemberDec = MethodDec ;
ClassMemberDec = FieldDec ;
ClassMemberDec = ';' ;
ClassMemberDec = InterfaceDec ;
ConstantMod = 'static' ;
ConstantMod = 'public' ;
ConstantMod = 'final' ;
ConstantDec = Type VarDec',' ';' ;
SwitchBlock = '{' SwitchGroup* SwitchLabel* '}' ;
CondMid = '?' Expr ':' ;
WildcardBound = 'extends' RefType ;
WildcardBound = 'super' RefType ;
EnumDecHead = 'enum' Id Interfaces? ;
PackageOrTypeName = Id ;
PackageOrTypeName = PackageOrTypeName '.' Id ;
InterfaceDecHead = 'interface' Id TypeParams? ExtendsInterfaces? ;
IntType = 'int' ;
IntType = 'byte' ;
IntType = 'long' ;
IntType = 'short' ;
IntType = 'char' ;
VarInit = Expr ;
VarInit = ArrayInit ;
EnumBodyDecs = ';' ClassBodyDec* ;
ClassType = TypeDecSpec TypeArgs? ;
ExtendsInterfaces = 'extends' InterfaceType',' ;
StaticInit = 'static' Block ;
FormalParam = Type '...' VarDecId ;
FormalParam = Type VarDecId ;
EnumConstArgs = '(' Expr',' ')' ;
LocalVarDecStm = LocalVarDec ';' ;
CompilationUnit = PackageDec? ImportDec* TypeDec* ;
EnumConst = Id EnumConstArgs? ClassBody? ;
NumType = FloatType ;
NumType = IntType ;
MethodDecHead = TypeParams? ResultType Id '(' FormalParam',' ')' Dim+ Throws? ;
MethodDecHead = TypeParams? ResultType Id '(' FormalParam',' ')' Throws? ;
Anno = '@' TypeName '(' ')' ;
Anno = '@' TypeName '(' ElemValPair',' ')' ;
Anno = '@' TypeName ;
FieldDec = Type VarDec',' ';' ;
FieldMod = 'public' ;
FieldMod = 'static' ;
FieldMod = 'transient' ;
FieldMod = 'final' ;
FieldMod = 'volatile' ;
FieldMod = 'private' ;
FieldMod = 'protected' ;
ArraySubscript = '[' Expr ']' ;
FloatLiteral = ;
ConstrBody = '{' ConstrInv? BlockStm* '}' ;
PackageName = Id'.' ;
FieldAccess = TypeName '.' 'super' '.' Id ;
FieldAccess = '.' Id ;
FieldAccess = 'super' '.' Id ;
ConstrInv = Expr '.' TypeArgs? 'super' '(' Expr',' ')' ';' ;
ConstrInv = TypeArgs? 'super' '(' Expr',' ')' ';' ;
ConstrInv = TypeArgs? 'this' '(' Expr',' ')' ';' ;
IntLiteral = ;
IntLiteral = ;
IntLiteral = ;
InterfaceMemberDec = ';' ;
InterfaceMemberDec = InterfaceDec ;
InterfaceMemberDec = AbstractMethodDec ;
InterfaceMemberDec = ClassDec ;
InterfaceMemberDec = ConstantDec ;
ElemValPair = Id '=' ;
CatchClause = 'catch' '(' FormalParam ')' Block ;
ArrayInit = '{' VarInit',' ',' '}' ;
ArrayInit = '{' VarInit',' '}' ;
VarDecId = Id ;
VarDecId = Id Dim+ ;
Modifier = 'protected' ;
Modifier = 'private' ;
Modifier = 'volatile' ;
Modifier = 'synchronized' ;
Modifier = 'final' ;
Modifier = 'strictfp' ;
Modifier = 'transient' ;
Modifier = 'abstract' ;
Modifier = 'native' ;
Modifier = 'static' ;
Modifier = 'public' ;
ElemVal = '{' ElemVal',' '}' ;
ElemVal = Expr ;
ElemVal = Anno ;
ElemVal = '{' ElemVal',' ',' '}' ;
ConstrDec = ConstrHead ConstrBody ;
ConstrMod = 'protected' ;
ConstrMod = 'private' ;
ConstrMod = 'public' ;
InterfaceType = TypeDecSpec TypeArgs? ;
PackageDec = Anno* 'package' PackageName ';' ;
ArrayAccess = ArraySubscript ;
ImportDec = 'import' PackageName '.' '*' ';' ;
ImportDec = 'import' TypeName ';' ;
ImportDec = 'import' 'static' TypeName '.' Id ';' ;
ImportDec = 'import' 'static' TypeName '.' '*' ';' ;
ArrayBaseType = TypeName ;
ArrayBaseType = PrimType ;
ArrayBaseType = TypeName '<' '?' '>' ;
TypeName = PackageOrTypeName '.' Id ;
TypeName = Id ;
SwitchLabel = 'case' Expr ':' ;
SwitchLabel = 'default' ':' ;
ConstrHead = TypeParams? Id '(' FormalParam',' ')' Throws? ;
Stm = 'synchronized' '(' Expr ')' Block ;
Stm = Expr ';' ;
Stm = 'for' '(' Expr',' ';' Expr? ';' Expr',' ')' Stm ;
Stm = 'for' '(' LocalVarDec ';' Expr? ';' Expr',' ')' Stm ;
Stm = Block ;
Stm = 'continue' Id? ';' ;
Stm = 'try' Block CatchClause+ ;
Stm = 'throw' Expr ';' ;
Stm = 'switch' '(' Expr ')' SwitchBlock ;
Stm = 'if' '(' Expr ')' Stm ;
Stm = 'break' Id? ';' ;
Stm = ';' ;
Stm = Id ':' Stm ;
Stm = 'assert' Expr ':' Expr ';' ;
Stm = 'for' '(' FormalParam ':' Expr ')' Stm ;
Stm = 'assert' Expr ';' ;
Stm = 'try' Block CatchClause* 'finally' Block ;
Stm = 'return' Expr? ';' ;
Stm = 'do' Stm 'while' '(' Expr ')' ';' ;
Stm = 'while' '(' Expr ')' Stm ;
Stm = 'if' '(' Expr ')' Stm 'else' Stm ;
NullLiteral = 'null' ;
ExceptionType = ClassType ;
ResultType = Type ;
ResultType = 'void' ;
Expr = Expr '--' ;
Expr = Expr '++' ;
Expr = '(' PrimType ')' Expr ;
Expr = '(' RefType ')' Expr ;
Expr = Expr ;
Expr = '++' Expr ;
Expr = Expr ;
Expr = '--' Expr ;
Expr = 'this' ;
Expr = Expr '*' Expr ;
Expr = Expr Expr ;
Expr = Expr '%' Expr ;
Expr = TypeName '.' 'this' ;
Expr = '~' Expr ;
Expr = '!' Expr ;
Expr = Expr Expr ;
Expr = Expr Expr ;
Expr = Expr '>>>' Expr ;
Expr = Expr '>>' Expr ;
Expr = Expr '<<' Expr ;
Expr = Expr '<=' Expr ;
Expr = Expr '<' Expr ;
Expr = Expr '>=' Expr ;
Expr = Expr 'instanceof' RefType ;
Expr = Expr '>' Expr ;
Expr = Expr '==' Expr ;
Expr = Expr '!=' Expr ;
Expr = Expr '&' Expr ;
Expr = Expr '^' Expr ;
Expr = Expr '|' Expr ;
Expr = Expr '&&' Expr ;
Expr = Expr '||' Expr ;
Expr = Expr CondMid Expr ;
Expr = LHS '-=' Expr ;
Expr = LHS '^=' Expr ;
Expr = LHS '+=' Expr ;
Expr = LHS '>>>=' Expr ;
Expr = LHS '&=' Expr ;
Expr = LHS '/=' Expr ;
Expr = LHS '*=' Expr ;
Expr = LHS '%=' Expr ;
Expr = LHS '<<=' Expr ;
Expr = LHS '>>=' Expr ;
Expr = LHS '|=' Expr ;
Expr = LHS '=' Expr ;
Expr = Expr '.' 'new' TypeArgs? Id TypeArgs? '(' Expr',' ')' ClassBody? ;
Expr = Literal ;
Expr = 'new' TypeArgs? ClassOrInterfaceType '(' Expr',' ')' ClassBody? ;
Expr = ExprName ;
Expr = ArrayCreationExpr ;
Expr = '(' Expr ')' ;
Expr = ;
Expr = MethodSpec '(' Expr',' ')' ;
ArrayType = Type '[' ']' ;
ClassBody = '{' ClassBodyDec* '}' ;
TypeDecSpec = TypeName ;
TypeDecSpec = TypeDecSpec TypeArgs '.' Id ;
PrimType = NumType ;
PrimType = 'boolean' ;
EnumDec = EnumDecHead EnumBody ;
ActualTypeArg = Type ;
ActualTypeArg = '?' WildcardBound? ;
MethodName = AmbName '.' Id ;
MethodName = Id ;
InterfaceDec = InterfaceDecHead '{' InterfaceMemberDec* '}' ;
InterfaceDec = AnnoDecHead '{' AnnoElemDec* '}' ;
InterfaceMod = 'public' ;
InterfaceMod = 'static' ;
InterfaceMod = 'abstract' ;
InterfaceMod = 'strictfp' ;
InterfaceMod = 'protected' ;
InterfaceMod = 'private' ;
ClassLiteral = 'void' '.' 'class' ;
ClassLiteral = Type '.' 'class' ;
StringLiteral = ;
AbstractMethodMod = 'abstract' ;
AbstractMethodMod = 'public' ;
AbstractMethodDec = TypeParams? ResultType Id '(' FormalParam',' ')' Throws? ';' ;
AbstractMethodDec = TypeParams? ResultType Id '(' FormalParam',' ')' Dim+ Throws? ';' ;
Id = ;
TypeBound = 'extends' ClassOrInterfaceType'&' ;
AnnoElemDec = EnumDec ;
AnnoElemDec = ';' ;
AnnoElemDec = ClassDec ;
AnnoElemDec = ConstantDec ;
AnnoElemDec = InterfaceDec ;
AnnoElemDec = AbstractMethodMod* Type Id '(' ')' DefaultVal? ';' ;
BoolLiteral = 'false' ;
BoolLiteral = 'true' ;
MethodBody = ';' ;
MethodBody = Block ;
ExprName = Id ;
ExprName = AmbName '.' Id ;
DefaultVal = 'default' ;
MethodDec = MethodDecHead MethodBody ;
AmbName = AmbName '.' Id ;
AmbName = Id ;
MethodMod = 'final' ;
MethodMod = 'strictfp' ;
MethodMod = 'synchronized' ;
MethodMod = 'protected' ;
MethodMod = 'private' ;
MethodMod = 'static' ;
MethodMod = 'public' ;
MethodMod = 'abstract' ;
MethodMod = 'native' ;
ArrayCreationExpr = 'new' ArrayBaseType DimExpr+ ;
ArrayCreationExpr = 'new' ArrayBaseType ArrayInit ;
RefType = ClassOrInterfaceType ;
RefType = ArrayType ;
TypeDec = InterfaceDec ;
TypeDec = ClassDec ;
TypeDec = ';' ;
TypeArgs = '<' ActualTypeArg',' '>' ;
LHS = ExprName ;
LHS = ;
AnnoDecHead = '@' 'interface' Id ;
TypeParam = TypeVarId TypeBound? ;
MethodSpec = MethodName ;
MethodSpec = 'super' '.' TypeArgs? Id ;
MethodSpec = AmbName '.' TypeArgs Id ;
MethodSpec = TypeName '.' 'super' '.' TypeArgs? Id ;
MethodSpec = '.' TypeArgs? Id ;
Type = RefType ;
Type = PrimType ;
Super = 'extends' ClassType ;
CharLiteral = ;
InstanceInit = Block ;
EnumBody = '{' EnumConst',' EnumBodyDecs? '}' ;
EnumBody = '{' EnumConst',' ',' EnumBodyDecs? '}' ;
Throws = 'throws' ExceptionType',' ;
Block = '{' BlockStm* '}' ;
TypeVar = TypeVarId ;
TypeVarId = Id ;
Dim = '[' ']' ;
BlockStm = Stm ;
BlockStm = ClassDec ;
BlockStm = LocalVarDecStm ;
DimExpr = '[' Expr ']' ;
Interfaces = 'implements' InterfaceType',' ;
VarMod = 'final' ;
VarDec = VarDecId '=' VarInit ;
VarDec = VarDecId ;
ClassOrInterfaceType = TypeDecSpec TypeArgs? ;
