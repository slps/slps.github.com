PrimitiveTypeDescriptor = boolean:: ;
PrimitiveTypeDescriptor = char:: ;
PrimitiveTypeDescriptor = byte:: ;
PrimitiveTypeDescriptor = short:: ;
PrimitiveTypeDescriptor = int:: ;
PrimitiveTypeDescriptor = float:: ;
PrimitiveTypeDescriptor = long:: ;
PrimitiveTypeDescriptor = double:: ;
TypeDescriptor = primitive::type::PrimitiveTypeDescriptor ;
TypeDescriptor = object::internalName::STR ;
TypeDescriptor = array::type::TypeDescriptor ;
MethodDescription = methodDescriptor::(arguments::(TypeDescriptor*) returnType::TypeDescriptor) ;
TypeSignature = primitive::type::PrimitiveTypeDescriptor ;
TypeSignature = fieldType::sig::FieldTypeSignature ;
FieldTypeSignature = classType::class::ClassTypeSignature ;
FieldTypeSignature = array::type::TypeSignature ;
FieldTypeSignature = typeVar::name::STR ;
ClassTypeSignature = topLevel::(internalName::STR args::(TypeArg*)) ;
ClassTypeSignature = inner::(class::ClassTypeSignature name::STR args::(TypeArg*)) ;
TypeArg = type::fieldType::FieldTypeSignature ;
TypeArg = wildcard:: ;
TypeArg = extends::fieldType::FieldTypeSignature ;
TypeArg = super::fieldType::FieldTypeSignature ;
Class = class::(version::INT modifiers::(ClassModifier*) name::STR signature::STR superName::STR interfaces::(STR*) sourceFile::STR sourceDebug::STR outerClass::STR outerMethod::STR outerMethodDescription::STR innerClasses::(InnerClass*) fields::(Field*) methods::(Method*)) ;
Class = class::(version::INT modifiers::(ClassModifier*) name::STR signature::STR superName::STR interfaces::(STR*) innerClasses::(InnerClass*) fields::(Field*) methods::(Method*)) ;
AccessModifier = public:: ;
AccessModifier = private:: ;
AccessModifier = protected:: ;
ClassModifier = access::access::AccessModifier ;
ClassModifier = final:: ;
ClassModifier = super:: ;
ClassModifier = interface:: ;
ClassModifier = abstract:: ;
ClassModifier = synthetic:: ;
ClassModifier = annotation:: ;
ClassModifier = enum:: ;
ClassModifier = deprecated:: ;
InnerClass = innerClass::(name::STR outerName::STR innerName::STR modifiers::(ClassModifier*)) ;
InnerClass = innerClass::(name::STR modifiers::(ClassModifier*)) ;
Field = field::(modifiers::(FieldModifier*) name::STR description::STR signature::STR value::ANY) ;
Field = field::(modifiers::(FieldModifier*) name::STR description::STR signature::STR) ;
FieldModifier = access::access::AccessModifier ;
FieldModifier = static:: ;
FieldModifier = final:: ;
FieldModifier = volatile:: ;
FieldModifier = transient:: ;
FieldModifier = synthetic:: ;
FieldModifier = enum:: ;
Method = method::(modifiers::(MethodModifier*) name::STR description::STR signature::STR exceptions::(STR*) instructions::(Instruction*) tryCatchBlocks::(TryCatchBlock*) localVariables::(LocalVariable*)) ;
MethodModifier = access::access::AccessModifier ;
MethodModifier = static:: ;
MethodModifier = final:: ;
MethodModifier = synchronized:: ;
MethodModifier = bridge:: ;
MethodModifier = varags:: ;
MethodModifier = native:: ;
MethodModifier = abstract:: ;
MethodModifier = strict:: ;
MethodModifier = synthetic:: ;
Instruction = getStatic::(owner::STR name::STR description::STR) ;
Instruction = putStatic::(owner::STR name::STR description::STR) ;
Instruction = getField::(owner::STR name::STR description::STR) ;
Instruction = putField::(owner::STR name::STR description::STR) ;
Instruction = increment::(index::INT amount::INT) ;
Instruction = nop:: ;
Instruction = aConstNull:: ;
Instruction = iConstM1:: ;
Instruction = iConst0:: ;
Instruction = iConst1:: ;
Instruction = iConst2:: ;
Instruction = iConst3:: ;
Instruction = iConst4:: ;
Instruction = iConst5:: ;
Instruction = lConst0:: ;
Instruction = lConst1:: ;
Instruction = fConst0:: ;
Instruction = fConst1:: ;
Instruction = fConst2:: ;
Instruction = dConst0:: ;
Instruction = dConst1:: ;
Instruction = iaLoad:: ;
Instruction = laLoad:: ;
Instruction = faLoad:: ;
Instruction = daLoad:: ;
Instruction = aaLoad:: ;
Instruction = baLoad:: ;
Instruction = caLoad:: ;
Instruction = saLoad:: ;
Instruction = iaStore:: ;
Instruction = laStore:: ;
Instruction = faStore:: ;
Instruction = daStore:: ;
Instruction = aaStore:: ;
Instruction = baStore:: ;
Instruction = caStore:: ;
Instruction = saStore:: ;
Instruction = pop:: ;
Instruction = pop2:: ;
Instruction = dup:: ;
Instruction = dupX1:: ;
Instruction = dupX2:: ;
Instruction = dup2:: ;
Instruction = dup2X1:: ;
Instruction = dup2X2:: ;
Instruction = swap:: ;
Instruction = iAdd:: ;
Instruction = lAdd:: ;
Instruction = fAdd:: ;
Instruction = dAdd:: ;
Instruction = iSub:: ;
Instruction = lSub:: ;
Instruction = fSub:: ;
Instruction = dSub:: ;
Instruction = iMul:: ;
Instruction = lMul:: ;
Instruction = fMul:: ;
Instruction = dMul:: ;
Instruction = iDiv:: ;
Instruction = lDiv:: ;
Instruction = fDiv:: ;
Instruction = dDiv:: ;
Instruction = iRem:: ;
Instruction = lRem:: ;
Instruction = fRem:: ;
Instruction = dRem:: ;
Instruction = iNeg:: ;
Instruction = lNeg:: ;
Instruction = fNeg:: ;
Instruction = dNeg:: ;
Instruction = iShl:: ;
Instruction = lShl:: ;
Instruction = iShr:: ;
Instruction = lShr:: ;
Instruction = iuShr:: ;
Instruction = luShr:: ;
Instruction = iAnd:: ;
Instruction = lAnd:: ;
Instruction = iOr:: ;
Instruction = lOr:: ;
Instruction = iXor:: ;
Instruction = lXor:: ;
Instruction = i2l:: ;
Instruction = i2f:: ;
Instruction = i2d:: ;
Instruction = l2i:: ;
Instruction = l2f:: ;
Instruction = l2d:: ;
Instruction = f2i:: ;
Instruction = f2l:: ;
Instruction = f2d:: ;
Instruction = d2i:: ;
Instruction = d2l:: ;
Instruction = d2f:: ;
Instruction = i2b:: ;
Instruction = i2c:: ;
Instruction = i2s:: ;
Instruction = lCmp:: ;
Instruction = fCmpL:: ;
Instruction = fCmpG:: ;
Instruction = dCmpL:: ;
Instruction = dCmpH:: ;
Instruction = iReturn:: ;
Instruction = lReturn:: ;
Instruction = fReturn:: ;
Instruction = dReturn:: ;
Instruction = aReturn:: ;
Instruction = return:: ;
Instruction = arrayLength:: ;
Instruction = aThrow:: ;
Instruction = monitorEnter:: ;
Instruction = monitorExit:: ;
Instruction = biPush::operand::INT ;
Instruction = siPush::operand::INT ;
Instruction = newArray::operand::INT ;
Instruction = ifEq::label::INT ;
Instruction = ifNe::label::INT ;
Instruction = ifLt::label::INT ;
Instruction = ifGe::label::INT ;
Instruction = ifGt::label::INT ;
Instruction = ifLe::label::INT ;
Instruction = ifICmpEq::label::INT ;
Instruction = ifICmpNe::label::INT ;
Instruction = ifICmpLt::label::INT ;
Instruction = ifICmpGe::label::INT ;
Instruction = ifICmpGt::label::INT ;
Instruction = ifICmpLe::label::INT ;
Instruction = ifACmpEq::label::INT ;
Instruction = ifACmpNe::label::INT ;
Instruction = goto::label::INT ;
Instruction = jsr::label::INT ;
Instruction = ifNull::label::INT ;
Instruction = ifNonNull::label::INT ;
Instruction = label::index::INT ;
Instruction = lineNumber::(line::INT labelIndex::INT) ;
Instruction = localVariable::(opcode::INT index::INT) ;
Instruction = iLoad::index::INT ;
Instruction = lLoad::index::INT ;
Instruction = fLoad::index::INT ;
Instruction = dLoad::index::INT ;
Instruction = aLoad::index::INT ;
Instruction = iStore::index::INT ;
Instruction = lStore::index::INT ;
Instruction = fStore::index::INT ;
Instruction = dStore::index::INT ;
Instruction = aStore::index::INT ;
Instruction = ret::index::INT ;
Instruction = ldcString::string::STR ;
Instruction = ldcInt::int::INT ;
Instruction = ldcLong::long::INT ;
Instruction = ldcFloat::float::INT ;
Instruction = ldcDouble::double::INT ;
Instruction = lookupSwitch::(defaultLabel::INT keys::(INT*) cases::(INT*)) ;
Instruction = invokeVirtual::(owner::STR name::STR description::STR) ;
Instruction = invokeSpecial::(owner::STR name::STR description::STR) ;
Instruction = invokeStatic::(owner::STR name::STR description::STR) ;
Instruction = invokeInterface::(owner::STR name::STR description::STR) ;
Instruction = invokeDynamic::(owner::STR name::STR description::STR) ;
Instruction = multiANewArray::(description::STR dimensions::INT) ;
Instruction = tableSwitch::(min::INT max::INT defaultLabel::INT cases::(INT*)) ;
Instruction = new::internalName::STR ;
Instruction = aNewArray::internalName::STR ;
Instruction = checkCast::internalName::STR ;
Instruction = instanceOf::internalName::STR ;
TryCatchBlock = tryCatchBlock::(startLabelIndex::INT endLabelIndex::INT handlerLabelIndex::INT type::STR) ;
TryCatchBlock = finallyBlock::(startLabelIndex::INT endLabelIndex::INT handlerLabelIndex::INT) ;
LocalVariable = localVariable::(name::STR description::STR signature::STR startLabelIndex::INT endLabelIndex::INT index::INT) ;
