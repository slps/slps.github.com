module Main

exports
  sorts
        SVG.Animation.extra.attrib SVG.Animation.attrib SVG.AnimationAttribute.extra.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.extra.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.extra.attrib SVG.AnimationValue.attrib SVG.AnimationAddition.extra.attrib SVG.AnimationAddtion.attrib SVG.Animation.extra.class SVG.Animation.class SVG.animate SVG.set SVG.animateMotion SVG.animateColor SVG.animateTransform SVG.mpath SVG.onbegin.attrib SVG.onend.attrib SVG.onrepeat.attrib SVG.AnimationEvents.extra.attrib SVG.AnimationEvents.attrib SVG.ClipPathValue.datatype SVG.Clip.extra.class SVG.Clip.class SVG.Clip.extra.attrib SVG.Clip.attrib SVG.clipPath SVG.FilterValue.datatype SVG.NumberOptionalNumber.datatype SVG.Filter.extra.class SVG.Filter.class SVG.FilterPrimitive.extra.class SVG.FilterPrimitive.class SVG.Filter.extra.attrib SVG.Filter.attrib SVG.FilterColor.extra.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.extra.attrib SVG.FilterPrimitive.attrib SVG.FilterPrimitiveWithIn.extra.attrib SVG.FilterPrimitiveWithIn.attrib SVG.filter SVG.feBlend SVG.feColorMatrix SVG.feComponentTransfer SVG.feComposite SVG.feFlood SVG.feGaussianBlur SVG.feImage SVG.feMerge SVG.feMergeNode SVG.feOffset SVG.feTile SVG.feFuncR SVG.feFuncG SVG.feFuncB SVG.feFuncA SVG.Cursor.class SVG.Marker.class SVG.ExtensionList.datatype SVG.FeatureList.datatype SVG.Conditional.extra.class SVG.Conditional.class SVG.Conditional.extra.attrib SVG.Conditional.attrib SVG.switch SVG.id.attrib SVG.base.attrib SVG.lang.attrib SVG.space.attrib SVG.Core.extra.attrib SVG.Core.attrib SVG.ID.datatype SVG.Text.datatype SVG.Length.datatype SVG.Lengths.datatype SVG.URI.datatype SVG.PreserveAspectRatioSpec.datatype SVG.OpacityValue.datatype SVG.Integer.datatype SVG.Coordinate.datatype SVG.Coordinates.datatype SVG.LanguageCode.datatype SVG.LanguageCodes.datatype SVG.Color.datatype SVG.Script.datatype SVG.ContentType.datatype SVG.ViewBoxSpec.datatype SVG.Boolean.datatype SVG.Number.datatype SVG.Numbers.datatype SVG.ClipFillRule.datatype SVG.SVGColor.datatype SVG.TransformList.datatype SVG.PathData.datatype SVG.Color.attrib SVG.Container.attrib SVG.Cursor.attrib SVG.External.attrib SVG.Font.attrib SVG.Gradient.attrib SVG.GraphicalEvents.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Mask.attrib SVG.Opacity.attrib SVG.Paint.attrib SVG.Profile.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Viewport.attrib SVG.XLink.attrib XLinkEmbed.attrib XLinkRequired.attrib SVG.Presentation.extra.attrib SVG.Presentation.attrib SVG.onunload.attrib SVG.onabort.attrib SVG.onerror.attrib SVG.onresize.attrib SVG.onscroll.attrib SVG.onzoom.attrib SVG.DocumentEvents.extra.attrib SVG.DocumentEvents.attrib SVG.Extensibility.extra.class SVG.Extensibility.class SVG.foreignObject SVG.foreignObject.content SVG.foreignObject.class SVG.externalResourcesRequired.attrib SVG.External.extra.attrib SVG.Font.extra.class SVG.Font.class SVG.font SVG.font-face SVG.glyph SVG.missing-glyph SVG.hkern SVG.vkern SVG.font-face-src SVG.font-face-uri SVG.font-face-format SVG.font-face-name SVG.definition-src SVG.NumberOrPercentage.datatype SVG.Gradient.extra.class SVG.Gradient.class SVG.Gradient.extra.attrib SVG.linearGradient SVG.radialGradient SVG.stop SVG.onfocusin.attrib SVG.onfocusout.attrib SVG.onactivate.attrib SVG.onclick.attrib SVG.onmousedown.attrib SVG.onmouseup.attrib SVG.onmouseover.attrib SVG.onmousemove.attrib SVG.onmouseout.attrib SVG.onload.attrib SVG.GraphicalEvents.extra.attrib SVG.display.attrib SVG.image-rendering.attrib SVG.pointer-events.attrib SVG.shape-rendering.attrib SVG.text-rendering.attrib SVG.visibility.attrib SVG.Graphics.extra.attrib SVG.LinkTarget.datatype SVG.Hyperlink.extra.class SVG.Hyperlink.class SVG.a SVG.Image.extra.class SVG.Image.class SVG.image SVG.MaskValue.datatype SVG.Mask.extra.class SVG.Mask.class SVG.Mask.extra.attrib SVG.mask SVG.opacity.attrib SVG.fill-opacity.attrib SVG.stroke-opacity.attrib SVG.Opacity.extra.attrib SVG.Paint.datatype SVG.StrokeDashArrayValue.datatype SVG.StrokeDashOffsetValue.datatype SVG.StrokeMiterLimitValue.datatype SVG.StrokeWidthValue.datatype SVG.fill.attrib SVG.fill-rule.attrib SVG.stroke.attrib SVG.stroke-dasharray.attrib SVG.stroke-dashoffset.attrib SVG.stroke-linecap.attrib SVG.stroke-linejoin.attrib SVG.stroke-miterlimit.attrib SVG.stroke-width.attrib SVG.Paint.extra.attrib SVG.color.attrib SVG.color-interpolation.attrib SVG.color-rendering.attrib SVG.Color.extra.attrib SVG.Pattern.extra.class SVG.Pattern.class SVG.pattern SVG.Profile.extra.class SVG.Profile.class SVG.Profile.extra.attrib SVG.color-profile SVG.Script.extra.class SVG.Script.class SVG.script SVG.Points.datatype SVG.Shape.extra.class SVG.Shape.class SVG.path SVG.rect SVG.circle SVG.line SVG.ellipse SVG.polyline SVG.polygon SVG.Description.extra.class SVG.Description.class SVG.Use.extra.class SVG.Use.class SVG.Structure.extra.class SVG.Structure.class SVG.svg SVG.g SVG.defs SVG.desc SVG.title SVG.metadata SVG.symbol SVG.use SVG.ClassList.datatype SVG.MediaDesc.datatype SVG.StyleSheet.datatype SVG.Style.extra.class SVG.Style.class SVG.Style.extra.attrib SVG.style SVG.BaselineShiftValue.datatype SVG.FontFamilyValue.datatype SVG.FontSizeValue.datatype SVG.FontSizeAdjustValue.datatype SVG.GlyphOrientationHorizontalValue.datatype SVG.GlyphOrientationVerticalValue.datatype SVG.KerningValue.datatype SVG.SpacingValue.datatype SVG.TextDecorationValue.datatype SVG.Text.extra.class SVG.Text.class SVG.TextContent.extra.class SVG.TextContent.class SVG.Text.extra.attrib SVG.TextContent.extra.attrib SVG.Font.extra.attrib SVG.text SVG.tspan SVG.tref SVG.textPath SVG.altGlyph SVG.altGlyphDef SVG.altGlyphItem SVG.glyphRef SVG.View.extra.class SVG.View.class SVG.view SVG.ClipValue.datatype SVG.clip.attrib SVG.overflow.attrib SVG.Viewport.extra.attrib SVG.XLink.extra.attrib SVG.XLinkRequired.extra.attrib SVG.XLinkRequired.attrib SVG.XLinkEmbed.extra.attrib SVG.XLinkEmbed.attrib SVG.XLinkReplace.extra.attrib SVG.XLinkReplace.attrib 
  context-free syntax
         -> SVG.Animation.extra.attrib

        SVG.XLink.attrib SVG.Animation.extra.attrib -> SVG.Animation.attrib

         -> SVG.AnimationAttribute.extra.attrib

        attributeName::STR attributeType::STR? SVG.AnimationAttribute.extra.attrib -> SVG.AnimationAttribute.attrib

         -> SVG.AnimationTiming.extra.attrib

        begin::STR? dur::STR? end::STR? min::STR? max::STR? restart::("always" | "never" | "whenNotActive")? repeatCount::STR? repeatDur::STR? fill::("remove" | "freeze")? SVG.AnimationTiming.extra.attrib -> SVG.AnimationTiming.attrib

         -> SVG.AnimationValue.extra.attrib

        calcMode::("discrete" | "linear" | "paced" | "spline")? values::STR? keyTimes::STR? keySplines::STR? from::STR? to::STR? by::STR? SVG.AnimationValue.extra.attrib -> SVG.AnimationValue.attrib

         -> SVG.AnimationAddition.extra.attrib

        additive::("replace" | "sum")? accumulate::("none" | "sum")? SVG.AnimationAddition.extra.attrib -> SVG.AnimationAddtion.attrib

         -> SVG.Animation.extra.class

        SVG.animate -> SVG.Animation.class
        SVG.set -> SVG.Animation.class
        SVG.animateMotion -> SVG.Animation.class
        SVG.animateColor -> SVG.Animation.class
        SVG.animateTransform -> SVG.Animation.class
        SVG.Animation.extra.class -> SVG.Animation.class

        animate::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) -> SVG.animate

        set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib to::STR?) -> SVG.set

        animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib calcMode::("discrete" | "linear" | "paced" | "spline")? values::STR? keyTimes::STR? Splines::STR? from::STR? to::STR? by::STR? path::STR? keyPoints::STR? rotate::STR? origin::STR?) -> SVG.animateMotion

        animateColor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) -> SVG.animateColor

        animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib type::("translate" | "scale" | "rotate" | "skewX" | "skewY")?) -> SVG.animateTransform

        mpath::(SVG.Description.class* SVG.Core.attrib SVG.XLinkRequired.attrib SVG.External.attrib) -> SVG.mpath

        onbegin::SVG.Script.datatype? -> SVG.onbegin.attrib

        onend::SVG.Script.datatype? -> SVG.onend.attrib

        onrepeat::SVG.Script.datatype? -> SVG.onrepeat.attrib

         -> SVG.AnimationEvents.extra.attrib

        SVG.onbegin.attrib SVG.onend.attrib SVG.onrepeat.attrib SVG.AnimationEvents.extra.attrib -> SVG.AnimationEvents.attrib

        STR -> SVG.ClipPathValue.datatype

         -> SVG.Clip.extra.class

        SVG.clipPath -> SVG.Clip.class
        SVG.Clip.extra.class -> SVG.Clip.class

         -> SVG.Clip.extra.attrib

        clip-path::SVG.ClipPathValue.datatype? clip-rule::SVG.ClipFillRule.datatype? SVG.Clip.extra.attrib -> SVG.Clip.attrib

        clipPath::(SVG.Description.class* ((SVG.Animation.class | SVG.Use.class)* SVG.Shape.class?) SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib transform::SVG.TransformList.datatype? clipPathUnits::("userSpaceOnUse" | "objectBoundingBox")?) -> SVG.clipPath

        STR -> SVG.FilterValue.datatype

        STR -> SVG.NumberOptionalNumber.datatype

         -> SVG.Filter.extra.class

        SVG.filter -> SVG.Filter.class
        SVG.Filter.extra.class -> SVG.Filter.class

         -> SVG.FilterPrimitive.extra.class

        SVG.feBlend -> SVG.FilterPrimitive.class
        SVG.feColorMatrix -> SVG.FilterPrimitive.class
        SVG.feComponentTransfer -> SVG.FilterPrimitive.class
        SVG.feComposite -> SVG.FilterPrimitive.class
        SVG.feFlood -> SVG.FilterPrimitive.class
        SVG.feGaussianBlur -> SVG.FilterPrimitive.class
        SVG.feImage -> SVG.FilterPrimitive.class
        SVG.feMerge -> SVG.FilterPrimitive.class
        SVG.feOffset -> SVG.FilterPrimitive.class
        SVG.feTile -> SVG.FilterPrimitive.class
        SVG.FilterPrimitive.extra.class -> SVG.FilterPrimitive.class

         -> SVG.Filter.extra.attrib

        filter::SVG.FilterValue.datatype? SVG.Filter.extra.attrib -> SVG.Filter.attrib

         -> SVG.FilterColor.extra.attrib

        color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit")? SVG.FilterColor.extra.attrib -> SVG.FilterColor.attrib

         -> SVG.FilterPrimitive.extra.attrib

        x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype? height::SVG.Length.datatype? result::STR? SVG.FilterPrimitive.extra.attrib -> SVG.FilterPrimitive.attrib

         -> SVG.FilterPrimitiveWithIn.extra.attrib

        SVG.FilterPrimitive.attrib in::STR? SVG.FilterPrimitiveWithIn.extra.attrib -> SVG.FilterPrimitiveWithIn.attrib

        filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype? height::SVG.Length.datatype? filterRes::SVG.NumberOptionalNumber.datatype? filterUnits::("userSpaceOnUse" | "objectBoundingBox")? primitiveUnits::("userSpaceOnUse" | "objectBoundingBox")?) -> SVG.filter

        feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::STR mode::("normal" | "multiply" | "screen" | "darken" | "lighten")?) -> SVG.feBlend

        feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha")? values::STR?) -> SVG.feColorMatrix

        feComponentTransfer::(SVG.feFuncR? SVG.feFuncG? SVG.feFuncB? SVG.feFuncA? SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) -> SVG.feComponentTransfer

        feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::STR operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic")? k1::SVG.Number.datatype? k2::SVG.Number.datatype? k3::SVG.Number.datatype? k4::SVG.Number.datatype?) -> SVG.feComposite

        feFlood::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib flood-color::SVG.SVGColor.datatype? flood-opacity::SVG.OpacityValue.datatype?) -> SVG.feFlood

        feGaussianBlur::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib stdDeviation::SVG.NumberOptionalNumber.datatype?) -> SVG.feGaussianBlur

        feImage::((SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.FilterPrimitive.attrib SVG.XLinkEmbed.attrib SVG.External.attrib preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype?) -> SVG.feImage

        feMerge::(SVG.feMergeNode* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib) -> SVG.feMerge

        feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib in::STR?) -> SVG.feMergeNode

        feOffset::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib dx::SVG.Number.datatype? dy::SVG.Number.datatype?) -> SVG.feOffset

        feTile::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) -> SVG.feTile

        feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") tableValues::STR? slope::SVG.Number.datatype? intercept::SVG.Number.datatype? amplitude::SVG.Number.datatype? exponent::SVG.Number.datatype? offset::SVG.Number.datatype?) -> SVG.feFuncR

        feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") tableValues::STR? slope::SVG.Number.datatype? intercept::SVG.Number.datatype? amplitude::SVG.Number.datatype? exponent::SVG.Number.datatype? offset::SVG.Number.datatype?) -> SVG.feFuncG

        feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") tableValues::STR? slope::SVG.Number.datatype? intercept::SVG.Number.datatype? amplitude::SVG.Number.datatype? exponent::SVG.Number.datatype? offset::SVG.Number.datatype?) -> SVG.feFuncB

        feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") tableValues::STR? slope::SVG.Number.datatype? intercept::SVG.Number.datatype? amplitude::SVG.Number.datatype? exponent::SVG.Number.datatype? offset::SVG.Number.datatype?) -> SVG.feFuncA

         -> SVG.Cursor.class

         -> SVG.Marker.class

        STR -> SVG.ExtensionList.datatype

        STR -> SVG.FeatureList.datatype

         -> SVG.Conditional.extra.class

        SVG.switch -> SVG.Conditional.class
        SVG.Conditional.extra.class -> SVG.Conditional.class

         -> SVG.Conditional.extra.attrib

        requiredFeatures::SVG.FeatureList.datatype? requiredExtensions::SVG.ExtensionList.datatype? systemLanguage::SVG.LanguageCodes.datatype? SVG.Conditional.extra.attrib -> SVG.Conditional.attrib

        switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib transform::SVG.TransformList.datatype?) -> SVG.switch

        id::SVG.ID.datatype? -> SVG.id.attrib

        xml:base::SVG.URI.datatype? -> SVG.base.attrib

        xml:lang::SVG.LanguageCode.datatype? -> SVG.lang.attrib

        xml:space::("default" | "preserve")? -> SVG.space.attrib

         -> SVG.Core.extra.attrib

        SVG.id.attrib SVG.base.attrib SVG.lang.attrib SVG.space.attrib SVG.Core.extra.attrib -> SVG.Core.attrib

        STR -> SVG.ID.datatype

        STR -> SVG.Text.datatype

        STR -> SVG.Length.datatype

        STR -> SVG.Lengths.datatype

        STR -> SVG.URI.datatype

        STR -> SVG.PreserveAspectRatioSpec.datatype

        STR -> SVG.OpacityValue.datatype

        INT -> SVG.Integer.datatype

        STR -> SVG.Coordinate.datatype

        STR -> SVG.Coordinates.datatype

        STR -> SVG.LanguageCode.datatype

        STR -> SVG.LanguageCodes.datatype

        STR -> SVG.Color.datatype

        STR -> SVG.Script.datatype

        STR -> SVG.ContentType.datatype

        STR -> SVG.ViewBoxSpec.datatype

        STR -> SVG.Boolean.datatype

        INT -> SVG.Number.datatype

        STR -> SVG.Numbers.datatype

        STR -> SVG.ClipFillRule.datatype

        STR -> SVG.SVGColor.datatype

        STR -> SVG.TransformList.datatype

        STR -> SVG.PathData.datatype

         -> SVG.AnimationEvents.attrib

         -> SVG.Clip.attrib

         -> SVG.Color.attrib

         -> SVG.Conditional.attrib

         -> SVG.Container.attrib

         -> SVG.Core.attrib

         -> SVG.Cursor.attrib

         -> SVG.External.attrib

         -> SVG.Filter.attrib

         -> SVG.FilterColor.attrib

         -> SVG.Font.attrib

         -> SVG.Gradient.attrib

         -> SVG.GraphicalEvents.attrib

         -> SVG.Graphics.attrib

         -> SVG.Marker.attrib

         -> SVG.Mask.attrib

         -> SVG.Opacity.attrib

         -> SVG.Paint.attrib

         -> SVG.Profile.attrib

         -> SVG.Style.attrib

         -> SVG.Text.attrib

         -> SVG.TextContent.attrib

         -> SVG.Viewport.attrib

         -> SVG.XLink.attrib

         -> XLinkEmbed.attrib

         -> XLinkRequired.attrib

         -> SVG.Presentation.extra.attrib

        SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib flood-color::SVG.SVGColor.datatype? flood-opacity::SVG.OpacityValue.datatype? lighting-color::SVG.SVGColor.datatype? SVG.Presentation.extra.attrib -> SVG.Presentation.attrib

        onunload::SVG.Script.datatype? -> SVG.onunload.attrib

        onabort::SVG.Script.datatype? -> SVG.onabort.attrib

        onerror::SVG.Script.datatype? -> SVG.onerror.attrib

        onresize::SVG.Script.datatype? -> SVG.onresize.attrib

        onscroll::SVG.Script.datatype? -> SVG.onscroll.attrib

        onzoom::SVG.Script.datatype? -> SVG.onzoom.attrib

         -> SVG.DocumentEvents.extra.attrib

        SVG.onunload.attrib SVG.onabort.attrib SVG.onerror.attrib SVG.onresize.attrib SVG.onscroll.attrib SVG.onzoom.attrib SVG.DocumentEvents.extra.attrib -> SVG.DocumentEvents.attrib

         -> SVG.Extensibility.extra.class

        SVG.foreignObject -> SVG.Extensibility.class
        SVG.Extensibility.extra.class -> SVG.Extensibility.class

        foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype height::SVG.Length.datatype transform::SVG.TransformList.datatype?) -> SVG.foreignObject

        SVG.foreignObject.class* -> SVG.foreignObject.content

        STR -> SVG.foreignObject.class

        externalResourcesRequired::SVG.Boolean.datatype? -> SVG.externalResourcesRequired.attrib

         -> SVG.External.extra.attrib

        SVG.externalResourcesRequired.attrib SVG.External.extra.attrib -> SVG.External.attrib

         -> SVG.Font.extra.class

        SVG.font -> SVG.Font.class
        SVG.font-face -> SVG.Font.class
        SVG.Font.extra.class -> SVG.Font.class

        font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern | SVG.vkern)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib horiz-origin-x::SVG.Number.datatype? horiz-origin-y::SVG.Number.datatype? horiz-adv-x::SVG.Number.datatype vert-origin-x::SVG.Number.datatype? vert-origin-y::SVG.Number.datatype? vert-adv-y::SVG.Number.datatype?) -> SVG.font

        font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib font-family::STR? font-style::STR? font-variant::STR? font-weight::STR? font-stretch::STR? font-size::STR? unicode-range::STR? units-per-em::SVG.Number.datatype? panose-1::STR? stemv::SVG.Number.datatype? stemh::SVG.Number.datatype? slope::SVG.Number.datatype? cap-height::SVG.Number.datatype? x-height::SVG.Number.datatype? accent-height::SVG.Number.datatype? ascent::SVG.Number.datatype? descent::SVG.Number.datatype? widths::STR? bbox::STR? ideographic::SVG.Number.datatype? alphabetic::SVG.Number.datatype? mathematical::SVG.Number.datatype? hanging::SVG.Number.datatype? v-ideographic::SVG.Number.datatype? v-alphabetic::SVG.Number.datatype? v-mathematical::SVG.Number.datatype? v-hanging::SVG.Number.datatype? underline-position::SVG.Number.datatype? underline-thickness::SVG.Number.datatype? strikethrough-position::SVG.Number.datatype? strikethrough-thickness::SVG.Number.datatype? overline-position::SVG.Number.datatype? overline-thickness::SVG.Number.datatype?) -> SVG.font-face

        glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib unicode::STR? glyph-name::STR? d::SVG.PathData.datatype? orientation::STR? arabic-form::STR? lang::SVG.LanguageCodes.datatype? horiz-adv-x::SVG.Number.datatype? vert-origin-x::SVG.Number.datatype? vert-origin-y::SVG.Number.datatype? vert-adv-y::SVG.Number.datatype?) -> SVG.glyph

        missing-glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib d::SVG.PathData.datatype? horiz-adv-x::SVG.Number.datatype? vert-origin-x::SVG.Number.datatype? vert-origin-y::SVG.Number.datatype? vert-adv-y::SVG.Number.datatype?) -> SVG.missing-glyph

        hkern::( SVG.Core.attrib u1::STR? g1::STR? u2::STR? g2::STR? k::SVG.Number.datatype) -> SVG.hkern

        vkern::( SVG.Core.attrib u1::STR? g1::STR? u2::STR? g2::STR? k::SVG.Number.datatype) -> SVG.vkern

        font-face-src::((SVG.font-face-uri | SVG.font-face-name)+ SVG.Core.attrib) -> SVG.font-face-src

        font-face-uri::(SVG.font-face-format* SVG.Core.attrib SVG.XLinkRequired.attrib) -> SVG.font-face-uri

        font-face-format::( SVG.Core.attrib string::STR?) -> SVG.font-face-format

        font-face-name::( SVG.Core.attrib name::STR?) -> SVG.font-face-name

        definition-src::( SVG.Core.attrib SVG.XLinkRequired.attrib) -> SVG.definition-src

        STR -> SVG.NumberOrPercentage.datatype

         -> SVG.Gradient.extra.class

        SVG.linearGradient -> SVG.Gradient.class
        SVG.radialGradient -> SVG.Gradient.class
        SVG.Gradient.extra.class -> SVG.Gradient.class

         -> SVG.Gradient.extra.attrib

        stop-color::SVG.SVGColor.datatype? stop-opacity::SVG.OpacityValue.datatype? SVG.Gradient.extra.attrib -> SVG.Gradient.attrib

        linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib x1::SVG.Coordinate.datatype? y1::SVG.Coordinate.datatype? x2::SVG.Coordinate.datatype? y2::SVG.Coordinate.datatype? gradientUnits::("userSpaceOnUse" | "objectBoundingBox")? gradientTransform::SVG.TransformList.datatype? spreadMethod::("pad" | "reflect" | "repeat")?) -> SVG.linearGradient

        radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib cx::SVG.Coordinate.datatype? cy::SVG.Coordinate.datatype? r::SVG.Length.datatype? fx::SVG.Coordinate.datatype? fy::SVG.Coordinate.datatype? gradientUnits::("userSpaceOnUse" | "objectBoundingBox")? gradientTransform::SVG.TransformList.datatype? spreadMethod::("pad" | "reflect" | "repeat")?) -> SVG.radialGradient

        stop::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib offset::SVG.NumberOrPercentage.datatype) -> SVG.stop

        onfocusin::SVG.Script.datatype? -> SVG.onfocusin.attrib

        onfocusout::SVG.Script.datatype? -> SVG.onfocusout.attrib

        onactivate::SVG.Script.datatype? -> SVG.onactivate.attrib

        onclick::SVG.Script.datatype? -> SVG.onclick.attrib

        onmousedown::SVG.Script.datatype? -> SVG.onmousedown.attrib

        onmouseup::SVG.Script.datatype? -> SVG.onmouseup.attrib

        onmouseover::SVG.Script.datatype? -> SVG.onmouseover.attrib

        onmousemove::SVG.Script.datatype? -> SVG.onmousemove.attrib

        onmouseout::SVG.Script.datatype? -> SVG.onmouseout.attrib

        onload::SVG.Script.datatype? -> SVG.onload.attrib

         -> SVG.GraphicalEvents.extra.attrib

        SVG.onfocusin.attrib SVG.onfocusout.attrib SVG.onactivate.attrib SVG.onclick.attrib SVG.onmousedown.attrib SVG.onmouseup.attrib SVG.onmouseover.attrib SVG.onmousemove.attrib SVG.onmouseout.attrib SVG.onload.attrib SVG.GraphicalEvents.extra.attrib -> SVG.GraphicalEvents.attrib

        display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit")? -> SVG.display.attrib

        image-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit")? -> SVG.image-rendering.attrib

        pointer-events::("visiblePainted" | "visibleFill" | "visibleStroke" | "visible" | "painted" | "fill" | "stroke" | "all" | "none" | "inherit")? -> SVG.pointer-events.attrib

        shape-rendering::("auto" | "optimizeSpeed" | "crispEdges" | "geometricPrecision" | "inherit")? -> SVG.shape-rendering.attrib

        text-rendering::("auto" | "optimizeSpeed" | "optimizeLegibility" | "geometricPrecision" | "inherit")? -> SVG.text-rendering.attrib

        visibility::("visible" | "hidden" | "inherit")? -> SVG.visibility.attrib

         -> SVG.Graphics.extra.attrib

        SVG.display.attrib SVG.image-rendering.attrib SVG.pointer-events.attrib SVG.shape-rendering.attrib SVG.text-rendering.attrib SVG.visibility.attrib SVG.Graphics.extra.attrib -> SVG.Graphics.attrib

        STR -> SVG.LinkTarget.datatype

         -> SVG.Hyperlink.extra.class

        SVG.a -> SVG.Hyperlink.class
        SVG.Hyperlink.extra.class -> SVG.Hyperlink.class

        a::((STR | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib transform::SVG.TransformList.datatype? target::SVG.LinkTarget.datatype?) -> SVG.a

         -> SVG.Image.extra.class

        SVG.image -> SVG.Image.class
        SVG.Image.extra.class -> SVG.Image.class

        image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype height::SVG.Length.datatype preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype? transform::SVG.TransformList.datatype?) -> SVG.image

        STR -> SVG.MaskValue.datatype

         -> SVG.Mask.extra.class

        SVG.mask -> SVG.Mask.class
        SVG.Mask.extra.class -> SVG.Mask.class

         -> SVG.Mask.extra.attrib

        mask::SVG.MaskValue.datatype? SVG.Mask.extra.attrib -> SVG.Mask.attrib

        mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype? height::SVG.Length.datatype? maskUnits::("userSpaceOnUse" | "objectBoundingBox")? maskContentUnits::("userSpaceOnUse" | "objectBoundingBox")?) -> SVG.mask

        opacity::SVG.OpacityValue.datatype? -> SVG.opacity.attrib

        fill-opacity::SVG.OpacityValue.datatype? -> SVG.fill-opacity.attrib

        stroke-opacity::SVG.OpacityValue.datatype? -> SVG.stroke-opacity.attrib

         -> SVG.Opacity.extra.attrib

        SVG.opacity.attrib SVG.fill-opacity.attrib SVG.stroke-opacity.attrib SVG.Opacity.extra.attrib -> SVG.Opacity.attrib

        STR -> SVG.Paint.datatype

        STR -> SVG.StrokeDashArrayValue.datatype

        STR -> SVG.StrokeDashOffsetValue.datatype

        STR -> SVG.StrokeMiterLimitValue.datatype

        STR -> SVG.StrokeWidthValue.datatype

        fill::SVG.Paint.datatype? -> SVG.fill.attrib

        fill-rule::SVG.ClipFillRule.datatype? -> SVG.fill-rule.attrib

        stroke::SVG.Paint.datatype? -> SVG.stroke.attrib

        stroke-dasharray::SVG.StrokeDashArrayValue.datatype? -> SVG.stroke-dasharray.attrib

        stroke-dashoffset::SVG.StrokeDashOffsetValue.datatype? -> SVG.stroke-dashoffset.attrib

        stroke-linecap::("butt" | "round" | "square" | "inherit")? -> SVG.stroke-linecap.attrib

        stroke-linejoin::("miter" | "round" | "bevel" | "inherit")? -> SVG.stroke-linejoin.attrib

        stroke-miterlimit::SVG.StrokeMiterLimitValue.datatype? -> SVG.stroke-miterlimit.attrib

        stroke-width::SVG.StrokeWidthValue.datatype? -> SVG.stroke-width.attrib

         -> SVG.Paint.extra.attrib

        SVG.fill.attrib SVG.fill-rule.attrib SVG.stroke.attrib SVG.stroke-dasharray.attrib SVG.stroke-dashoffset.attrib SVG.stroke-linecap.attrib SVG.stroke-linejoin.attrib SVG.stroke-miterlimit.attrib SVG.stroke-width.attrib SVG.Paint.extra.attrib -> SVG.Paint.attrib

        color::SVG.Color.datatype? -> SVG.color.attrib

        color-interpolation::("auto" | "sRGB" | "linearRGB" | "inherit")? -> SVG.color-interpolation.attrib

        color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit")? -> SVG.color-rendering.attrib

         -> SVG.Color.extra.attrib

        SVG.color.attrib SVG.color-interpolation.attrib SVG.color-rendering.attrib SVG.Color.extra.attrib -> SVG.Color.attrib

         -> SVG.Pattern.extra.class

        SVG.pattern -> SVG.Pattern.class
        SVG.Pattern.extra.class -> SVG.Pattern.class

        pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype? height::SVG.Length.datatype? patternUnits::("userSpaceOnUse" | "objectBoundingBox")? patternContentUnits::("userSpaceOnUse" | "objectBoundingBox")? patternTransform::SVG.TransformList.datatype? viewBox::SVG.ViewBoxSpec.datatype? preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype?) -> SVG.pattern

         -> SVG.Profile.extra.class

        SVG.color-profile -> SVG.Profile.class
        SVG.Profile.extra.class -> SVG.Profile.class

         -> SVG.Profile.extra.attrib

        color-profile::STR? SVG.Profile.extra.attrib -> SVG.Profile.attrib

        color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib local::STR? name::STR rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric")?) -> SVG.color-profile

         -> SVG.Script.extra.class

        SVG.script -> SVG.Script.class
        SVG.Script.extra.class -> SVG.Script.class

        script::(STR SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) -> SVG.script

        STR -> SVG.Points.datatype

         -> SVG.Shape.extra.class

        SVG.path -> SVG.Shape.class
        SVG.rect -> SVG.Shape.class
        SVG.circle -> SVG.Shape.class
        SVG.line -> SVG.Shape.class
        SVG.ellipse -> SVG.Shape.class
        SVG.polyline -> SVG.Shape.class
        SVG.polygon -> SVG.Shape.class
        SVG.Shape.extra.class -> SVG.Shape.class

        path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype pathLength::SVG.Number.datatype? transform::SVG.TransformList.datatype?) -> SVG.path

        rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype height::SVG.Length.datatype rx::SVG.Length.datatype? ry::SVG.Length.datatype? transform::SVG.TransformList.datatype?) -> SVG.rect

        circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib cx::SVG.Coordinate.datatype? cy::SVG.Coordinate.datatype? r::SVG.Length.datatype transform::SVG.TransformList.datatype?) -> SVG.circle

        line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib x1::SVG.Coordinate.datatype? y1::SVG.Coordinate.datatype? x2::SVG.Coordinate.datatype? y2::SVG.Coordinate.datatype? transform::SVG.TransformList.datatype?) -> SVG.line

        ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib cx::SVG.Coordinate.datatype? cy::SVG.Coordinate.datatype? rx::SVG.Length.datatype ry::SVG.Length.datatype transform::SVG.TransformList.datatype?) -> SVG.ellipse

        polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype transform::SVG.TransformList.datatype?) -> SVG.polyline

        polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype transform::SVG.TransformList.datatype?) -> SVG.polygon

         -> SVG.Description.extra.class

        SVG.desc -> SVG.Description.class
        SVG.title -> SVG.Description.class
        SVG.metadata -> SVG.Description.class
        SVG.Description.extra.class -> SVG.Description.class

         -> SVG.Use.extra.class

        SVG.use -> SVG.Use.class
        SVG.Use.extra.class -> SVG.Use.class

         -> SVG.Structure.extra.class

        SVG.svg -> SVG.Structure.class
        SVG.g -> SVG.Structure.class
        SVG.defs -> SVG.Structure.class
        SVG.symbol -> SVG.Structure.class
        SVG.Use.class -> SVG.Structure.class
        SVG.Structure.extra.class -> SVG.Structure.class

        svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype? height::SVG.Length.datatype? viewBox::SVG.ViewBoxSpec.datatype? preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype? zoomAndPan::("disable" | "magnify")? version::SVG.Number.datatype baseProfile::SVG.Text.datatype? contentScriptType::SVG.ContentType.datatype? contentStyleType::SVG.ContentType.datatype?) -> SVG.svg

        g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib transform::SVG.TransformList.datatype?) -> SVG.g

        defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib transform::SVG.TransformList.datatype?) -> SVG.defs

        desc::(STR SVG.Core.attrib SVG.Style.attrib) -> SVG.desc

        title::(STR SVG.Core.attrib SVG.Style.attrib) -> SVG.title

        metadata::(STR SVG.Core.attrib) -> SVG.metadata

        symbol::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib viewBox::SVG.ViewBoxSpec.datatype? preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype?) -> SVG.symbol

        use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib x::SVG.Coordinate.datatype? y::SVG.Coordinate.datatype? width::SVG.Length.datatype? height::SVG.Length.datatype? transform::SVG.TransformList.datatype?) -> SVG.use

        STR -> SVG.ClassList.datatype

        STR -> SVG.MediaDesc.datatype

        STR -> SVG.StyleSheet.datatype

         -> SVG.Style.extra.class

        SVG.style -> SVG.Style.class
        SVG.Style.extra.class -> SVG.Style.class

         -> SVG.Style.extra.attrib

        style::SVG.StyleSheet.datatype? class::SVG.ClassList.datatype? SVG.Style.extra.attrib -> SVG.Style.attrib

        style::(STR SVG.Core.attrib type::SVG.ContentType.datatype media::SVG.MediaDesc.datatype? title::SVG.Text.datatype?) -> SVG.style

        STR -> SVG.BaselineShiftValue.datatype

        STR -> SVG.FontFamilyValue.datatype

        STR -> SVG.FontSizeValue.datatype

        STR -> SVG.FontSizeAdjustValue.datatype

        STR -> SVG.GlyphOrientationHorizontalValue.datatype

        STR -> SVG.GlyphOrientationVerticalValue.datatype

        STR -> SVG.KerningValue.datatype

        STR -> SVG.SpacingValue.datatype

        STR -> SVG.TextDecorationValue.datatype

         -> SVG.Text.extra.class

        SVG.text -> SVG.Text.class
        SVG.altGlyphDef -> SVG.Text.class
        SVG.Text.extra.class -> SVG.Text.class

         -> SVG.TextContent.extra.class

        SVG.tspan -> SVG.TextContent.class
        SVG.tref -> SVG.TextContent.class
        SVG.textPath -> SVG.TextContent.class
        SVG.altGlyph -> SVG.TextContent.class
        SVG.TextContent.extra.class -> SVG.TextContent.class

         -> SVG.Text.extra.attrib

        writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit")? SVG.Text.extra.attrib -> SVG.Text.attrib

         -> SVG.TextContent.extra.attrib

        alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit")? baseline-shift::SVG.BaselineShiftValue.datatype? direction::("ltr" | "rtl" | "inherit")? dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit")? glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype? glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype? kerning::SVG.KerningValue.datatype? letter-spacing::SVG.SpacingValue.datatype? text-anchor::("start" | "middle" | "end" | "inherit")? text-decoration::SVG.TextDecorationValue.datatype? unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit")? word-spacing::SVG.SpacingValue.datatype? SVG.TextContent.extra.attrib -> SVG.TextContent.attrib

         -> SVG.Font.extra.attrib

        font-family::SVG.FontFamilyValue.datatype? font-size::SVG.FontSizeValue.datatype? font-size-adjust::SVG.FontSizeAdjustValue.datatype? font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit")? font-style::("normal" | "italic" | "oblique" | "inherit")? font-variant::("normal" | "small-caps" | "inherit")? font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit")? SVG.Font.extra.attrib -> SVG.Font.attrib

        text::((STR | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib x::SVG.Coordinates.datatype? y::SVG.Coordinates.datatype? dx::SVG.Lengths.datatype? dy::SVG.Lengths.datatype? rotate::SVG.Numbers.datatype? textLength::SVG.Length.datatype? lengthAdjust::("spacing" | "spacingAndGlyphs")? transform::SVG.TransformList.datatype?) -> SVG.text

        tspan::((STR | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib x::SVG.Coordinates.datatype? y::SVG.Coordinates.datatype? dx::SVG.Lengths.datatype? dy::SVG.Lengths.datatype? rotate::SVG.Numbers.datatype? textLength::SVG.Length.datatype? lengthAdjust::("spacing" | "spacingAndGlyphs")?) -> SVG.tspan

        tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib x::SVG.Coordinates.datatype? y::SVG.Coordinates.datatype? dx::SVG.Lengths.datatype? dy::SVG.Lengths.datatype? rotate::SVG.Numbers.datatype? textLength::SVG.Length.datatype? lengthAdjust::("spacing" | "spacingAndGlyphs")?) -> SVG.tref

        textPath::((STR | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib startOffset::SVG.Length.datatype? textLength::SVG.Length.datatype? lengthAdjust::("spacing" | "spacingAndGlyphs")? method::("align" | "stretch")? spacing::("auto" | "exact")?) -> SVG.textPath

        altGlyph::(STR SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib x::SVG.Coordinates.datatype? y::SVG.Coordinates.datatype? dx::SVG.Lengths.datatype? dy::SVG.Lengths.datatype? glyphRef::STR? format::STR? rotate::SVG.Numbers.datatype?) -> SVG.altGlyph

        altGlyphDef::((SVG.glyphRef+ | SVG.altGlyphItem+) SVG.Core.attrib) -> SVG.altGlyphDef

        altGlyphItem::(SVG.glyphRef+ SVG.Core.attrib) -> SVG.altGlyphItem

        glyphRef::( SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib x::SVG.Coordinates.datatype? y::SVG.Coordinates.datatype? dx::SVG.Lengths.datatype? dy::SVG.Lengths.datatype? glyphRef::STR? format::STR?) -> SVG.glyphRef

         -> SVG.View.extra.class

        SVG.view -> SVG.View.class
        SVG.View.extra.class -> SVG.View.class

        view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib viewBox::SVG.ViewBoxSpec.datatype? preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype? zoomAndPan::("disable" | "magnify")? viewTarget::STR?) -> SVG.view

        STR -> SVG.ClipValue.datatype

        clip::SVG.ClipValue.datatype? -> SVG.clip.attrib

        overflow::("visible" | "hidden" | "scroll" | "auto" | "inherit")? -> SVG.overflow.attrib

         -> SVG.Viewport.extra.attrib

        SVG.clip.attrib SVG.overflow.attrib SVG.Viewport.extra.attrib -> SVG.Viewport.attrib

         -> SVG.XLink.extra.attrib

        xlink:type::"simple"? xlink:href::SVG.URI.datatype? xlink:role::SVG.URI.datatype? xlink:arcrole::SVG.URI.datatype? xlink:title::STR? xlink:show::"other"? xlink:actuate::"onLoad"? SVG.XLink.extra.attrib -> SVG.XLink.attrib

         -> SVG.XLinkRequired.extra.attrib

        xlink:type::"simple"? xlink:href::SVG.URI.datatype xlink:role::SVG.URI.datatype? xlink:arcrole::SVG.URI.datatype? xlink:title::STR? xlink:show::"other"? xlink:actuate::"onLoad"? SVG.XLinkRequired.extra.attrib -> SVG.XLinkRequired.attrib

         -> SVG.XLinkEmbed.extra.attrib

        xlink:type::"simple"? xlink:href::SVG.URI.datatype xlink:role::SVG.URI.datatype? xlink:arcrole::SVG.URI.datatype? xlink:title::STR? xlink:show::"embed"? xlink:actuate::"onLoad"? SVG.XLinkEmbed.extra.attrib -> SVG.XLinkEmbed.attrib

         -> SVG.XLinkReplace.extra.attrib

        xlink:type::"simple"? xlink:href::SVG.URI.datatype xlink:role::SVG.URI.datatype? xlink:arcrole::SVG.URI.datatype? xlink:title::STR? xlink:show::("new" | "replace")? xlink:actuate::"onRequest"? SVG.XLinkReplace.extra.attrib -> SVG.XLinkReplace.attrib
