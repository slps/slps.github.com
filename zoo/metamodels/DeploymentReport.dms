DeploymentReport = import::DeploymentImport+ applications::Applications binding::Binding logicalServers::LogicalServers errors::ErrorCollection ;
DeploymentImport = alias::SimpleName identity::ImportNamespaceIdentity ;
ImportNamespaceIdentity = import::DeploymentImport ;
NamespaceIdentity = ImportNamespaceIdentity ;
NamespaceIdentity = name::Path version::FourPartVersionType publicKey::PublicKeyType publicKeyToken::PublicKeyTokenType culture::CultureNeutral platform::Platform ;
Applications = system::OuterSystem+ application::Application+ ;
LogicalServers = zone::Zone+ logicalServer::LogicalServer+ ;
OuterSystem = system::OuterSystem+ application::Application+ name::String ;
Binding = zone::Zone+ boundLogicalServer::BoundLogicalServer+ ;
Zone = zone::Zone+ boundLogicalServer::BoundLogicalServer+ logicalServer::LogicalServer+ name::String ;
ReportObject = LogicalServer ;
ReportObject = Application ;
ReportObject = ReportSystem ;
ReportObject = ReportResource ;
ReportObject = ReportEndpoint ;
ReportObject = sequence::SequenceReport+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
SequenceReport = report::ReportObject setting::Setting system::ReportSystem+ resource::ReportResource+ endpoint::ReportEndpoint+ ;
BoundLogicalServer = setting::Setting+ application::Application+ name::String definition::String extends::String ;
LogicalServer = sequence::SequenceReport+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
Application = sequence::SequenceReport+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
ReportSystem = sequence::SequenceReport+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
ReportResource = sequence::SequenceReport+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
ReportEndpoint = sequence::SequenceReport+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
Setting = value::SettingInstanceValue+ facet::SettingFacet+ settingAttributes::SettingAttributes ;
SettingFacet = value::SettingInstanceValue settingAttributes::SettingAttributes ;
SettingInstanceValue = contents::String+ null::Boolean ;
SettingAttributes = name::String definition::String state::SettingState fixed::Boolean list::Boolean null::Boolean secure::Boolean failedToSerialize::Boolean ;
SettingValue = contents::String+ Null::Boolean Secure::Boolean ;
ErrorCollection = documentError::DocumentError+ documentResolutionError::DocumentResolutionError+ documentConstraintError::DocumentConstraintError+ ;
DocumentError = DocumentResolutionError ;
DocumentError = DocumentConstraintError ;
DocumentError = description::Description+ Code::Integer Level::Integer File::String ;
DocumentResolutionError = Statement::String ;
DocumentConstraintError = failedInput::FailedInput+ constraintMember::String constraintDefinition::String targetInstancePath::String ownerInstancePath::String constraintErrorCode::String constraintErrorMessage::String ;
FailedInput = contents::String+ ;
Description = contents::String+ ;
Guid = value::String ;
SimpleName = value::String ;
Path = value::String ;
FourPartVersionType = value::String ;
PublicKeyType = value::String ;
PublicKeyTokenType = value::String ;
Culture = value::String ;
CultureNeutral = value::String ;
ProcessorArchitectures = x86:: ;
ProcessorArchitectures = ia64:: ;
ProcessorArchitectures = amd64:: ;
ProcessorArchitectures = wow64:: ;
ProcessorArchitectures = msil:: ;
ProcessorArchitectures = shx:: ;
ProcessorArchitectures = arm:: ;
ProcessorArchitectures = data:: ;
Platform = x86:: ;
Platform = ia64:: ;
Platform = amd64:: ;
Platform = wow64:: ;
Platform = msil:: ;
Platform = shx:: ;
Platform = arm:: ;
Platform = data:: ;
Platform = *:: ;
Platform = neutral:: ;
SettingState = Set:: ;
SettingState = NotSet:: ;
SettingState = Error:: ;
Element = Guid ;
Element = SimpleName ;
Element = Path ;
Element = FourPartVersionType ;
Element = PublicKeyType ;
Element = PublicKeyTokenType ;
Element = Culture ;
Element = CultureNeutral ;
Element = value::String ;
String = STR ;
Integer = INT ;
Boolean = 'true' ;
Boolean = 'false' ;
