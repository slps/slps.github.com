Dimension = width::Double heigth::Double ;
Point = BezierPoint ;
Point = x::Double y::Double ;
BezierPoint = controls::Point ;
Property = key::String value::String ;
DiagramElement = Reference ;
DiagramElement = GraphElement ;
DiagramElement = LeafElement ;
Reference = isIndividualRepresentation::Boolean referenced::DiagramElement ;
GraphElement = GraphEdge ;
GraphElement = GraphNode ;
GraphEdge = waypoints::Point anchors::GraphConnector ;
GraphNode = Diagram ;
GraphNode = size::Dimension ;
GraphConnector = position::Point gc_graphElement::GraphElement graphEdges::GraphEdge+ ;
DiagramLink = zoom::Double viewPort::Point dl_graphElement::GraphElement dl_diagram::Diagram ;
SemanticModelBridge = SimpleSemanticModelElement ;
SemanticModelBridge = UML1SemanticModelBridge ;
SemanticModelBridge = CoreSemanticModelBridge ;
Diagram = name::String zoom::Double viewPort::Point diagramLinks::DiagramLink+ namespace::SemanticModelBridge ;
SimpleSemanticModelElement = typeInfo::String ;
UML1SemanticModelBridge = element::CoreElement ;
CoreSemanticModelBridge = element::ElementsElement ;
CoreElement = ;
ElementsElement = ;
LeafElement = TextElement ;
LeafElement = Image ;
LeafElement = GraphicPrimitive ;
TextElement = text::String ;
Image = uri::String mimeType::String ;
GraphicPrimitive = Polyline ;
GraphicPrimitive = Ellipse ;
Polyline = waypoints::Point closed::Boolean ;
Ellipse = center::Point radiusX::Double radiusY::Double rotation::Double startAngle::Double endAngle::Double ;
Integer = INT ;
String = STR ;
Boolean = 'true' ;
Boolean = 'false' ;
