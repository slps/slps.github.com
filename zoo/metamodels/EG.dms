ExecutionGraph = node::Node+ nodeNested::Node ;
Node = Start ;
Node = End ;
Node = Control ;
Node = Basic ;
Node = predecessor::Node+ successor::Node+ executionGraph::ExecutionGraph nested::ExecutionGraph+ ;
Start = predecessor::Node+ successor::Node+ executionGraph::ExecutionGraph nested::ExecutionGraph+ ;
End = predecessor::Node+ successor::Node+ executionGraph::ExecutionGraph nested::ExecutionGraph+ ;
Control = Branch ;
Control = Loop ;
Control = Fork ;
Control = Join ;
Control = Acquire ;
Control = Release ;
Control = Split ;
Control = Branch ;
Control = Loop ;
Control = Fork ;
Control = Join ;
Control = Acquire ;
Control = Release ;
Control = Split ;
Basic = predecessor::Node+ successor::Node+ executionGraph::ExecutionGraph nested::ExecutionGraph+ ;
Branch = ;
Loop = ;
Fork = ;
Join = ;
Acquire = ;
Release = ;
Split = ;
String = STR ;
Boolean = 'true' ;
Boolean = 'false' ;
Integer = INT ;
