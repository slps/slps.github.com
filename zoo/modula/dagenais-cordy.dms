program = Interface ;
program = Module ;
program = GInterface ;
program = GModule ;
program = IInterface ;
program = IModule ;
Interface = 'UNSAFE'? 'INTERFACE' id ';' (NL NL) Import* Decl* NL 'END' id '.' NL ;
IInterface = 'UNSAFE'? 'INTERFACE' id '=' id GenActls 'END' id '.' NL ;
Module = 'UNSAFE'? 'MODULE' id Exports? ';' (NL NL) Import* Block id '.' NL ;
IModule = 'UNSAFE'? 'MODULE' id Exports? '=' id GenActls 'END' id '.' NL ;
GInterface = 'GENERIC' 'INTERFACE' id GenFmls ';' Import* Decl* NL 'END' id '.' NL ;
GModule = 'GENERIC' 'MODULE' id GenFmls ';' (NL NL) Import* Block id '.' NL ;
Exports = 'EXPORTS' IdList ;
Import = AsImport ;
Import = FromImport (NL NL) ;
AsImport = 'IMPORT' ImportItem ComaImportItem* ';' (NL NL) ;
ComaImportItem = ',' ImportItem ;
FromImport = 'FROM' id 'IMPORT' IdList ';' (NL NL) ;
Block = Decl* 'BEGIN' Stmts 'END' ;
Decl = ProcedureHead EqualBlock? ';' (NL NL) ;
Decl = 'VAR' (IN NL) VariableDecl* EX ;
Decl = 'TYPE' (IN NL) TypeDecl* (EX NL) ;
Decl = 'CONST' (IN NL) ConstDecl* (EX NL) ;
Decl = 'EXCEPTION' (IN NL) ExceptionDecl* (EX NL) ;
Decl = 'REVEAL' (IN NL) RevealDecl* (EX NL) ;
EqualBlock = '=' (IN NL) Block id EX ;
GenFmls = '(' IdList? ')' ;
GenActls = '(' IdList? ')' ;
ImportItem = id AsId? ;
AsId = 'AS' id ;
ConstDecl = id ColonType? '=' ConstExpr ';' NL ;
ColonType = ':' Type ;
TypeDecl = id '=' Type ';' NL ;
TypeDecl = id '<:' Type ';' NL ;
RevealDecl = QualId '=' Type ';' NL ;
RevealDecl = QualId '<:' Type ';' NL ;
ExceptionDecl = id ParenthesizedType? ';' NL ;
ParenthesizedType = '(' Type ')' ;
VariableDecl = IdList ColonType? EqualExpr? ';' NL ;
EqualExpr = ':=' Expr ;
ProcedureHead = 'PROCEDURE' id Signature ;
Signature = '(' Formals? ')' ColonType? Raises? ;
Raises = 'RAISES' RaisesList ;
Formals = Formal SemicolonFormal* ';'? ;
SemicolonFormal = ';' Formal ;
Formal = Mode? IdList ColonType? EqualConstExpr? ;
EqualConstExpr = ':=' ConstExpr ;
Mode = 'VALUE' ;
Mode = 'VAR' ;
Mode = 'READONLY' ;
RaisesList = '{' QualId',' '}' ;
RaisesList = 'ANY' ;
Stmts = (IN NL) OptStmts? EX ;
OptStmts = Stmt SemiColonStmt* ';'? NL ;
SemiColonStmt = ';' NL Stmt ;
Stmt = IfStmt ;
Stmt = ForStmt ;
Stmt = ReturnStmt ;
Stmt = WhileStmt ;
Stmt = AssignStmt ;
Stmt = CallStmt ;
Stmt = Block ;
Stmt = CaseStmt ;
Stmt = ExitStmt ;
Stmt = EvalStmt ;
Stmt = LockStmt ;
Stmt = LoopStmt ;
Stmt = RaiseStmt ;
Stmt = RepeatStmt ;
Stmt = TypecaseStmt ;
Stmt = TryStmt ;
Stmt = WithStmt ;
AssignStmt = Expr ':=' Expr ;
CallStmt = Expr '(' Actual',' ')' ;
CaseStmt = 'CASE' Expr 'OF' NL Case? VerticalCase* ElseStmts? 'END' ;
VerticalCase = '|' Case ;
ElseStmts = 'ELSE' Stmts ;
ExitStmt = 'EXIT' ;
EvalStmt = 'EVAL' Expr ;
ForStmt = 'FOR' id ':=' Expr 'TO' Expr ByExpr? 'DO' Stmts 'END' ;
ByExpr = 'BY' Expr ;
IfStmt = 'IF' Expr 'THEN' Stmts Elsif* ElseStmts? 'END' ;
Elsif = 'ELSIF' Expr 'THEN' Stmts ;
LockStmt = 'LOCK' Expr 'DO' Stmts 'END' ;
LoopStmt = 'LOOP' Stmts 'END' ;
RaiseStmt = 'RAISE' QualId ParenthesizedExpr? ;
ParenthesizedExpr = '(' Expr ')' ;
RepeatStmt = 'REPEAT' Stmts 'UNTIL' Expr ;
ReturnStmt = 'RETURN' Expr? ;
TypecaseStmt = 'TYPECASE' Expr 'OF' NL TCase? VerticalTCase* ElseStmts? 'END' ;
VerticalTCase = '|' TCase ;
TryStmt = 'TRY' Stmts ExceptOrFinally 'END' ;
ExceptOrFinally = 'EXCEPT' NL Handler? VerticalHandler* ElseStmts? ;
ExceptOrFinally = 'FINALLY' Stmts ;
VerticalHandler = '|' Handler ;
WhileStmt = 'WHILE' Expr 'DO' Stmts 'END' ;
WithStmt = 'WITH' Binding+ 'DO' Stmts 'END' ;
Case = Labels',' '=>' Stmts ;
Labels = ConstExpr DotDotConstExpr? ;
DotDotConstExpr = '..' ConstExpr ;
Handler = QualId',' ParenthesizedId? '=>' Stmts ;
ParenthesizedId = '(' id ')' ;
TCase = Type',' ParenthesizedId? '=>' Stmts ;
Binding = id '=' Expr ;
Actual = Type ;
Actual = Expr ;
Actual = id ':=' Expr ;
Type = TypeName ;
Type = ArrayType ;
Type = EnumerationType ;
Type = RecordType ;
Type = ObjectType ;
Type = ProcedureType ;
Type = RefType ;
Type = SetType ;
Type = SubrangeType ;
Type = PackedType ;
Type = '(' Type ')' ;
ArrayType = 'ARRAY' Type',' 'OF' Type ;
PackedType = 'BITS' ConstExpr 'FOR' Type ;
EnumerationType = '{' IdList? '}' ;
ObjectType = ObjectOrTypeName? Brand? 'OBJECT' (IN NL) Fields TheMethods? TheOverrides? 'END' EX ;
ObjectOrTypeName = TypeName ;
ObjectOrTypeName = ObjectType ;
TheMethods = 'METHODS' NL Methods ;
TheOverrides = 'OVERRIDES' NL Overrides ;
ProcedureType = 'PROCEDURE' Signature ;
RecordType = 'RECORD' (IN NL) Fields 'END' EX ;
RefType = 'UNTRACED'? Brand? 'REF' Type ;
SetType = 'SET' 'OF' Type ;
SubrangeType = '[' ConstExpr '..' ConstExpr ']' ;
Brand = 'BRANDED' ConstExpr? ;
Fields = FieldList? ;
FieldList = IN Field SemiColonField* ';'? (EX NL) ;
SemiColonField = ';' NL Field ;
Field = IdList ColonType? EqualConstExpr? ;
Methods = MethodList? ;
MethodList = IN Method SemiColonMethod* ';'? (EX NL) ;
SemiColonMethod = ';' NL Method ;
Method = id Signature EqualConstExpr? ;
Overrides = OverrideList? ;
OverrideList = IN Override SemiColonOverride* ';'? (EX NL) ;
SemiColonOverride = ';' NL Override ;
Override = id ':=' ConstExpr ;
ConstExpr = Expr ;
Expr = E1 OrE1* ;
OrE1 = 'OR' E1 ;
E1 = E2 AndE2* ;
AndE2 = 'AND' E2 ;
E2 = 'NOT'* E3 ;
E3 = E4 RelOpE4* ;
RelOpE4 = RelOp E4 ;
E4 = E5 AddOpE5* ;
AddOpE5 = AddOp E5 ;
E5 = E6 MulOpE6* ;
MulOpE6 = MulOp E6 ;
E6 = SignOp* E7 ;
E7 = E8 Selector* ;
E8 = id ;
E8 = Number ;
E8 = charlit ;
E8 = stringlit ;
E8 = '(' Expr ')' ;
E8 = Constructor ;
SignOp = '+' ;
SignOp = '-' ;
RelOp = '=' ;
RelOp = '#' ;
RelOp = '<' ;
RelOp = '<=' ;
RelOp = '>' ;
RelOp = '>=' ;
RelOp = 'IN' ;
AddOp = '+' ;
AddOp = '-' ;
AddOp = '&' ;
MulOp = '*' ;
MulOp = '/' ;
MulOp = 'DIV' ;
MulOp = 'MOD' ;
Selector = '.' id ;
Selector = '[' Expr ComaExpr* ']' ;
Selector = '(' Actual',' ')' ;
Selector = '^' ;
ComaExpr = ',' Expr ;
Constructor = Type '{' AnyCons '}' ;
AnyCons = SetCons ;
AnyCons = RecordCons ;
AnyCons = ArrayCons ;
SetCons = SetElt',' ;
SetElt = Expr DotDotExpr? ;
DotDotExpr = '..' Expr ;
RecordCons = RecordElt',' ;
RecordElt = Expr EqualExpr? ;
ArrayCons = Expr',' ComaDotDot? ;
ComaDotDot = ',' '..' ;
IdList = id',' ;
QualId = id DotId? ;
DotId = '.' id ;
TypeName = QualId ;
TypeName = 'ROOT' ;
TypeName = 'UNTRACED' 'ROOT' ;
