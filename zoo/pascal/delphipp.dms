ident = id ;
ident = key ;
namespace = id '.' ;
nested_id = SPOFF namespace* ident SPON ;
filenamelit = charlit ;
filenamelit = stringlit ;
filenamelit = nested_id ;
delphipp_file = pp_stmt_or_water* ;
pp_stmt_or_water = pp_stmt ;
pp_stmt_or_water = pp_comment ;
pp_stmt_or_water = pp_any ;
pp_comment = cmbracketblock ;
pp_comment = cmstarblock ;
pp_comment = cmline ;
cmbracketblock = '{' bracketbody* '}' ;
cmstarblock = '(*' starbody* '*)' ;
bracketbody = pp_any ;
starbody = pp_any ;
cmline = '//' cmlinebody* EOL ;
cmlinebody = pp_any ;
pp_any = id codetoken* ;
pp_any = key ;
pp_any = token ;
codetoken = '(' ;
codetoken = ')' ;
codetoken = '.' ;
codetoken = ';' ;
codetoken = ':' ;
codetoken = ',' ;
codetoken = '[' ;
codetoken = ']' ;
codetoken = '+' ;
codetoken = '-' ;
codetoken = '*' ;
codetoken = '/' ;
codetoken = '^' ;
codetoken = '=' ;
codetoken = '@' ;
codetoken = '>' ;
codetoken = '<' ;
codetoken = '<>' ;
codetoken = '>=' ;
codetoken = '<=' ;
codetoken = ':=' ;
codetoken = '//' ;
codetoken = id ;
codetoken = anynumber ;
codetoken = charlit ;
codetoken = space ;
pp_stmt = pp_ifstmt ;
pp_stmt = pp_directivestmt ;
pp_directivestmt = '{$' space? pp_directive',' bracketbody* '}' ;
pp_directivestmt = '(*$' space? pp_directive',' starbody* '*)' ;
pp_directive = 'DEFINE' space id ;
pp_directive = 'UNDEF' space id ;
pp_directive = 'INCLUDE' space? filenamelit ;
pp_directive = 'I' space? filenamelit ;
pp_directive = 'LINK' space? filenamelit ;
pp_directive = 'L' space? filenamelit ;
pp_directive = 'RESOURCE' space? filenamelit space? filenamelit? ;
pp_directive = 'R' space? filenamelit space? filenamelit? ;
pp_directive = 'HPPEMIT' space? charlit ;
pp_directive = 'EXTERNALSYM' space id ;
pp_directive = 'NODEFINE' ;
pp_directive = 'MINENUMSIZE' ;
pp_directive = 'DENYPACKAGEUNIT' ;
pp_directive = 'WEAKPACKAGEUNIT' ;
pp_directive = 'IMAGEBASE' space? anynumber ;
pp_directive = 'C' space id ;
pp_directive = 'MINENUMSIZE' space anynumber ;
pp_directive = pp_minenumsize ;
pp_directive = 'ALIGN' space? anynumber ;
pp_directive = pp_align ;
pp_directive = 'M' space? anynumber',' ;
pp_directive = 'MAXSTACKSIZE' space anynumber ;
pp_directive = 'MINSTACKSIZE' space anynumber ;
pp_directive = 'RESOURCERESERVE' space anynumber ;
pp_directive = 'NOINCLUDE' ;
pp_directive = 'WARN' ;
pp_directive = 'MESSAGE' ;
pp_directive = 'APPTYPE' ;
pp_directive = 'LIBPREFIX' space? charlit ;
pp_directive = 'LIBSUFIX' space? charlit ;
pp_directive = 'LIBVERSION' space? charlit ;
pp_directive = 'DESCRIPTION' space? charlit ;
pp_directive = 'D' space? charlit ;
pp_directive = 'EXTENSION' space id ;
pp_directive = 'E' space id ;
pp_directive = pp_switch space? ;
pp_align = 'A1' ;
pp_align = 'A2' ;
pp_align = 'A4' ;
pp_align = 'A8' ;
pp_minenumsize = 'Z1' ;
pp_minenumsize = 'Z2' ;
pp_minenumsize = 'Z4' ;
pp_switch = id space? pp_switchopt ;
pp_switchopt = '+' ;
pp_switchopt = '-' ;
pp_switchopt = 'ON' ;
pp_switchopt = 'OFF' ;
pp_ifstmt = pp_ifblock pp_elseifblock* pp_endif ;
pp_ifblock = pp_ifexpr pp_content* ;
pp_content = pp_stmt_or_water ;
pp_elseifblock = pp_elseifexpr pp_content* ;
pp_ifexpr = '{$' space? if_alt bracketbody* '}' ;
pp_ifexpr = '(*$' space? if_alt starbody* '*)' ;
pp_elseifexpr = '{$' space? else_alt space? bracketbody* '}' ;
pp_elseifexpr = '(*$' space? else_alt space? starbody* '*)' ;
pp_endif = '{$' space? endif_alt bracketbody* '}' ;
pp_endif = '(*$' space? endif_alt starbody* '*)' ;
if_alt = 'IF' space? pp_boolexpr ;
if_alt = 'IFDEF' space? id ;
if_alt = 'IFNDEF' space? id ;
if_alt = 'IFOPT' space? pp_switch ;
else_alt = 'ELSEIF' space? pp_boolexpr ;
else_alt = 'ELSE' space? ;
endif_alt = 'ENDIF' ;
endif_alt = 'IFEND' ;
pp_boolexpr = booleanlit ;
pp_boolexpr = boolfunc space? '(' id ')' ;
pp_boolexpr = 'NOT' space? pp_boolexpr ;
pp_boolexpr = id ;
pp_boolexpr = pp_boolexpr 'pp_boolopr' pp_boolexpr ;
pp_boolexpr = pp_litexpr 'pp_compareopr' pp_litexpr ;
pp_boolexpr = '(' pp_boolexpr ')' ;
boolfunc = 'DEFINED' ;
boolfunc = 'DECLARED' ;
boolfunc = 'OPTION' ;
booleanlit = 'FALSE' ;
booleanlit = 'TRUE' ;
pp_litexpr = id ;
pp_litexpr = charlit ;
pp_litexpr = anynumber ;
pp_boolopr = 'AND' ;
pp_boolopr = 'OR' ;
pp_boolopr = 'XOR' ;
pp_compareopr = '>' ;
pp_compareopr = '<' ;
pp_compareopr = '=' ;
pp_compareopr = '>=' ;
pp_compareopr = '<=' ;
pp_compareopr = '<>' ;
anynumber = number ;
anynumber = hexnumber ;
