program = Document ;
Document = PHPOpenTag? PHPSection PHPCloseTagDocumentSection? ;
Document = HTMLSection PHPOpenTagPHPSection? PHPCloseTagDocumentSection? ;
PHPCloseTagDocumentSection = PHPCloseTag HTMLSection PHPCloseTagDocumentSection? ;
PHPOpenTagPHPSection = PHPOpenTag PHPSection ;
PHPSection = TopStatement* ;
PHPOpenTag = '<?php' NL ;
PHPOpenTag = '<?' NL ;
PHPOpenTag = '<%' NL ;
PHPOpenTag = '<?=' NL ;
PHPCloseTag = '?>' NL ;
PHPCloseTag = '%>' NL ;
HTMLSection = InlineHTML ;
InlineHTML = InlineHTMLtoken* ;
InlineHTMLtoken = tag_token_or_key ;
tag_token_or_key = tag ;
tag_token_or_key = ';' NL ;
tag_token_or_key = token ;
tag_token_or_key = key ;
tag = '<' SPOFF bigtag_id tag_attribute* '>' SPON (IN NL) ;
tag = EX FL '<' SPOFF '/' bigtag_id '>' SPON FL ;
tag = '<' SPOFF '!'? id_or_key tag_attribute* '>' SPON NL ;
tag = '<' SPOFF '/' id_or_key '>' SPON NL ;
tag = '<' SPOFF id_or_key tag_attribute* '/>' SPON NL ;
bigtag_id = 'html' ;
bigtag_id = 'body' ;
bigtag_id = 'head' ;
bigtag_id = 'form' ;
bigtag_id = 'table' ;
bigtag_id = 'tr' ;
bigtag_id = 'td' ;
bigtag_id = 'script' ;
bigtag_id = 'select' ;
bigtag_id = 'label' ;
bigtag_id = 'div' ;
tag_attribute = SP xml_colon? id_or_key '=' token ;
xml_colon = 'xml:' ;
id_or_key = id '-'? id? ;
id_or_key = key ;
TopStatement = FunctionDecl ;
TopStatement = ClassDecl ;
TopStatement = Statement ;
TopStatement = InterfaceDecl ;
FunctionDecl = 'function' '&'? id '(' Param',' ')' NL Block ;
ClassDecl = ClassType id NL ExtendsClause? ImplementsClause? '{' (NL IN) ClassMember* EX '}' NL ;
ClassType = 'class' ;
ClassType = 'abstract' 'class' ;
ClassType = 'final' 'class' ;
ExtendsClause = 'extends' id NL ;
ImplementsClause = 'implements' Name',' NL ;
Name = id ;
ClassMember = VarModifiers? FunctionDecl ;
ClassMember = VarModifiers? 'abstract' VarModifiers? 'function' '&'? id '(' Param',' ')' ';' NL ;
ClassMember = 'var' InstanceVariable',' ';' NL ;
ClassMember = 'const' id '=' StaticScalar ';' NL ;
ClassMember = VarModifiers InstanceVariable',' ';' NL ;
InterfaceDecl = 'interface' id NL InterfaceExtendsClause? '{' (NL IN) InterfaceMember* (EX NL) '}' ;
InterfaceExtendsClause = 'extends' Name',' ;
InterfaceMember = VarModifiers? 'function' '&'? id '(' Param',' ')' ';' NL ;
InstanceVariable = TVariable EqualsStaticScalar? ;
TVariable = SimpleVariableName ;
EqualsStaticScalar = '=' StaticScalar ;
VarModifiers = VarModifier+ ;
VarModifier = 'public' ;
VarModifier = 'protected' ;
VarModifier = 'private' ;
VarModifier = 'static' ;
VarModifier = 'final' ;
Param = TypeHint? '&'? TVariable EqualsStaticScalar? ;
Param = 'const' TVariable ;
TypeHint = id ;
Statement = ExprStatement ;
Statement = BlockStatement ;
Statement = IfStatement ;
Statement = WhileStatement ;
Statement = DoStatement ;
Statement = ForStatement ;
Statement = SwitchStatement ;
Statement = ControlStatement ;
Statement = GlobalStaticStatement ;
Statement = UnsetStatement ;
Statement = EchoStatement ;
Statement = PrintStatement ;
Statement = InlineHTMLStatement ;
Statement = ForEachStatement ;
Statement = NullStatement ;
Statement = DeclareStatement ;
Statement = TryStatement ;
Statement = ThrowStatement ;
ExprStatement = Expr ';'? NL ;
BlockStatement = Block ;
Block = '{' (NL IN) TopStatement* EX '}' NL ;
IfStatement = 'if' '(' Expr ')' NL Statement ElseIfStatement* ElseStatement? ;
IfStatement = 'if' '(' Expr ')' ':' (NL IN) TopStatement* EX AltElseifStatement* AltElseStatement? 'endif' ';' NL ;
ElseIfStatement = 'elseif' '(' Expr ')' NL Statement ;
ElseStatement = 'else' NL Statement ;
AltElseifStatement = 'elseif' '(' Expr ')' ':' (NL IN) TopStatement* EX ;
AltElseStatement = 'else' ':' (NL IN) TopStatement* EX ;
WhileStatement = 'while' '(' Expr ')' NL Statement ;
WhileStatement = 'while' '(' Expr ')' ':' (NL IN) TopStatement* EX 'endwhile' ';' NL ;
DoStatement = 'do' NL Statement 'while' '(' Expr ')' ';' NL ;
ForStatement = 'for' '(' Expr',' ';' Expr',' ';' Expr',' ')' NL Statement ;
ForStatement = 'for' '(' Expr',' ';' Expr',' ';' Expr',' ')' ':' (NL IN) Statement* EX 'endfor' ';' NL ;
SwitchStatement = 'switch' '(' Expr ')' NL '{' ';'? (NL IN) Case* EX '}' NL ;
SwitchStatement = 'switch' '(' Expr ')' ':' ';'? (NL IN) Case* EX 'endswitch' ';' NL ;
Case = 'case' Expr CaseSeparator (NL IN) TopStatement* EX ;
Case = 'default' CaseSeparator (NL IN) TopStatement* EX ;
CaseSeparator = ';' ;
CaseSeparator = ':' ;
ControlStatement = 'break' Expr? ';' NL ;
ControlStatement = 'continue' Expr? ';' NL ;
ControlStatement = 'return' Expr? ';' NL ;
GlobalStaticStatement = 'global' CVar',' ';' NL ;
GlobalStaticStatement = 'static' StaticVariable',' ';' NL ;
StaticVariable = TVariable EqualsStaticScalar? ;
UnsetStatement = 'unset' '(' ObjectCVar',' ')' ';' NL ;
EchoStatement = 'echo' Expr',' ';'? NL ;
PrintStatement = 'print' Expr',' ';'? NL ;
InlineHTMLStatement = PHPCloseTag InlineHTML PHPOpenTag ;
ForEachStatement = 'foreach' '(' Expr 'as' ForEachPattern ')' NL Statement ;
ForEachStatement = 'foreach' '(' Expr 'as' ForEachPattern ')' ':' (NL IN) Statement* EX 'endforeach' ';' NL ;
ForEachPattern = ForEachKey? ForEachVar ;
ForEachKey = ForEachVar '=>' ;
ForEachVar = CVar ;
ForEachVar = '&' CVar ;
NullStatement = ';' NL ;
DeclareStatement = 'declare' '(' Directive* ')' NL Statement ;
Directive = id ;
TryStatement = 'try' NL Block Catch* ;
Catch = 'catch' '(' id TVariable ')' NL Block ;
ThrowStatement = 'throw' Expr ';' NL ;
Expr = LogicalOrExpr ;
LogicalOrExpr = LogicalXorExpr OrLogicalXorExpr* ;
OrLogicalXorExpr = 'or' LogicalXorExpr ;
LogicalXorExpr = LogicalAndExpr LogicalXorLogicalAndExpr* ;
LogicalXorLogicalAndExpr = 'xor' LogicalAndExpr ;
LogicalAndExpr = AssignmentExpr LogicalAndAssignmentExpr* ;
LogicalAndAssignmentExpr = 'and' AssignmentExpr ;
AssignmentExpr = TernaryExpr AssignOpAssignmentExpr* ;
AssignOpAssignmentExpr = AssignOp AssignmentExpr ;
AssignOp = '.=' ;
AssignOp = '=' ;
AssignOp = '+=' ;
AssignOp = '-=' ;
AssignOp = '*=' ;
AssignOp = '/=' ;
AssignOp = '%=' ;
AssignOp = '&=' ;
AssignOp = '|=' ;
AssignOp = '^=' ;
AssignOp = '<<=' ;
AssignOp = '>>=' ;
AssignOp = '=&' ;
TernaryExpr = ConditionalOrExpr IfConditionalOrExpr* ;
IfConditionalOrExpr = '?' Expr ':' Expr ;
ConditionalOrExpr = ConditionalAndExpr ConditionalOrConditionalAndExpr* ;
ConditionalOrConditionalAndExpr = '||' ConditionalAndExpr ;
ConditionalAndExpr = BitOrExpr ConditionalAndBitOrExpr* ;
ConditionalAndBitOrExpr = '&&' BitOrExpr ;
BitOrExpr = BitXorExpr BitOrBitXorExpr* ;
BitOrBitXorExpr = '|' BitXorExpr ;
BitXorExpr = BitAndExpr BitXorBitAndExpr* ;
BitXorBitAndExpr = '^' BitAndExpr ;
BitAndExpr = EqualityExpr BitAndEqualityExpr* ;
BitAndEqualityExpr = '&' EqualityExpr ;
EqualityExpr = InequalityExpr EqualityOpInequalityExpr* ;
EqualityOpInequalityExpr = EqualityOp InequalityExpr ;
EqualityOp = '==' ;
EqualityOp = '!=' ;
EqualityOp = '===' ;
EqualityOp = '!==' ;
InequalityExpr = ShiftExpr InequalityOpShiftExpr* ;
InequalityOpShiftExpr = InequalityOp ShiftExpr ;
InequalityOp = '<>' ;
InequalityOp = '<' ;
InequalityOp = '<=' ;
InequalityOp = '>' ;
InequalityOp = '>=' ;
ShiftExpr = CatExpr ShiftOpCatExpr* ;
ShiftOpCatExpr = ShiftOp CatExpr ;
ShiftOp = '<<' ;
ShiftOp = '>>' ;
CatExpr = AddExpr CatAddExpr* ;
CatAddExpr = '.' AddExpr ;
AddExpr = MultExpr AddOpMultExpr* ;
AddOpMultExpr = AddOp MultExpr ;
AddOp = '+' ;
AddOp = '-' ;
MultExpr = NotExpr MultOpNotExpr* ;
MultOpNotExpr = MultOp NotExpr ;
MultOp = '*' ;
MultOp = '/' ;
MultOp = '%' ;
NotExpr = '!'* InstanceExpr ;
InstanceExpr = UnaryExpr InstanceOfUnaryExpr? ;
InstanceOfUnaryExpr = 'instanceof' UnaryExpr ;
UnaryExpr = UnaryOp* IncDecExpr ;
UnaryOp = '~' ;
UnaryOp = '-' ;
UnaryOp = '@' ;
UnaryOp = '(' CastType ')' ;
UnaryOp = '@' '!' ;
CastType = 'int' ;
CastType = 'integer' ;
CastType = 'bool' ;
CastType = 'boolean' ;
CastType = 'real' ;
CastType = 'double' ;
CastType = 'float' ;
CastType = 'string' ;
CastType = 'array' ;
CastType = 'object' ;
CastType = 'unset' ;
IncDecExpr = IncDec* Primary IncDec* ;
IncDec = '++' ;
IncDec = '--' ;
Primary = VariableOrFunctionCall ;
Primary = ScalarConstant ;
Primary = Array ;
Primary = List ;
Primary = InternalFunction ;
Primary = '(' Expr ')' ;
ScalarConstant = PlusMinus? NumericConstant ;
ScalarConstant = StringConstant ;
ScalarConstant = MagicConstant ;
ScalarConstant = BooleanConstant ;
ScalarConstant = 'null' ;
PlusMinus = '+' ;
PlusMinus = '-' ;
NumericConstant = number ;
NumericConstant = Hexa ;
NumericConstant = Octa ;
StringConstant = stringlit ;
StringConstant = charlit ;
StringConstant = CommandString ;
StringConstant = '<<<' id (IN NL) EncapsedInlineHTML* id EX ;
EncapsedInlineHTML = tag_token_or_key ;
popid = id ;
token_or_key = token ;
token_or_key = key ;
BooleanConstant = 'true' ;
BooleanConstant = 'false' ;
StaticScalar = Primary ;
Array = 'array' '(' IN ArrayPair',' ','? EX ')' ;
ArrayPair = NL ArrayKey? ArrayValue ;
ArrayKey = Expr '=>' ;
ArrayValue = Expr ;
ArrayValue = '&' ObjectCVar ;
VariableOrFunctionCall = ObjectCVar ;
ObjectCVar = ClassNameColonColon? CVar CallParams? ArrowObjectProperty* ;
ClassNameColonColon = ClassName '::' ;
CallParam = '&'? Expr ;
CallParams = '(' CallParam',' ')' ;
ClassName = id ;
ArrowObjectProperty = '->' ObjectProperty CallParams? ;
ObjectProperty = VariableName ;
ObjectProperty = IdOrKey ;
ObjectProperty = ObjectProperty VariableExtension ;
ObjectProperty = ObjectCVar ;
CVar = ReferenceVariable ;
ReferenceVariable = CompoundVariable VariableExtension* ;
VariableExtension = '[' Expr? ']' ;
VariableExtension = '{' Expr '}' ;
CompoundVariable = VariableName ;
VariableName = SimpleVariableName ;
VariableName = '$' VariableName ;
VariableName = '{' SimpleVariableName '}' ;
VariableName = '{' Expr '}' ;
SimpleVariableName = id ;
SimpleVariableName = '$' SPOFF IdOrKey SPON ;
IdOrKey = id ;
IdOrKey = key ;
List = 'list' '(' ListElem',' ')' ;
ListElem = List ;
ListElem = ObjectCVar ;
ListElem =  ;
InternalFunction = 'new' Primary ;
InternalFunction = 'clone' Primary ;
InternalFunction = 'isset' '(' ObjectCVar',' ')' ;
InternalFunction = 'empty' '(' ObjectCVar ')' ;
InternalFunction = 'intval' '(' ObjectCVar ')' ;
InternalFunction = 'eval' '(' Expr ')' ;
InternalFunction = 'exit' exit_value? ;
InternalFunction = 'include' Expr ;
InternalFunction = 'include_once' Expr ;
InternalFunction = 'require' Expr ;
InternalFunction = 'require_once' Expr ;
exit_value = '(' Expr? ')' ;
