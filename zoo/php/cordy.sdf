module Main

exports
  sorts
        Program Document PHPCloseTagDocumentSection PHPOpenTagPHPSection PHPSection PHPOpenTag PHPCloseTag HTMLSection InlineHTML InlineHTMLtoken Tag-token-or-key Tag Bigtag-id Tag-attribute Xml-colon Id-or-key TopStatement FunctionDecl ClassDecl ClassType ExtendsClause ImplementsClause Name ClassMember InterfaceDecl InterfaceExtendsClause InterfaceMember InstanceVariable TVariable EqualsStaticScalar VarModifiers VarModifier Param TypeHint Statement ExprStatement BlockStatement Block IfStatement ElseIfStatement ElseStatement AltElseifStatement AltElseStatement WhileStatement DoStatement ForStatement SwitchStatement Case CaseSeparator ControlStatement GlobalStaticStatement StaticVariable UnsetStatement EchoStatement PrintStatement InlineHTMLStatement ForEachStatement ForEachPattern ForEachKey ForEachVar NullStatement DeclareStatement Directive TryStatement Catch ThrowStatement Expr LogicalOrExpr OrLogicalXorExpr LogicalXorExpr LogicalXorLogicalAndExpr LogicalAndExpr LogicalAndAssignmentExpr AssignmentExpr AssignOpAssignmentExpr AssignOp TernaryExpr IfConditionalOrExpr ConditionalOrExpr ConditionalOrConditionalAndExpr ConditionalAndExpr ConditionalAndBitOrExpr BitOrExpr BitOrBitXorExpr BitXorExpr BitXorBitAndExpr BitAndExpr BitAndEqualityExpr EqualityExpr EqualityOpInequalityExpr EqualityOp InequalityExpr InequalityOpShiftExpr InequalityOp ShiftExpr ShiftOpCatExpr ShiftOp CatExpr CatAddExpr AddExpr AddOpMultExpr AddOp MultExpr MultOpNotExpr MultOp NotExpr InstanceExpr InstanceOfUnaryExpr UnaryExpr UnaryOp CastType IncDecExpr IncDec Primary ScalarConstant PlusMinus NumericConstant StringConstant EncapsedInlineHTML Popid Token-or-key BooleanConstant StaticScalar Array ArrayPair ArrayKey ArrayValue VariableOrFunctionCall ObjectCVar ClassNameColonColon CallParam CallParams ClassName ArrowObjectProperty ObjectProperty CVar ReferenceVariable VariableExtension CompoundVariable VariableName SimpleVariableName IdOrKey List ListElem InternalFunction Exit-value 
  context-free syntax
        Document -> Program

        PHPOpenTag? PHPSection PHPCloseTagDocumentSection? -> Document
        HTMLSection PHPOpenTagPHPSection? PHPCloseTagDocumentSection? -> Document

        PHPCloseTag HTMLSection PHPCloseTagDocumentSection? -> PHPCloseTagDocumentSection

        PHPOpenTag PHPSection -> PHPOpenTagPHPSection

        TopStatement* -> PHPSection

        "<?php" NL -> PHPOpenTag
        "<?" NL -> PHPOpenTag
        "<%" NL -> PHPOpenTag
        "<?=" NL -> PHPOpenTag

        "?>" NL -> PHPCloseTag
        "%>" NL -> PHPCloseTag

        InlineHTML -> HTMLSection

        InlineHTMLtoken* -> InlineHTML

        Tag-token-or-key -> InlineHTMLtoken

        Tag -> Tag-token-or-key
        ";" NL -> Tag-token-or-key
        Token -> Tag-token-or-key
        Key -> Tag-token-or-key

        "<" SPOFF Bigtag-id Tag-attribute* ">" SPON (IN NL) -> Tag
        EX FL "<" SPOFF "/" Bigtag-id ">" SPON FL -> Tag
        "<" SPOFF "!"? Id-or-key Tag-attribute* ">" SPON NL -> Tag
        "<" SPOFF "/" Id-or-key ">" SPON NL -> Tag
        "<" SPOFF Id-or-key Tag-attribute* "/>" SPON NL -> Tag

        "html" -> Bigtag-id
        "body" -> Bigtag-id
        "head" -> Bigtag-id
        "form" -> Bigtag-id
        "table" -> Bigtag-id
        "tr" -> Bigtag-id
        "td" -> Bigtag-id
        "script" -> Bigtag-id
        "select" -> Bigtag-id
        "label" -> Bigtag-id
        "div" -> Bigtag-id

        SP Xml-colon? Id-or-key "=" Token -> Tag-attribute

        "xml:" -> Xml-colon

        Id "-"? Id? -> Id-or-key
        Key -> Id-or-key

        FunctionDecl -> TopStatement
        ClassDecl -> TopStatement
        Statement -> TopStatement
        InterfaceDecl -> TopStatement

        "function" "&"? Id "(" Param"," ")" NL Block -> FunctionDecl

        ClassType Id NL ExtendsClause? ImplementsClause? "{" (NL IN) ClassMember* EX "}" NL -> ClassDecl

        "class" -> ClassType
        "abstract" "class" -> ClassType
        "final" "class" -> ClassType

        "extends" Id NL -> ExtendsClause

        "implements" Name"," NL -> ImplementsClause

        Id -> Name

        VarModifiers? FunctionDecl -> ClassMember
        VarModifiers? "abstract" VarModifiers? "function" "&"? Id "(" Param"," ")" ";" NL -> ClassMember
        "var" InstanceVariable"," ";" NL -> ClassMember
        "const" Id "=" StaticScalar ";" NL -> ClassMember
        VarModifiers InstanceVariable"," ";" NL -> ClassMember

        "interface" Id NL InterfaceExtendsClause? "{" (NL IN) InterfaceMember* (EX NL) "}" -> InterfaceDecl

        "extends" Name"," -> InterfaceExtendsClause

        VarModifiers? "function" "&"? Id "(" Param"," ")" ";" NL -> InterfaceMember

        TVariable EqualsStaticScalar? -> InstanceVariable

        SimpleVariableName -> TVariable

        "=" StaticScalar -> EqualsStaticScalar

        VarModifier+ -> VarModifiers

        "public" -> VarModifier
        "protected" -> VarModifier
        "private" -> VarModifier
        "static" -> VarModifier
        "final" -> VarModifier

        TypeHint? "&"? TVariable EqualsStaticScalar? -> Param
        "const" TVariable -> Param

        Id -> TypeHint

        ExprStatement -> Statement
        BlockStatement -> Statement
        IfStatement -> Statement
        WhileStatement -> Statement
        DoStatement -> Statement
        ForStatement -> Statement
        SwitchStatement -> Statement
        ControlStatement -> Statement
        GlobalStaticStatement -> Statement
        UnsetStatement -> Statement
        EchoStatement -> Statement
        PrintStatement -> Statement
        InlineHTMLStatement -> Statement
        ForEachStatement -> Statement
        NullStatement -> Statement
        DeclareStatement -> Statement
        TryStatement -> Statement
        ThrowStatement -> Statement

        Expr ";"? NL -> ExprStatement

        Block -> BlockStatement

        "{" (NL IN) TopStatement* EX "}" NL -> Block

        "if" "(" Expr ")" NL Statement ElseIfStatement* ElseStatement? -> IfStatement
        "if" "(" Expr ")" ":" (NL IN) TopStatement* EX AltElseifStatement* AltElseStatement? "endif" ";" NL -> IfStatement

        "elseif" "(" Expr ")" NL Statement -> ElseIfStatement

        "else" NL Statement -> ElseStatement

        "elseif" "(" Expr ")" ":" (NL IN) TopStatement* EX -> AltElseifStatement

        "else" ":" (NL IN) TopStatement* EX -> AltElseStatement

        "while" "(" Expr ")" NL Statement -> WhileStatement
        "while" "(" Expr ")" ":" (NL IN) TopStatement* EX "endwhile" ";" NL -> WhileStatement

        "do" NL Statement "while" "(" Expr ")" ";" NL -> DoStatement

        "for" "(" Expr"," ";" Expr"," ";" Expr"," ")" NL Statement -> ForStatement
        "for" "(" Expr"," ";" Expr"," ";" Expr"," ")" ":" (NL IN) Statement* EX "endfor" ";" NL -> ForStatement

        "switch" "(" Expr ")" NL "{" ";"? (NL IN) Case* EX "}" NL -> SwitchStatement
        "switch" "(" Expr ")" ":" ";"? (NL IN) Case* EX "endswitch" ";" NL -> SwitchStatement

        "case" Expr CaseSeparator (NL IN) TopStatement* EX -> Case
        "default" CaseSeparator (NL IN) TopStatement* EX -> Case

        ";" -> CaseSeparator
        ":" -> CaseSeparator

        "break" Expr? ";" NL -> ControlStatement
        "continue" Expr? ";" NL -> ControlStatement
        "return" Expr? ";" NL -> ControlStatement

        "global" CVar"," ";" NL -> GlobalStaticStatement
        "static" StaticVariable"," ";" NL -> GlobalStaticStatement

        TVariable EqualsStaticScalar? -> StaticVariable

        "unset" "(" ObjectCVar"," ")" ";" NL -> UnsetStatement

        "echo" Expr"," ";"? NL -> EchoStatement

        "print" Expr"," ";"? NL -> PrintStatement

        PHPCloseTag InlineHTML PHPOpenTag -> InlineHTMLStatement

        "foreach" "(" Expr "as" ForEachPattern ")" NL Statement -> ForEachStatement
        "foreach" "(" Expr "as" ForEachPattern ")" ":" (NL IN) Statement* EX "endforeach" ";" NL -> ForEachStatement

        ForEachKey? ForEachVar -> ForEachPattern

        ForEachVar "=>" -> ForEachKey

        CVar -> ForEachVar
        "&" CVar -> ForEachVar

        ";" NL -> NullStatement

        "declare" "(" Directive* ")" NL Statement -> DeclareStatement

        Id -> Directive

        "try" NL Block Catch* -> TryStatement

        "catch" "(" Id TVariable ")" NL Block -> Catch

        "throw" Expr ";" NL -> ThrowStatement

        LogicalOrExpr -> Expr

        LogicalXorExpr OrLogicalXorExpr* -> LogicalOrExpr

        "or" LogicalXorExpr -> OrLogicalXorExpr

        LogicalAndExpr LogicalXorLogicalAndExpr* -> LogicalXorExpr

        "xor" LogicalAndExpr -> LogicalXorLogicalAndExpr

        AssignmentExpr LogicalAndAssignmentExpr* -> LogicalAndExpr

        "and" AssignmentExpr -> LogicalAndAssignmentExpr

        TernaryExpr AssignOpAssignmentExpr* -> AssignmentExpr

        AssignOp AssignmentExpr -> AssignOpAssignmentExpr

        ".=" -> AssignOp
        "=" -> AssignOp
        "+=" -> AssignOp
        "-=" -> AssignOp
        "*=" -> AssignOp
        "/=" -> AssignOp
        "%=" -> AssignOp
        "&=" -> AssignOp
        "|=" -> AssignOp
        "^=" -> AssignOp
        "<<=" -> AssignOp
        ">>=" -> AssignOp
        "=&" -> AssignOp

        ConditionalOrExpr IfConditionalOrExpr* -> TernaryExpr

        "?" Expr ":" Expr -> IfConditionalOrExpr

        ConditionalAndExpr ConditionalOrConditionalAndExpr* -> ConditionalOrExpr

        "||" ConditionalAndExpr -> ConditionalOrConditionalAndExpr

        BitOrExpr ConditionalAndBitOrExpr* -> ConditionalAndExpr

        "&&" BitOrExpr -> ConditionalAndBitOrExpr

        BitXorExpr BitOrBitXorExpr* -> BitOrExpr

        "|" BitXorExpr -> BitOrBitXorExpr

        BitAndExpr BitXorBitAndExpr* -> BitXorExpr

        "^" BitAndExpr -> BitXorBitAndExpr

        EqualityExpr BitAndEqualityExpr* -> BitAndExpr

        "&" EqualityExpr -> BitAndEqualityExpr

        InequalityExpr EqualityOpInequalityExpr* -> EqualityExpr

        EqualityOp InequalityExpr -> EqualityOpInequalityExpr

        "==" -> EqualityOp
        "!=" -> EqualityOp
        "===" -> EqualityOp
        "!==" -> EqualityOp

        ShiftExpr InequalityOpShiftExpr* -> InequalityExpr

        InequalityOp ShiftExpr -> InequalityOpShiftExpr

        "<>" -> InequalityOp
        "<" -> InequalityOp
        "<=" -> InequalityOp
        ">" -> InequalityOp
        ">=" -> InequalityOp

        CatExpr ShiftOpCatExpr* -> ShiftExpr

        ShiftOp CatExpr -> ShiftOpCatExpr

        "<<" -> ShiftOp
        ">>" -> ShiftOp

        AddExpr CatAddExpr* -> CatExpr

        "." AddExpr -> CatAddExpr

        MultExpr AddOpMultExpr* -> AddExpr

        AddOp MultExpr -> AddOpMultExpr

        "+" -> AddOp
        "-" -> AddOp

        NotExpr MultOpNotExpr* -> MultExpr

        MultOp NotExpr -> MultOpNotExpr

        "*" -> MultOp
        "/" -> MultOp
        "%" -> MultOp

        "!"* InstanceExpr -> NotExpr

        UnaryExpr InstanceOfUnaryExpr? -> InstanceExpr

        "instanceof" UnaryExpr -> InstanceOfUnaryExpr

        UnaryOp* IncDecExpr -> UnaryExpr

        "~" -> UnaryOp
        "-" -> UnaryOp
        "@" -> UnaryOp
        "(" CastType ")" -> UnaryOp
        "@" "!" -> UnaryOp

        "int" -> CastType
        "integer" -> CastType
        "bool" -> CastType
        "boolean" -> CastType
        "real" -> CastType
        "double" -> CastType
        "float" -> CastType
        "string" -> CastType
        "array" -> CastType
        "object" -> CastType
        "unset" -> CastType

        IncDec* Primary IncDec* -> IncDecExpr

        "++" -> IncDec
        "--" -> IncDec

        VariableOrFunctionCall -> Primary
        ScalarConstant -> Primary
        Array -> Primary
        List -> Primary
        InternalFunction -> Primary
        "(" Expr ")" -> Primary

        PlusMinus? NumericConstant -> ScalarConstant
        StringConstant -> ScalarConstant
        MagicConstant -> ScalarConstant
        BooleanConstant -> ScalarConstant
        "null" -> ScalarConstant

        "+" -> PlusMinus
        "-" -> PlusMinus

        Number -> NumericConstant
        Hexa -> NumericConstant
        Octa -> NumericConstant

        Stringlit -> StringConstant
        Charlit -> StringConstant
        CommandString -> StringConstant
        "<<<" Id (IN NL) EncapsedInlineHTML* Id EX -> StringConstant

        Tag-token-or-key -> EncapsedInlineHTML

        Id -> Popid

        Token -> Token-or-key
        Key -> Token-or-key

        "true" -> BooleanConstant
        "false" -> BooleanConstant

        Primary -> StaticScalar

        "array" "(" IN ArrayPair"," ","? EX ")" -> Array

        NL ArrayKey? ArrayValue -> ArrayPair

        Expr "=>" -> ArrayKey

        Expr -> ArrayValue
        "&" ObjectCVar -> ArrayValue

        ObjectCVar -> VariableOrFunctionCall

        ClassNameColonColon? CVar CallParams? ArrowObjectProperty* -> ObjectCVar

        ClassName "::" -> ClassNameColonColon

        "&"? Expr -> CallParam

        "(" CallParam"," ")" -> CallParams

        Id -> ClassName

        "->" ObjectProperty CallParams? -> ArrowObjectProperty

        VariableName -> ObjectProperty
        IdOrKey -> ObjectProperty
        ObjectProperty VariableExtension -> ObjectProperty
        ObjectCVar -> ObjectProperty

        ReferenceVariable -> CVar

        CompoundVariable VariableExtension* -> ReferenceVariable

        "[" Expr? "]" -> VariableExtension
        "{" Expr "}" -> VariableExtension

        VariableName -> CompoundVariable

        SimpleVariableName -> VariableName
        "$" VariableName -> VariableName
        "{" SimpleVariableName "}" -> VariableName
        "{" Expr "}" -> VariableName

        Id -> SimpleVariableName
        "$" SPOFF IdOrKey SPON -> SimpleVariableName

        Id -> IdOrKey
        Key -> IdOrKey

        "list" "(" ListElem"," ")" -> List

        List -> ListElem
        ObjectCVar -> ListElem
         -> ListElem

        "new" Primary -> InternalFunction
        "clone" Primary -> InternalFunction
        "isset" "(" ObjectCVar"," ")" -> InternalFunction
        "empty" "(" ObjectCVar ")" -> InternalFunction
        "intval" "(" ObjectCVar ")" -> InternalFunction
        "eval" "(" Expr ")" -> InternalFunction
        "exit" Exit-value? -> InternalFunction
        "include" Expr -> InternalFunction
        "include_once" Expr -> InternalFunction
        "require" Expr -> InternalFunction
        "require_once" Expr -> InternalFunction

        "(" Expr? ")" -> Exit-value
