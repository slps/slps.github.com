Program = program('begin' decls::Declarations body::Statement';' 'end') ;
IdType = idtype(id::Id ':' t::Type) ;
Statement = cond('if' cond::Expression 'then' thenPart::Statement';' 'else' elsePart::Statement';' 'fi') ;
Statement = assign(var::Id ':=' val::Expression) ;
Statement = cond('if' cond::Expression 'then' thenPart::Statement';' 'fi') ;
Statement = loop('while' cond::Expression 'do' body::Statement';' 'od') ;
Type = string'string' ;
Type = natural'natural' ;
Type = nil'nil-type' ;
Expression = '(' e::Expression ')' ;
Expression = natconnatcon::Natural ;
Expression = idname::Id ;
Expression = strconstring::String ;
Expression = concat(lhs::Expression '||' rhs::Expression) ;
Expression = add(lhs::Expression '+' rhs::Expression) ;
Expression = min(lhs::Expression '-' rhs::Expression) ;
Declarations = 'declare' decls::IdType',' ';' ;
