program:
        TROLLEY n1::CONSTID CONTAINS d1::(declaration*) CHECKOUT s1::statement DONE SEMI
declaration:
        constdec
        vardec
        procdec
constdec:
        CONST id1::CONSTID COLON t1::type ASSIGN a1::arithexp SEMI
vardec:
        VAR id1::ID COLON t1::type SEMI
procdec:
        PROC id1::ID LPAR p1::paralist RPAR COLON t1::type ASSIGN s1::statement
paralist:
        (parameter COMMA)* parameter
parameter:
        id1::ID COLON type
type:
        INTWORD
        DOUWORD
arithexp:
        connexp (QMARK connexp COLON connexp)?
connexp:
        c1::compexp (co1::compoperator c2::compexp)*
compexp:
        addsubexp (comparisonsymbol addsubexp)*
addsubexp:
        multidivexp ((ADD | SUB) multidivexp)*
multidivexp:
        expoexp ((MULTI | DIV) expoexp)*
expoexp:
        negateexp (EXPO negateexp)?
negateexp:
        SUB negateexp
        parexp
parexp:
        literal
        id2::CONSTID
        id1::ID
        LPAR arithexp RPAR
statement:
        LBRACE substatement* RBRACE SEMI
        substatement
substatement:
        SKIP SEMI
        assignment
        cond
        loop
assignment:
        id1::ID ASSIGN a1::arithexp SEMI
cond:
        IF a1::arithexp THEN s1::statement ELSE s2::statement
loop:
        WHILE a1::arithexp DO s1::statement
keyword:
        DONE
        TROLLEY
        CONTAINS
        CHECKOUT
        SKIP
        CONST
        PROC
        VAR
        IF
        THEN
        ELSE
        WHILE
        DO
        INTWORD
        DOUWORD
token:
        keyword
        WS
        identifier
        symbol
        COMMENT
        literal
        constantid
identifier:
        ID
constantid:
        CONSTID
symbol:
        syntaxsymbol
        operatorsymbol
        comparisonsymbol
syntaxsymbol:
        SEMI
        COLON
        COMMA
        LPAR
        RPAR
        ASSIGN
        QMARK
        LBRACE
        RBRACE
operatorsymbol:
        ADD
        SUB
        DIV
        MULTI
        EXPO
comparisonsymbol:
        EQUALS
        NOTEQ
        LT
        LTE
        GT
        GTE
compoperator:
        CONJUNCT
        DISJUNCT
literal:
        INT
        DOUBLE
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
INTWORD:
        "int"
DOUWORD:
        "double"
COMMENT:
        "/*" ANY* "*/"
INT:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE:
        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ (("e" | "E") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)?
COLON:
        ":"
COMMA:
        ","
SEMI:
        ";"
LPAR:
        "("
RPAR:
        ")"
ASSIGN:
        COLON "="
LBRACE:
        "{"
RBRACE:
        "}"
QMARK:
        "?"
ADD:
        "+"
SUB:
        "-"
DIV:
        "/"
MULTI:
        "*"
EXPO:
        "**"
EQUALS:
        "=="
NOTEQ:
        "!="
LT:
        "<"
LTE:
        "<="
GT:
        ">"
GTE:
        ">="
CONJUNCT:
        "/\\"
DISJUNCT:
        "\\/"
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
