program = TROLLEY CID CONTAINS (declarations SEMI)* statements DONE SEMI ;
declarations = constDec ;
declarations = varDec ;
declarations = procDec ;
constDec = CONST CID COLON types ASSI expr ;
varDec = VAR id COLON types ;
procDec = PROC ID OPAR paramlist CPAR COLON types ASSI statement ;
statements = CHECKOUT statement SEMI ;
statement = assignment ;
statement = conditional ;
statement = loops ;
statement = grstatement ;
statement = SKIP ;
conditional = IF boolExpr THEN statement ELSE statement ;
assignment = id ASSI expr ;
grstatement = OCB statement (SEMI statement)* CCB ;
loops = WHILE boolExpr DO statement ;
paramlist = (ID COLON types)? (COM ID COLON types)* ;
expr = boolExpr (MIXFIX expr COLON expr)? ;
boolExpr = andExpr (DISJ andExpr)* ;
andExpr = compExpr (CONJ compExpr)* ;
compExpr = plusexpr ((GT | LT | GTE | LTE | EQ | NEQ) plusexpr)? ;
plusexpr = multExpr ((PLUS | MINUS) multExpr)* ;
multExpr = expExp ((MULTI | DIV) expExp)* ;
expExp = atom (EXP atom)* ;
atom = INTG ;
atom = DOUBLE ;
atom = ID arglist? ;
atom = CID arglist? ;
atom = OPAR expr CPAR ;
arglist = OPAR (expr (COM expr)*)? CPAR ;
comment = COMMENT ;
types = TYPEI ;
types = TYPED ;
id = ID ;
id = CID ;
DOUBLE = ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* (('e' | 'E') INTG)? ;
INTG = ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
EXP = '**' ;
COLON = ':' ;
PLUS = '+' ;
MINUS = '-' ;
MULTI = '*' ;
DIV = '/' ;
COM = ',' ;
ASSI = ':=' ;
EQ = '==' ;
NEQ = '!=' ;
LT = '<' ;
LTE = '<=' ;
GT = '>' ;
GTE = '>=' ;
CONJ = '/\\' ;
DISJ = '\\/' ;
COMMENT = '/*' ANY* '*/' ;
OPAR = '(' ;
CPAR = ')' ;
OCB = '{' ;
CCB = '}' ;
SEMI = ';' ;
MIXFIX = '?' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
PROC = 'proc' ;
VAR = 'var' ;
TYPEI = 'int' ;
TYPED = 'double' ;
CONST = 'const' ;
CID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
