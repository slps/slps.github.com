module Main

exports
  sorts
        Program Declarations ConstDec VarDec ProcDec Statements Statement Conditional Assignment Grstatement Loops Paramlist Expr BoolExpr AndExpr CompExpr Plusexpr MultExpr ExpExp Atom Arglist Comment Types Id DOUBLE INTG EXP COLON PLUS MINUS MULTI DIV COM ASSI EQ NEQ LT LTE GT GTE CONJ DISJ COMMENT OPAR CPAR OCB CCB SEMI MIXFIX IF THEN ELSE WHILE DO DONE SKIP TROLLEY CHECKOUT CONTAINS PROC VAR TYPEI TYPED CONST CID ID WS 
  context-free syntax
        TROLLEY CID CONTAINS (Declarations SEMI)* Statements DONE SEMI -> Program

        ConstDec -> Declarations
        VarDec -> Declarations
        ProcDec -> Declarations

        CONST CID COLON Types ASSI Expr -> ConstDec

        VAR Id COLON Types -> VarDec

        PROC ID OPAR Paramlist CPAR COLON Types ASSI Statement -> ProcDec

        CHECKOUT Statement SEMI -> Statements

        Assignment -> Statement
        Conditional -> Statement
        Loops -> Statement
        Grstatement -> Statement
        SKIP -> Statement

        IF BoolExpr THEN Statement ELSE Statement -> Conditional

        Id ASSI Expr -> Assignment

        OCB Statement (SEMI Statement)* CCB -> Grstatement

        WHILE BoolExpr DO Statement -> Loops

        (ID COLON Types)? (COM ID COLON Types)* -> Paramlist

        BoolExpr (MIXFIX Expr COLON Expr)? -> Expr

        AndExpr (DISJ AndExpr)* -> BoolExpr

        CompExpr (CONJ CompExpr)* -> AndExpr

        Plusexpr ((GT | LT | GTE | LTE | EQ | NEQ) Plusexpr)? -> CompExpr

        MultExpr ((PLUS | MINUS) MultExpr)* -> Plusexpr

        ExpExp ((MULTI | DIV) ExpExp)* -> MultExpr

        Atom (EXP Atom)* -> ExpExp

        INTG -> Atom
        DOUBLE -> Atom
        ID Arglist? -> Atom
        CID Arglist? -> Atom
        OPAR Expr CPAR -> Atom

        OPAR (Expr (COM Expr)*)? CPAR -> Arglist

        COMMENT -> Comment

        TYPEI -> Types
        TYPED -> Types

        ID -> Id
        CID -> Id

        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INTG)? -> DOUBLE

        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INTG

        "**" -> EXP

        ":" -> COLON

        "+" -> PLUS

        "-" -> MINUS

        "*" -> MULTI

        "/" -> DIV

        "," -> COM

        ":=" -> ASSI

        "==" -> EQ

        "!=" -> NEQ

        "<" -> LT

        "<=" -> LTE

        ">" -> GT

        ">=" -> GTE

        "/\\" -> CONJ

        "\\/" -> DISJ

        "/*" ANY* "*/" -> COMMENT

        "(" -> OPAR

        ")" -> CPAR

        "{" -> OCB

        "}" -> CCB

        ";" -> SEMI

        "?" -> MIXFIX

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "proc" -> PROC

        "var" -> VAR

        "int" -> TYPEI

        "double" -> TYPED

        "const" -> CONST

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        (" " | "\t" | "\r" | "\n")+ -> WS
