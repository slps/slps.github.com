prog = header decl mainStat ;
header = TROLLEY CONST_ID CONTAINS ;
decl = (constDecl | varDecl | procDecl)* ;
constDecl = CONST CONST_ID COLON type DEFINED_AS arithmeticExpr SEMI ;
varDecl = VAR VAR_ID COLON type SEMI ;
procDecl = PROC VAR_ID LPAR parameter? RPAR COLON type DEFINED_AS stat ;
parameter = i::VAR_ID COLON t::type (COMMA parameter)* ;
mainStat = CHECKOUT stat DONE SEMI ;
stat = skip ;
stat = assign ;
stat = cond ;
stat = loop ;
stat = LCURLYPAR stat* RCURLYPAR SEMI ;
skip = SKIP SEMI ;
assign = VAR_ID DEFINED_AS arithmeticExpr SEMI ;
cond = IF LPAR b::booleanExpr RPAR THEN ts::stat (ELSE es::stat)? ;
loop = WHILE LPAR b::booleanExpr RPAR DO s::stat ;
arithmeticExpr = exprLevel1 ((PLUS | MINUS) exprLevel1)* ;
exprLevel1 = expExpr ((MULTIPLY | DIVIDE) expExpr)* ;
expExpr = unaryExpr (EXPONENTIATE unaryExpr)* ;
unaryExpr = MINUS atom ;
unaryExpr = PLUS atom ;
unaryExpr = atom ;
atom = INT ;
atom = DOUBLE ;
atom = CONST_ID ;
atom = VAR_ID ;
atom = LPAR bracketedExpr RPAR ;
atom = procApply ;
bracketedExpr = condExpr ;
bracketedExpr = arithmeticExpr ;
condExpr = testPart e1::arithmeticExpr COLON e2::arithmeticExpr ;
testPart = booleanExpr CONDITION ;
procApply = VAR_ID LPAR args? RPAR ;
args = arithmeticExpr (COMMA arithmeticExpr)* ;
booleanExpr = conjunctionExpr (OR conjunctionExpr)* ;
conjunctionExpr = booleanAtom (AND booleanAtom)* ;
booleanAtom = arithmeticExpr booleanOperator arithmeticExpr ;
booleanAtom = LPAR booleanExpr RPAR ;
booleanOperator = EQUAL ;
booleanOperator = NOT_EQUAL ;
booleanOperator = GREATER ;
booleanOperator = GREATER_EQUAL ;
booleanOperator = LESS ;
booleanOperator = LESS_EQUAL ;
type = INT_TYPE ;
type = DOUBLE_TYPE ;
EXPONENT = ('e' | 'E') ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DIGIT = '0' ;
DIGIT = '1' ;
DIGIT = '2' ;
DIGIT = '3' ;
DIGIT = '4' ;
DIGIT = '5' ;
DIGIT = '6' ;
DIGIT = '7' ;
DIGIT = '8' ;
DIGIT = '9' ;
SEMI = ';' ;
COLON = ':' ;
COMMA = ',' ;
CONDITION = '?' ;
LPAR = '(' ;
RPAR = ')' ;
LCURLYPAR = '{' ;
RCURLYPAR = '}' ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
CONST = 'const' ;
VAR = 'var' ;
PROC = 'proc' ;
INT_TYPE = 'int' ;
DOUBLE_TYPE = 'double' ;
INT = DIGIT+ ;
DOUBLE = DIGIT* '.' DIGIT* EXPONENT? ;
PLUS = '+' ;
MINUS = '-' ;
MULTIPLY = '*' ;
DIVIDE = '/' ;
EXPONENTIATE = '**' ;
AND = '/\\' ;
OR = '\\/' ;
DEFINED_AS = ':=' ;
EQUAL = '==' ;
NOT_EQUAL = '!=' ;
GREATER = '>' ;
GREATER_EQUAL = '>=' ;
LESS = '<' ;
LESS_EQUAL = '<=' ;
CONST_ID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | DIGIT | '_')* ;
VAR_ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | DIGIT | '_')* ;
WS = (' ' | '\t' | '\r' | '\n' | '\u000C')+ ;
COMMENT = '/*' ANY* '*/' ;
