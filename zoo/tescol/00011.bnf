program:
        TROLLEY CONSTID CONTAINS declarations CHECKOUT statement? SEMI? DONE SEMI
declarations:
        (constdeclaration | vardeclaration | procdeclaration)*
constdeclaration:
        CONST CONSTID COLON type ASSIGN expression SEMI
vardeclaration:
        VAR identifier COLON type SEMI
procdeclaration:
        PROC ID OPARAN paramlist? CPARAN COLON type ASSIGN statement SEMI
paramlist:
        param (COMMA param)*
param:
        ID COLON type
type:
        INTTYPE
        DOUBLETYPE
expression:
        atom ((operator expression) | (MIXFIX l::expression COLON r::expression) | (OPARAN functionparamlist CPARAN) | EPSILON)
functionparamlist:
        expression (COMMA expression)*
atom:
        literal
        identifier
        OPARAN expression CPARAN
operator:
        arithmeticoperator
        booleanoperator
arithmeticoperator:
        ADDITION
        SUBTRACT
        DIVISION
        MULTIPLY
        EXP
booleanoperator:
        EQUAL
        NONEQUAL
        LESS
        LESSEQUAL
        MORE
        MOREEQUAL
        CONJUNCTION
        DISJUNCTION
statement:
        SKIP SEMI
        assignmentstatement SEMI
        whilestatement
        ifstatement
        OBRACE statement+ CBRACE
identifier:
        ID
        CONSTID
assignmentstatement:
        identifier ASSIGN expression
ifstatement:
        IF expression THEN s1::statement ((ELSE s2::statement) | EPSILON)
whilestatement:
        WHILE expression DO statement
literal:
        INT
        DOUBLE
SEMI:
        ";"
COLON:
        ":"
OBRACE:
        "{"
CBRACE:
        "}"
ASSIGN:
        ":="
OPARAN:
        "("
CPARAN:
        ")"
COMMA:
        ","
MIXFIX:
        "?"
ADDITION:
        "+"
SUBTRACT:
        "-"
DIVISION:
        "/"
MULTIPLY:
        "*"
EXP:
        "**"
EQUAL:
        "=="
NONEQUAL:
        "!="
LESS:
        "<"
LESSEQUAL:
        "<="
MORE:
        ">"
MOREEQUAL:
        ">="
CONJUNCTION:
        "/\\"
DISJUNCTION:
        "\\/"
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
WHILE:
        "while"
DO:
        "do"
VAR:
        "var"
PROC:
        "proc"
CONST:
        "const"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
INTTYPE:
        "int"
DOUBLETYPE:
        "double"
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
COMMENT:
        "/*" ANY* "*/"
INT:
        ("+" | "-")? ("0" | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*))
DOUBLE:
        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT)?
