program = TROLLEY CONSTID CONTAINS declarations CHECKOUT statement? SEMI? DONE SEMI ;
declarations = (constdeclaration | vardeclaration | procdeclaration)* ;
constdeclaration = CONST CONSTID COLON type ASSIGN expression SEMI ;
vardeclaration = VAR IDENTIFIER COLON type SEMI ;
procdeclaration = PROC ID OPARAN paramlist? CPARAN COLON type ASSIGN statement SEMI ;
paramlist = param (COMMA param)* ;
param = ID COLON type ;
type = INTTYPE ;
type = DOUBLETYPE ;
expression = atom ((operator expression) | (MIXFIX l::expression COLON r::expression) | (OPARAN functionparamlist CPARAN) | ) ;
functionparamlist = expression (COMMA expression)* ;
atom = literal ;
atom = IDENTIFIER ;
atom = OPARAN expression CPARAN ;
operator = arithmeticoperator ;
operator = booleanoperator ;
arithmeticoperator = ADDITION ;
arithmeticoperator = SUBTRACT ;
arithmeticoperator = DIVISION ;
arithmeticoperator = MULTIPLY ;
arithmeticoperator = EXP ;
booleanoperator = EQUAL ;
booleanoperator = NONEQUAL ;
booleanoperator = LESS ;
booleanoperator = LESSEQUAL ;
booleanoperator = MORE ;
booleanoperator = MOREEQUAL ;
booleanoperator = CONJUNCTION ;
booleanoperator = DISJUNCTION ;
statement = SKIP SEMI ;
statement = assignmentstatement SEMI ;
statement = whilestatement ;
statement = ifstatement ;
statement = OBRACE statement+ CBRACE ;
identifier = ID ;
identifier = CONSTID ;
assignmentstatement = IDENTIFIER ASSIGN expression ;
ifstatement = IF expression THEN s1::statement ((ELSE s2::statement) | ) ;
whilestatement = WHILE expression DO statement ;
literal = INT ;
literal = DOUBLE ;
SEMI = ';' ;
COLON = ':' ;
OBRACE = '{' ;
CBRACE = '}' ;
ASSIGN = ':=' ;
OPARAN = '(' ;
CPARAN = ')' ;
COMMA = ',' ;
MIXFIX = '?' ;
ADDITION = '+' ;
SUBTRACT = '-' ;
DIVISION = '/' ;
MULTIPLY = '*' ;
EXP = '**' ;
EQUAL = '==' ;
NONEQUAL = '!=' ;
LESS = '<' ;
LESSEQUAL = '<=' ;
MORE = '>' ;
MOREEQUAL = '>=' ;
CONJUNCTION = '/\\' ;
DISJUNCTION = '\\/' ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
WHILE = 'while' ;
DO = 'do' ;
VAR = 'var' ;
PROC = 'proc' ;
CONST = 'const' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
INTTYPE = 'int' ;
DOUBLETYPE = 'double' ;
CONSTID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
COMMENT = '/*' ANY* '*/' ;
INT = ('+' | '-')? ('0' | (('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')*)) ;
DOUBLE = INT? '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* ('e' INT)? ;
