module Main

exports
  sorts
        Program Declarations Constdeclaration Vardeclaration Procdeclaration Paramlist Param Type Expression Functionparamlist Atom Operator Arithmeticoperator Booleanoperator Statement Identifier Assignmentstatement Ifstatement Whilestatement Literal SEMI COLON OBRACE CBRACE ASSIGN OPARAN CPARAN COMMA MIXFIX ADDITION SUBTRACT DIVISION MULTIPLY EXP EQUAL NONEQUAL LESS LESSEQUAL MORE MOREEQUAL CONJUNCTION DISJUNCTION DONE SKIP TROLLEY CHECKOUT CONTAINS WHILE DO VAR PROC CONST IF THEN ELSE INTTYPE DOUBLETYPE CONSTID ID WS COMMENT INT DOUBLE 
  context-free syntax
        TROLLEY CONSTID CONTAINS Declarations CHECKOUT Statement? SEMI? DONE SEMI -> Program

        (Constdeclaration | Vardeclaration | Procdeclaration)* -> Declarations

        CONST CONSTID COLON Type ASSIGN Expression SEMI -> Constdeclaration

        VAR Identifier COLON Type SEMI -> Vardeclaration

        PROC ID OPARAN Paramlist? CPARAN COLON Type ASSIGN Statement SEMI -> Procdeclaration

        Param (COMMA Param)* -> Paramlist

        ID COLON Type -> Param

        INTTYPE -> Type
        DOUBLETYPE -> Type

        Atom ((Operator Expression) | (MIXFIX l::Expression COLON r::Expression) | (OPARAN Functionparamlist CPARAN) | ) -> Expression

        Expression (COMMA Expression)* -> Functionparamlist

        Literal -> Atom
        Identifier -> Atom
        OPARAN Expression CPARAN -> Atom

        Arithmeticoperator -> Operator
        Booleanoperator -> Operator

        ADDITION -> Arithmeticoperator
        SUBTRACT -> Arithmeticoperator
        DIVISION -> Arithmeticoperator
        MULTIPLY -> Arithmeticoperator
        EXP -> Arithmeticoperator

        EQUAL -> Booleanoperator
        NONEQUAL -> Booleanoperator
        LESS -> Booleanoperator
        LESSEQUAL -> Booleanoperator
        MORE -> Booleanoperator
        MOREEQUAL -> Booleanoperator
        CONJUNCTION -> Booleanoperator
        DISJUNCTION -> Booleanoperator

        SKIP SEMI -> Statement
        Assignmentstatement SEMI -> Statement
        Whilestatement -> Statement
        Ifstatement -> Statement
        OBRACE Statement+ CBRACE -> Statement

        ID -> Identifier
        CONSTID -> Identifier

        Identifier ASSIGN Expression -> Assignmentstatement

        IF Expression THEN s1::Statement ((ELSE s2::Statement) | ) -> Ifstatement

        WHILE Expression DO Statement -> Whilestatement

        INT -> Literal
        DOUBLE -> Literal

        ";" -> SEMI

        ":" -> COLON

        "{" -> OBRACE

        "}" -> CBRACE

        ":=" -> ASSIGN

        "(" -> OPARAN

        ")" -> CPARAN

        "," -> COMMA

        "?" -> MIXFIX

        "+" -> ADDITION

        "-" -> SUBTRACT

        "/" -> DIVISION

        "*" -> MULTIPLY

        "**" -> EXP

        "==" -> EQUAL

        "!=" -> NONEQUAL

        "<" -> LESS

        "<=" -> LESSEQUAL

        ">" -> MORE

        ">=" -> MOREEQUAL

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "while" -> WHILE

        "do" -> DO

        "var" -> VAR

        "proc" -> PROC

        "const" -> CONST

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "int" -> INTTYPE

        "double" -> DOUBLETYPE

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CONSTID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        (" " | "\t" | "\r" | "\n")+ -> WS

        "/*" ANY* "*/" -> COMMENT

        ("+" | "-")? ("0" | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)) -> INT

        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT)? -> DOUBLE
