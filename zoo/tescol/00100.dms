program = TROLLEY CID CONTAINS declarations CHECKOUT statements DONE SEMI EOF ;
type = INT ;
type = DOUBLE ;
relational = EQUALITY ;
relational = NON_EQUALITY ;
relational = LESS ;
relational = LESS_EQUAL ;
relational = GREATER_EQUAL ;
relational = GREATER ;
declarations = (constant | variable | procedure)* ;
constant = CONST CID COLON type COLON_EQUALS expression SEMI ;
variable = VAR ID COLON type SEMI ;
parameter = (ID COLON type)* ;
parameters = parameter (COMMA parameter)* ;
procedure = PROC ID LPAREN parameters RPAREN COLON type COLON_EQUALS statements ;
atom = INT_NUMBER ;
atom = DOUBLE_NUMBER ;
atom = ID ;
atom = CID ;
atom = procedureApp ;
atom = LPAREN expression RPAREN ;
negation = '-' ;
sign = ('+' | negation)? atom ;
expOperand = EXPONENTIATION ;
multOperand = MULTIPLICATION ;
multOperand = DIVISION ;
addOperand = ADDITION ;
addOperand = SUBTRACTION ;
orderExpr = sign (expOperand sign)? ;
multExpr = orderExpr (multOperand orderExpr)* ;
aritExpr = multExpr (addOperand multExpr)* ;
realParameters = aritExpr (COMMA aritExpr)* ;
procedureApp = ID LPAREN realParameters? RPAREN ;
booleanExpression = aritExpr (relational aritExpr)? ;
booleanConj = booleanExpression (CONJUNCTION booleanExpression)* ;
booleanDisj = booleanConj (DISJUNCTION booleanConj)* ;
condExpr = booleanDisj (QUESTION aritExpr COLON aritExpr)? ;
expression = condExpr ;
skip = SKIP SEMI ;
assignment = ID COLON_EQUALS expression SEMI ;
ifStat = IF expression THEN statements ELSE statements ;
loop = WHILE expression DO statements ;
statement = skip ;
statement = assignment ;
statement = ifStat ;
statement = loop ;
groupStatement = LBRACE statement+ RBRACE SEMI ;
statements = statement ;
statements = groupStatement ;
SEMI = ';' ;
COMMA = ',' ;
COLON = ':' ;
QUESTION = '?' ;
EQUALITY = '==' ;
NON_EQUALITY = '!=' ;
LESS = '<' ;
LESS_EQUAL = '<=' ;
GREATER_EQUAL = '>=' ;
GREATER = '>' ;
CONJUNCTION = '/\\' ;
DISJUNCTION = '\\/' ;
COLON_EQUALS = ':=' ;
ADDITION = '+' ;
SUBTRACTION = '-' ;
DIVISION = '/' ;
MULTIPLICATION = '*' ;
EXPONENTIATION = '**' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
DONE = 'done' ;
TROLLEY = 'trolley' ;
CONTAINS = 'contains' ;
SKIP = 'skip' ;
CHECKOUT = 'checkout' ;
INT = 'int' ;
DOUBLE = 'double' ;
CONST = 'const' ;
VAR = 'var' ;
PROC = 'proc' ;
LBRACE = '{' ;
RBRACE = '}' ;
LPAREN = '(' ;
RPAREN = ')' ;
INT_NUMBER = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLE_NUMBER = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* (('e' | 'E') INT_NUMBER)? ;
CID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n' | '\f')+ ;
COMMENT = '/*' ANY* '*/' ;
EOF = ;
