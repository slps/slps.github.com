module Main

exports
  sorts
        Program Type Relational Declarations Constant Variable Parameter Parameters Procedure Atom Negation Sign ExpOperand MultOperand AddOperand OrderExpr MultExpr AritExpr RealParameters ProcedureApp BooleanExpression BooleanConj BooleanDisj CondExpr Expression Skip Assignment IfStat Loop Statement GroupStatement Statements SEMI COMMA COLON QUESTION EQUALITY NON-EQUALITY LESS LESS-EQUAL GREATER-EQUAL GREATER CONJUNCTION DISJUNCTION COLON-EQUALS ADDITION SUBTRACTION DIVISION MULTIPLICATION EXPONENTIATION IF THEN ELSE WHILE DO DONE TROLLEY CONTAINS SKIP CHECKOUT INT DOUBLE CONST VAR PROC LBRACE RBRACE LPAREN RPAREN INT-NUMBER DOUBLE-NUMBER CID ID WS COMMENT EOF 
  context-free syntax
        TROLLEY CID CONTAINS Declarations CHECKOUT Statements DONE SEMI EOF -> Program

        INT -> Type
        DOUBLE -> Type

        EQUALITY -> Relational
        NON-EQUALITY -> Relational
        LESS -> Relational
        LESS-EQUAL -> Relational
        GREATER-EQUAL -> Relational
        GREATER -> Relational

        (Constant | Variable | Procedure)* -> Declarations

        CONST CID COLON Type COLON-EQUALS Expression SEMI -> Constant

        VAR ID COLON Type SEMI -> Variable

        (ID COLON Type)* -> Parameter

        Parameter (COMMA Parameter)* -> Parameters

        PROC ID LPAREN Parameters RPAREN COLON Type COLON-EQUALS Statements -> Procedure

        INT-NUMBER -> Atom
        DOUBLE-NUMBER -> Atom
        ID -> Atom
        CID -> Atom
        ProcedureApp -> Atom
        LPAREN Expression RPAREN -> Atom

        "-" -> Negation

        ("+" | Negation)? Atom -> Sign

        EXPONENTIATION -> ExpOperand

        MULTIPLICATION -> MultOperand
        DIVISION -> MultOperand

        ADDITION -> AddOperand
        SUBTRACTION -> AddOperand

        Sign (ExpOperand Sign)? -> OrderExpr

        OrderExpr (MultOperand OrderExpr)* -> MultExpr

        MultExpr (AddOperand MultExpr)* -> AritExpr

        AritExpr (COMMA AritExpr)* -> RealParameters

        ID LPAREN RealParameters? RPAREN -> ProcedureApp

        AritExpr (Relational AritExpr)? -> BooleanExpression

        BooleanExpression (CONJUNCTION BooleanExpression)* -> BooleanConj

        BooleanConj (DISJUNCTION BooleanConj)* -> BooleanDisj

        BooleanDisj (QUESTION AritExpr COLON AritExpr)? -> CondExpr

        CondExpr -> Expression

        SKIP SEMI -> Skip

        ID COLON-EQUALS Expression SEMI -> Assignment

        IF Expression THEN Statements ELSE Statements -> IfStat

        WHILE Expression DO Statements -> Loop

        Skip -> Statement
        Assignment -> Statement
        IfStat -> Statement
        Loop -> Statement

        LBRACE Statement+ RBRACE SEMI -> GroupStatement

        Statement -> Statements
        GroupStatement -> Statements

        ";" -> SEMI

        "," -> COMMA

        ":" -> COLON

        "?" -> QUESTION

        "==" -> EQUALITY

        "!=" -> NON-EQUALITY

        "<" -> LESS

        "<=" -> LESS-EQUAL

        ">=" -> GREATER-EQUAL

        ">" -> GREATER

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        ":=" -> COLON-EQUALS

        "+" -> ADDITION

        "-" -> SUBTRACTION

        "/" -> DIVISION

        "*" -> MULTIPLICATION

        "**" -> EXPONENTIATION

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        "done" -> DONE

        "trolley" -> TROLLEY

        "contains" -> CONTAINS

        "skip" -> SKIP

        "checkout" -> CHECKOUT

        "int" -> INT

        "double" -> DOUBLE

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "{" -> LBRACE

        "}" -> RBRACE

        "(" -> LPAREN

        ")" -> RPAREN

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT-NUMBER

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INT-NUMBER)? -> DOUBLE-NUMBER

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        (" " | "\t" | "\r" | "\n" | "\f")+ -> WS

        "/*" ANY* "*/" -> COMMENT

         -> EOF
