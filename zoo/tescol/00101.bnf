program:
        stat
stat:
        header CHECKOUT body done
header:
        TROLLEY CONSTID CONTAINS header_declaration*
body:
        statement SEMICOLON
done:
        DONE SEMICOLON
statement:
        statement_main
        OPENCURL statement_main (SEMICOLON statement_main)* CLOSECURL
statement_main:
        SKIP
        if_statement
        while_statement
        assignment
if_statement:
        IF expr THEN a::statement ELSE b::statement
while_statement:
        WHILE expr DO statement
assignment:
        id DEFINEDAS expr
header_declaration:
        const_dec
        var_dec
        proc_dec
const_dec:
        CONST CONSTID COLON types DEFINEDAS expr SEMICOLON
var_dec:
        VAR id COLON types SEMICOLON
proc_dec:
        PROC id parameter_list COLON types DEFINEDAS statement SEMICOLON
parameter_list:
        OPENPAR parameter_list_inside? CLOSEPAR
parameter_list_inside:
        parameter_element (COMMA parameter_element)*
parameter_element:
        ID COLON types
expr:
        a::boolean_expr (MIXFIX b::expr COLON c::expr)?
boolean_expr:
        boolean_OR
boolean_OR:
        a::boolean_AND (OR b::boolean_AND)*
boolean_AND:
        a::boolean_predicate (AND b::boolean_predicate)*
boolean_predicate:
        a::arith_expr (relationals b::arith_expr)?
arith_expr:
        arith_addsub
arith_addsub:
        a::arith_muldiv ((ADDITION | SUBTRACTION) b::arith_muldiv)*
arith_muldiv:
        a::arith_expo ((MULTIPLICATION | DIVISION) b::arith_expo)*
arith_expo:
        a::arith_atom (EXPONENTIAL b::arith_atom)*
arith_atom:
        (ADDITION | SUBTRACTION)? number
        id
        OPENPAR expr CLOSEPAR
        proc_call
proc_call:
        id OPENPAR (a::expr (COMMA b::expr)*)? CLOSEPAR
SEMICOLON:
        ";"
COLON:
        ":"
DEFINEDAS:
        ":="
OPENPAR:
        "("
CLOSEPAR:
        ")"
OPENCURL:
        "{"
CLOSECURL:
        "}"
COMMA:
        ","
ADDITION:
        "+"
SUBTRACTION:
        "-"
DIVISION:
        "/"
EXPONENTIAL:
        "**"
MULTIPLICATION:
        "*"
MIXFIX:
        "?"
relationals:
        EQUALITY
        NON_EQUALITY
        L_THAN
        LE_THAN
        G_THAN
        GE_THAN
EQUALITY:
        "=="
NON_EQUALITY:
        "!="
L_THAN:
        "<"
LE_THAN:
        "<="
G_THAN:
        ">"
GE_THAN:
        ">="
logical:
        AND
        OR
AND:
        "/\\"
OR:
        "\\/"
COMMENT_BLOCK:
        "/*" ANY* "*/"
TROLLEY:
        "trolley"
CONTAINS:
        "contains"
CHECKOUT:
        "checkout"
DONE:
        "done"
SKIP:
        "skip"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
types:
        INTEGER
        DOUBLE
INTEGER:
        "int"
DOUBLE:
        "double"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
WS:
        (" " | "\t" | "\r" | "\n")+
number:
        INT_VAL
        DOUBLE_VAL
INT_VAL:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE_VAL:
        INT_VAL? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") ("+" | "-")? INT_VAL)?
id:
        ID
        CONSTID
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
