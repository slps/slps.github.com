module Main

exports
  sorts
        Program Stat Header Body Done Statement Statement-main If-statement While-statement Assignment Header-declaration Const-dec Var-dec Proc-dec Parameter-list Parameter-list-inside Parameter-element Expr Boolean-expr Boolean-OR Boolean-AND Boolean-predicate Arith-expr Arith-addsub Arith-muldiv Arith-expo Arith-atom Proc-call SEMICOLON COLON DEFINEDAS OPENPAR CLOSEPAR OPENCURL CLOSECURL COMMA ADDITION SUBTRACTION DIVISION EXPONENTIAL MULTIPLICATION MIXFIX Relationals EQUALITY NON-EQUALITY L-THAN LE-THAN G-THAN GE-THAN Logical AND OR COMMENT-BLOCK TROLLEY CONTAINS CHECKOUT DONE SKIP IF THEN ELSE WHILE DO Types INTEGER DOUBLE CONST VAR PROC WS Number INT-VAL DOUBLE-VAL Id CONSTID ID 
  context-free syntax
        Stat -> Program

        Header CHECKOUT Body Done -> Stat

        TROLLEY CONSTID CONTAINS Header-declaration* -> Header

        Statement SEMICOLON -> Body

        DONE SEMICOLON -> Done

        Statement-main -> Statement
        OPENCURL Statement-main (SEMICOLON Statement-main)* CLOSECURL -> Statement

        SKIP -> Statement-main
        If-statement -> Statement-main
        While-statement -> Statement-main
        Assignment -> Statement-main

        IF Expr THEN a::Statement ELSE b::Statement -> If-statement

        WHILE Expr DO Statement -> While-statement

        Id DEFINEDAS Expr -> Assignment

        Const-dec -> Header-declaration
        Var-dec -> Header-declaration
        Proc-dec -> Header-declaration

        CONST CONSTID COLON Types DEFINEDAS Expr SEMICOLON -> Const-dec

        VAR Id COLON Types SEMICOLON -> Var-dec

        PROC Id Parameter-list COLON Types DEFINEDAS Statement SEMICOLON -> Proc-dec

        OPENPAR Parameter-list-inside? CLOSEPAR -> Parameter-list

        Parameter-element (COMMA Parameter-element)* -> Parameter-list-inside

        ID COLON Types -> Parameter-element

        a::Boolean-expr (MIXFIX b::Expr COLON c::Expr)? -> Expr

        Boolean-OR -> Boolean-expr

        a::Boolean-AND (OR b::Boolean-AND)* -> Boolean-OR

        a::Boolean-predicate (AND b::Boolean-predicate)* -> Boolean-AND

        a::Arith-expr (Relationals b::Arith-expr)? -> Boolean-predicate

        Arith-addsub -> Arith-expr

        a::Arith-muldiv ((ADDITION | SUBTRACTION) b::Arith-muldiv)* -> Arith-addsub

        a::Arith-expo ((MULTIPLICATION | DIVISION) b::Arith-expo)* -> Arith-muldiv

        a::Arith-atom (EXPONENTIAL b::Arith-atom)* -> Arith-expo

        (ADDITION | SUBTRACTION)? Number -> Arith-atom
        Id -> Arith-atom
        OPENPAR Expr CLOSEPAR -> Arith-atom
        Proc-call -> Arith-atom

        Id OPENPAR (a::Expr (COMMA b::Expr)*)? CLOSEPAR -> Proc-call

        ";" -> SEMICOLON

        ":" -> COLON

        ":=" -> DEFINEDAS

        "(" -> OPENPAR

        ")" -> CLOSEPAR

        "{" -> OPENCURL

        "}" -> CLOSECURL

        "," -> COMMA

        "+" -> ADDITION

        "-" -> SUBTRACTION

        "/" -> DIVISION

        "**" -> EXPONENTIAL

        "*" -> MULTIPLICATION

        "?" -> MIXFIX

        EQUALITY -> Relationals
        NON-EQUALITY -> Relationals
        L-THAN -> Relationals
        LE-THAN -> Relationals
        G-THAN -> Relationals
        GE-THAN -> Relationals

        "==" -> EQUALITY

        "!=" -> NON-EQUALITY

        "<" -> L-THAN

        "<=" -> LE-THAN

        ">" -> G-THAN

        ">=" -> GE-THAN

        AND -> Logical
        OR -> Logical

        "/\\" -> AND

        "\\/" -> OR

        "/*" ANY* "*/" -> COMMENT-BLOCK

        "trolley" -> TROLLEY

        "contains" -> CONTAINS

        "checkout" -> CHECKOUT

        "done" -> DONE

        "skip" -> SKIP

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        INTEGER -> Types
        DOUBLE -> Types

        "int" -> INTEGER

        "double" -> DOUBLE

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        (" " | "\t" | "\r" | "\n")+ -> WS

        INT-VAL -> Number
        DOUBLE-VAL -> Number

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT-VAL

        INT-VAL? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") ("+" | "-")? INT-VAL)? -> DOUBLE-VAL

        ID -> Id
        CONSTID -> Id

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CONSTID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID
