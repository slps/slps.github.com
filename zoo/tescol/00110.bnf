program:
        TROLLEY CONST_ID CONTAINS declarations* CHECKOUT statement* SEMI DONE SEMI
term:
        LEFT_PAREN expression RIGHT_PAREN
        procedureApplication
        v2::VAR_ID
        CONST_ID
        INTEGER
        DOUBLE
unary:
        (PLUS | MINUS)* term
mult:
        unary ((MULT | DIV | EXPON) unary)*
add:
        mult ((PLUS | MINUS) mult)*
condExpr:
        add (Q_MARK add COLON add)?
relational:
        condExpr ((EQUALITY | NOT_EQUAL | LESS_THAN | LESS_THAN_OR_EQUAL | GREATER_THAN | GREATER_THAN_OR_EQUAL) condExpr)*
conjunction:
        relational (CONJ relational)*
expression:
        conjunction (DISJUNCT conjunction)*
procedureApplication:
        VAR_ID LEFT_PAREN p::procedureParams RIGHT_PAREN
procedureParams:
        expression (COMMA expression)*
declarations:
        constantDeclaration
        variableDeclaration
        procedureDeclaration
constantDeclaration:
        CONST CONST_ID COLON TYPE DEFINE_AS add SEMI
variableDeclaration:
        VAR VAR_ID COLON TYPE SEMI
procedureDeclaration:
        PROC VAR_ID LEFT_PAREN parameters RIGHT_PAREN COLON TYPE DEFINE_AS statement
parameters:
        parameter (COMMA parameter)*
parameter:
        VAR_ID COLON TYPE
statement:
        assignmentStatement
        whileStatement
        ifStatement
        skipStatement
        LEFT_BRACKET (assignmentStatement | whileStatement | ifStatement | skipStatement)+ RIGHT_BRACKET
assignmentStatement:
        VAR_ID DEFINE_AS expression SEMI
skipStatement:
        SKIP SEMI
whileStatement:
        WHILE expression DO statement
ifStatement:
        IF expression THEN s1::statement ELSE s2::statement
SEMI:
        ";"
COLON:
        ":"
COMMA:
        ","
DEFINE_AS:
        ":="
EQUAL:
        "="
PLUS:
        "+"
MINUS:
        "-"
MULT:
        "*"
DIV:
        "/"
EXPON:
        "**"
VAR:
        "var"
PROC:
        "proc"
CONST:
        "const"
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
EXPR:
        "expr"
COND:
        "cond"
IFELSE:
        "ifelse"
PARAM:
        "param"
TESCO:
        "tesco"
VARDECL:
        "vardecl"
CONSTDECL:
        "constdecl"
PROCDECL:
        "procdecl"
BODY:
        "body"
PROCAPP:
        "procApp"
LEFT_PAREN:
        "("
RIGHT_PAREN:
        ")"
LEFT_BRACKET:
        "{"
RIGHT_BRACKET:
        "}"
TYPE:
        "int"
        "double"
CONST_ID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
VAR_ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        " "
        "\t"
        "\f"
        "\r\n"
        "\r"
        "\n"
COMMENT:
        "/*" ANY* "*/"
INTEGER:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE:
        INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INTEGER)?
EQUALITY:
        "=="
NOT_EQUAL:
        "!="
LESS_THAN:
        "<"
LESS_THAN_OR_EQUAL:
        "<="
GREATER_THAN:
        ">"
GREATER_THAN_OR_EQUAL:
        ">="
Q_MARK:
        "?"
CONJ:
        "/\\"
DISJUNCT:
        "\\/"
