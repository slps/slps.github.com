prog = TROLLEY CID CONTAINS declaration* CHECKOUT compoundStatement SEMI DONE SEMI ;
declaration = (constDeclaration | varDeclaration | procDeclaration) SEMI ;
identifier = ID ;
identifier = CID ;
varDeclaration = VAR IDENTIFIER COLON type ;
procDeclaration = PROC IDENTIFIER LPAREN parameterList? RPAREN COLON type COLON_EQUALS compoundStatement ;
constDeclaration = CONST CID COLON type COLON_EQUALS arithEx ;
type = INT ;
type = DOUBLE ;
arithEx = expr ;
arithEx = procedureApplication ;
parameterList = firstID::IDENTIFIER COLON firstType::type (COMMA followID::IDENTIFIER COLON followType::type)* ;
procedureApplication = IDENTIFIER LPAREN commaSeparatedArithEx RPAREN ;
commaSeparatedArithEx = (arithEx (COMMA arithEx)*)? ;
atom = INT_NUMBER ;
atom = DOUBLE_NUMBER ;
atom = IDENTIFIER ;
atom = LPAREN conditionalExpr RPAREN ;
expr = prodExpr ((ADDITION | SUBTRACTION) prodExpr)* ;
prodExpr = exponentialExpr ((MULTIPLICATION | DIVISION) exponentialExpr)* ;
exponentialExpr = unary (EXPONENTIATION unary)? ;
unary = (ADDITION | SUBTRACTION)? atom ;
conjBooleanExpr = booleanExpr (CONJUNCTION booleanExpr)* ;
disjBooleanExpr = conjBooleanExpr (DISJUNCTION conjBooleanExpr)* ;
booleanExpr = arithEx ((EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER | GREATER_EQUAL) arithEx)? ;
conditionalExpr = disjBooleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
compoundStatement = LBRACE statement (SEMI statement)* RBRACE ;
compoundStatement = statement ;
statement = SKIP ;
statement = assignment ;
statement = conditional ;
statement = loop ;
assignment = IDENTIFIER COLON_EQUALS conditionalExpr ;
conditional = IF conditionalExpr THEN consequent ELSE alternative ;
consequent = compoundStatement ;
alternative = compoundStatement ;
loop = WHILE booleanExpr DO compoundStatement ;
NEWLINE = '\r'? '\n' ;
SEMI = ';' ;
COMMA = ',' ;
COLON = ':' ;
QUESTION = '?' ;
EQUALITY = '==' ;
NON_EQUALITY = '!=' ;
LESS = '<' ;
LESS_EQUAL = '<=' ;
GREATER_EQUAL = '>=' ;
GREATER = '>' ;
CONJUNCTION = '/\\' ;
DISJUNCTION = '\\/' ;
COLON_EQUALS = ':=' ;
ADDITION = '+' ;
SUBTRACTION = '-' ;
DIVISION = '/' ;
MULTIPLICATION = '*' ;
EXPONENTIATION = '**' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
DONE = 'done' ;
TROLLEY = 'trolley' ;
CONTAINS = 'contains' ;
SKIP = 'skip' ;
CHECKOUT = 'checkout' ;
INT = 'int' ;
DOUBLE = 'double' ;
CONST = 'const' ;
VAR = 'var' ;
PROC = 'proc' ;
LBRACE = '{' ;
RBRACE = '}' ;
LPAREN = '(' ;
RPAREN = ')' ;
INT_NUMBER = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLE_NUMBER = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* (('e' | 'E') ('-' | '+')? INT_NUMBER)? ;
CID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = ' ' ;
WS = '\r' ;
WS = '\t' ;
WS = '\u000C' ;
COMMENT = '/*' ANY* '*/' ;
