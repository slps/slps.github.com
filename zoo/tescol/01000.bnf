program:
        TROLLEY CONSTID CONTAINS declarations CHECKOUT statement SEMI DONE SEMI
declarations:
        (constdec | vardec | procdec)+
constdec:
        CONST CONSTID COL type DEF arith SEMI
vardec:
        VAR id COL type SEMI
procdec:
        PROC id LBRACK param RBRACK COL type DEF statement SEMI
statements:
        assign
        condstatement
        loop
statement:
        SKIP
        statements
        LCBRACK statement (SEMI statement)* RCBRACK
assign:
        id DEF arith
condstatement:
        IF orExpr THEN statement ELSE statement
loop:
        WHILE orExpr DO statement
param:
        (l::id COL ltype::type (COMMA r::id COL rtype::type)*)?
comparOps:
        EQ
        NEQ
        LT
        GT
        LTE
        GTE
arith:
        orExpr (QUES arith COL arith)?
orExpr:
        andExpr (DISJ andExpr)*
andExpr:
        comparExpr (CONJ comparExpr)*
comparExpr:
        arithExpr (comparOps arithExpr)*
arithExpr:
        multiExpr ((ADD | SUB) multiExpr)*
multiExpr:
        expExpr ((MULT | DIV) expExpr)*
expExpr:
        atom (EXP atom)*
atom:
        INTNUM
        DOUBNUM
        id
        procapp
        LBRACK arith RBRACK
nums:
        VARID
        CONSTID
        INTNUM
        DOUBNUM
procapp:
        id LBRACK arith (COMMA arith)* RBRACK
type:
        INT
        DOUBLE
id:
        CONSTID
        VARID
COMMENT:
        "/*" ANY* "*/"
SEMI:
        ";"
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
INT:
        "int"
DOUBLE:
        "double"
CONST:
        "const"
PROC:
        "proc"
VAR:
        "var"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
VARID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
INTNUM:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBNUM:
        INTNUM? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INTNUM)?
LBRACK:
        "("
RBRACK:
        ")"
LCBRACK:
        "{"
RCBRACK:
        "}"
ADD:
        "+"
SUB:
        "-"
EXP:
        "**"
MULT:
        "*"
DEF:
        ":="
DIV:
        "/"
QUES:
        "?"
COL:
        ":"
COMMA:
        ","
EQ:
        "=="
NEQ:
        "!="
LTE:
        "<="
GTE:
        ">="
LT:
        "<"
GT:
        ">"
CONJ:
        "/\\"
DISJ:
        "\\/"
