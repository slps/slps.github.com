program:
        TROLLEY CONST_ID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI
declaration:
        const_dec
        var_dec
        proc_dec
const_dec:
        CONST CONST_ID COLON typename DEF arith_exp SEMI
var_dec:
        VAR v_id COLON typename SEMI
proc_dec:
        proc_header proc_params proc_body
proc_header:
        PROC p_id
proc_params:
        OPEN param_list CLOSE COLON typename
proc_body:
        DEF statement SEMI
param_list:
        (param_item (COMMA param_item)*)?
param_item:
        var_id COLON typename
var_id:
        VAR_ID
statement:
        grouped
        SKIP
        assignment
        conditional
        loop
grouped:
        STST (statement SEMI)+ STED
assignment:
        variable DEF arith_exp
conditional:
        IF bool_exp THEN statement ELSE statement
loop:
        WHILE bool_exp DO statement
arith_exp:
        bool_exp (QUEST arith_exp COLON arith_exp)?
bool_exp:
        con_exp (DISJ con_exp)*
con_exp:
        comp_exp (CONJ comp_exp)*
comp_exp:
        plus_min_exp (rel_operator plus_min_exp)?
plus_min_exp:
        mult_div_exp ((PLUS | MINUS) mult_div_exp)*
mult_div_exp:
        exp_exp ((MULT | DIV) exp_exp)*
exp_exp:
        minus (EXP minus)?
minus:
        atom
        MINUS minus
atom:
        type
        constant
        variable
        procedure
        OPEN arith_exp CLOSE
v_id:
        idname::(VAR_ID | CONST_ID)
p_id:
        idname::(VAR_ID | CONST_ID)
constant:
        CONST_ID
variable:
        VAR_ID
procedure:
        VAR_ID OPEN params_given CLOSE
params_given:
        (arith_exp (COMMA arith_exp)*)?
rel_operator:
        EQ
        NEQ
        LESS
        LESSEQ
        GRT
        GRTEQ
type:
        INT_T
        DOUBLE_T
typename:
        INT
        DOUBLE
TROLLEY:
        "trolley"
CONTAINS:
        "contains"
CHECKOUT:
        "checkout"
DONE:
        "done"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
SKIP:
        "skip"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
SEMI:
        ";"
COLON:
        ":"
DEF:
        ":="
OPEN:
        "("
CLOSE:
        ")"
STST:
        "{"
STED:
        "}"
COMMA:
        ","
QUEST:
        "?"
PLUS:
        "+"
MINUS:
        "-"
MULT:
        "*"
DIV:
        "/"
EXP:
        "**"
EQ:
        "=="
NEQ:
        "!="
LESS:
        "<"
LESSEQ:
        "<="
GRT:
        ">"
GRTEQ:
        ">="
CONJ:
        "/\\"
DISJ:
        "\\/"
INT:
        "int"
DOUBLE:
        "double"
INT_T:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE_T:
        INT_T? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INT_T)?
CONST_ID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
VAR_ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
COM:
        "/*" ANY* "*/"
