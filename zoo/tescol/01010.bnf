program:
        TROLLEY CONSTID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI EOF
declaration:
        procdec
        constdec
        vardec
procdec:
        PROC procdescribe COLON type ASSIGN statement SEMI
procdescribe:
        id LPARA paramdecs RPARA
paramdecs:
        (paramdec (COMMA paramdec)* COMMA?)?
paramdec:
        id COLON type
argslist:
        LPARA (expr (COMMA expr)* COMMA?)? RPARA
constdec:
        CONST CONSTID COLON type ASSIGN expr SEMI
vardec:
        VAR id COLON type SEMI
assignment:
        id ASSIGN expr
ifthenelse:
        IF cond thenclause elseclause
thenclause:
        THEN statement
elseclause:
        ELSE statement
whiledo:
        WHILE cond DO statement
statement:
        SKIP
        LCURL statement (SEMI statement)* RCURL
        assignment
        ifthenelse
        whiledo
expr:
        cond (QUEST expr COLON expr)?
sub_add_expr:
        mul_div_expr (addsub mul_div_expr)*
mul_div_expr:
        expexpr ((MUL | DIV) expexpr)*
expexpr:
        atom (EXP expexpr)?
atom:
        negative unsignedatom
        unsignedatom
unsignedatom:
        bracketexpr
        id argslist?
        sign number
        number
bracketexpr:
        LPARA expr RPARA
cond:
        andcond (OR andcond)*
andcond:
        pred (AND pred)*
pred:
        sub_add_expr (comparator sub_add_expr)?
COLON:
        ":"
SEMI:
        ";"
QUEST:
        "?"
COMMA:
        ","
ASSIGN:
        ":="
comparator:
        EQL
        NEQL
        GRT
        GRTE
        LST
        LSTE
EQL:
        "=="
NEQL:
        "!="
GRT:
        ">"
GRTE:
        ">="
LST:
        "<"
LSTE:
        "<="
arithop:
        POSITIVE
        NEGATIVE
        ADDITION
        SUBTRACTION
        MUL
        DIV
        EXP
addsub:
        ADDITION
        POSITIVE
        SUBTRACTION
        NEGATIVE
positive:
        POSITIVE
        ADDITION
negative:
        NEGATIVE
        SUBTRACTION
sign:
        POSITIVE
        NEGATIVE
ADDITION:
        "+" (" " | "\t" | "\r" | "\n" | COMMENT)
SUBTRACTION:
        "-" (" " | "\t" | "\r" | "\n" | COMMENT)
POSITIVE:
        "+"
NEGATIVE:
        "-"
MUL:
        "*"
DIV:
        "/"
EXP:
        "**"
logicop:
        AND
        OR
AND:
        "/\\"
OR:
        "\\/"
LPARA:
        "("
RPARA:
        ")"
LCURL:
        "{"
RCURL:
        "}"
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
vartype:
        CONST
        VAR
        PROC
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
type:
        INT
        DOUBLE
INT:
        "int"
DOUBLE:
        "double"
id:
        ID
        CONSTID
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
number:
        INUM
        NUM
INUM:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
NUM:
        INUM? "." INUM? (("e" | "E") (POSITIVE | NEGATIVE)? INUM)?
COMMENT:
        "/*" ANY* "*/"
WS:
        (" " | "\t" | "\r" | "\n")+
comments:
        COMMENT*
EOF:
        EPSILON
