module Main

exports
  sorts
        Program Declaration Procdec Procdescribe Paramdecs Paramdec Argslist Constdec Vardec Assignment Ifthenelse Thenclause Elseclause Whiledo Statement Expr Sub-add-expr Mul-div-expr Expexpr Atom Unsignedatom Bracketexpr Cond Andcond Pred COLON SEMI QUEST COMMA ASSIGN Comparator EQL NEQL GRT GRTE LST LSTE Arithop Addsub Positive Negative Sign ADDITION SUBTRACTION POSITIVE NEGATIVE MUL DIV EXP Logicop AND OR LPARA RPARA LCURL RCURL DONE SKIP TROLLEY CHECKOUT CONTAINS Vartype CONST VAR PROC IF THEN ELSE WHILE DO Type INT DOUBLE Id CONSTID ID Number INUM NUM COMMENT WS Comments EOF 
  context-free syntax
        TROLLEY CONSTID CONTAINS Declaration* CHECKOUT Statement SEMI DONE SEMI EOF -> Program

        Procdec -> Declaration
        Constdec -> Declaration
        Vardec -> Declaration

        PROC Procdescribe COLON Type ASSIGN Statement SEMI -> Procdec

        Id LPARA Paramdecs RPARA -> Procdescribe

        (Paramdec (COMMA Paramdec)* COMMA?)? -> Paramdecs

        Id COLON Type -> Paramdec

        LPARA (Expr (COMMA Expr)* COMMA?)? RPARA -> Argslist

        CONST CONSTID COLON Type ASSIGN Expr SEMI -> Constdec

        VAR Id COLON Type SEMI -> Vardec

        Id ASSIGN Expr -> Assignment

        IF Cond Thenclause Elseclause -> Ifthenelse

        THEN Statement -> Thenclause

        ELSE Statement -> Elseclause

        WHILE Cond DO Statement -> Whiledo

        SKIP -> Statement
        LCURL Statement (SEMI Statement)* RCURL -> Statement
        Assignment -> Statement
        Ifthenelse -> Statement
        Whiledo -> Statement

        Cond (QUEST Expr COLON Expr)? -> Expr

        Mul-div-expr (Addsub Mul-div-expr)* -> Sub-add-expr

        Expexpr ((MUL | DIV) Expexpr)* -> Mul-div-expr

        Atom (EXP Expexpr)? -> Expexpr

        Negative Unsignedatom -> Atom
        Unsignedatom -> Atom

        Bracketexpr -> Unsignedatom
        Id Argslist? -> Unsignedatom
        Sign Number -> Unsignedatom
        Number -> Unsignedatom

        LPARA Expr RPARA -> Bracketexpr

        Andcond (OR Andcond)* -> Cond

        Pred (AND Pred)* -> Andcond

        Sub-add-expr (Comparator Sub-add-expr)? -> Pred

        ":" -> COLON

        ";" -> SEMI

        "?" -> QUEST

        "," -> COMMA

        ":=" -> ASSIGN

        EQL -> Comparator
        NEQL -> Comparator
        GRT -> Comparator
        GRTE -> Comparator
        LST -> Comparator
        LSTE -> Comparator

        "==" -> EQL

        "!=" -> NEQL

        ">" -> GRT

        ">=" -> GRTE

        "<" -> LST

        "<=" -> LSTE

        POSITIVE -> Arithop
        NEGATIVE -> Arithop
        ADDITION -> Arithop
        SUBTRACTION -> Arithop
        MUL -> Arithop
        DIV -> Arithop
        EXP -> Arithop

        ADDITION -> Addsub
        POSITIVE -> Addsub
        SUBTRACTION -> Addsub
        NEGATIVE -> Addsub

        POSITIVE -> Positive
        ADDITION -> Positive

        NEGATIVE -> Negative
        SUBTRACTION -> Negative

        POSITIVE -> Sign
        NEGATIVE -> Sign

        "+" (" " | "\t" | "\r" | "\n" | COMMENT) -> ADDITION

        "-" (" " | "\t" | "\r" | "\n" | COMMENT) -> SUBTRACTION

        "+" -> POSITIVE

        "-" -> NEGATIVE

        "*" -> MUL

        "/" -> DIV

        "**" -> EXP

        AND -> Logicop
        OR -> Logicop

        "/\\" -> AND

        "\\/" -> OR

        "(" -> LPARA

        ")" -> RPARA

        "{" -> LCURL

        "}" -> RCURL

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        CONST -> Vartype
        VAR -> Vartype
        PROC -> Vartype

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        INT -> Type
        DOUBLE -> Type

        "int" -> INT

        "double" -> DOUBLE

        ID -> Id
        CONSTID -> Id

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CONSTID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        INUM -> Number
        NUM -> Number

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INUM

        INUM? "." INUM? (("e" | "E") (POSITIVE | NEGATIVE)? INUM)? -> NUM

        "/*" ANY* "*/" -> COMMENT

        (" " | "\t" | "\r" | "\n")+ -> WS

        COMMENT* -> Comments

         -> EOF
