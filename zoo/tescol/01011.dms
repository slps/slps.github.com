program = TROLLEY ID CONTAINS (constant | variable | proceduredecl)+ CHECKOUT statement+ DONE SEMI EOF ;
constant = 'const' ID COLON (INT | DOUBLE) ASSIGN expression SEMI ;
variable = 'var' ID COLON (INT | DOUBLE) SEMI ;
proceduredecl = 'proc' ID LBRACK parameter (COMMA parameter)* RBRACK COLON (INT | DOUBLE) ASSIGN statement ;
parameter = ID COLON (INT | DOUBLE) ;
term = procedureapp ;
term = ID ;
term = '(' expression ')' ;
term = INUMB ;
term = DNUMB ;
unary = (PLUS | negation)* term ;
negation = '-' ;
mult = unary ((MULTI | DIVIS | EXPO) unary)* ;
addition = mult ((PLUS | MINUS) mult)* ;
relation = addition ((EQUALITY | LTHAN | MTHAN | NOTEQUAL | LEQUAL | MEQUAL) addition)* ;
conj = relation (CONJ relation)* ;
disj = conj (DISJ relation)* ;
expression = disj ('\?' disj COLON disj)? ;
procedureapp = ID '(' (expression (COMMA expression)*)? ')' SEMI? ;
statement = LBRACE statement+ RBRACE SEMI ;
statement = skip ;
statement = assignment ;
statement = conditional ;
statement = loop ;
statement = procedureapp ;
statement = ret ;
skip = 'skip' SEMI ;
assignment = ID ASSIGN expression SEMI ;
ret = 'currentProc' ASSIGN expression SEMI ;
conditional = IF expression THEN statement+ (ELSE statement+)? ;
loop = WHILE expression DO statement+ ;
SEMI = ';' ;
COLON = ':' ;
ASSIGN = ':=' ;
LBRACK = '(' ;
RBRACK = ')' ;
LBRACE = '{' ;
RBRACE = '}' ;
PLUS = '+' ;
MINUS = '-' ;
COMMA = ',' ;
DIVIS = '/' ;
MULTI = '*' ;
EXPO = '**' ;
EQUALITY = '==' ;
LTHAN = '<' ;
MTHAN = '>' ;
NOTEQUAL = '!=' ;
LEQUAL = '<=' ;
MEQUAL = '>=' ;
CONJ = '/\\' ;
DISJ = '\\/' ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
CONSTANT = 'const' ;
VARIABLE = 'var' ;
PROCEDURE = 'proc' ;
INT = 'int' ;
DOUBLE = 'double' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
INUMB = ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* ;
DNUMB = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* ('e' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')*)? ;
COMMENT = '/*' ANY* '*/' ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
EOF = ;
