program:
        TROLLEY constidentifier CONTAINS declaration CHECKOUT statements DONE SEMICOLON
        TROLLEY constidentifier CONTAINS CHECKOUT statements DONE SEMICOLON
dec:
        constdec
        vardec
        procdec
declaration:
        dec+
constdec:
        CONST constidentifier COLON type DEFINE expression SEMICOLON
vardec:
        VAR identifier COLON type SEMICOLON
procdec:
        PROCEDURE id::identifier LEFTPARENTHESIS ((RIGHTPARENTHESIS COLON type DEFINE statements) | (ids::identifier COLON type (COMA ids::identifier COLON type)* RIGHTPARENTHESIS COLON type DEFINE statements))
procedure:
        identifier LEFTPARENTHESIS (EPSILON | (expression (COMA expression)*)) RIGHTPARENTHESIS
stat:
        skip
        assign
        cond
        loop
statements:
        stat
        LEFTCURLY stat+ RIGHTCURLY SEMICOLON
skip:
        SKIPTOKEN SEMICOLON
assign:
        identifier DEFINE expression SEMICOLON
cond:
        IF expression THEN dothen::statements ELSE doelse::statements
loop:
        WHILE expression DO statements
expression:
        condExp
condExp:
        disjunct ((QUESTIONMARK exp1::condExp COLON exp2::condExp) | EPSILON)
disjunct:
        conjunct ((DISJUNCTION conjunct)+ | EPSILON)
conjunct:
        comparison ((CONJUNCTION comparison)+ | EPSILON)
comparison:
        a2::addition booleanSymbols a1::addition
        addition
addition:
        substract ((ADDITION substract)+ | EPSILON)
substract:
        multipli ((SUBSTRACTION multipli)+ | EPSILON)
multipli:
        divide ((MULTIPLICATION divide)+ | EPSILON)
divide:
        exponent ((DIVISION exponent)+ | EPSILON)
exponent:
        atom ((EXPONENT atom) | EPSILON)
atom:
        number
        procedure
        identifier
        LEFTPARENTHESIS condExp RIGHTPARENTHESIS
        SUBSTRACTION condExp
type:
        TYPEINT
        TYPEDOUBLE
booleanSymbols:
        EQUALITY
        NONEQUALITY
        DIFFERENTOREQUAL
        STRICTLYDIFFERENT
constidentifier:
        CONSTID
identifier:
        ID
        constidentifier
number:
        ADDITION? INT
        ADDITION? DOUBLE
        SUBSTRACTION INT
        SUBSTRACTION DOUBLE
DEFINE:
        ":="
COLON:
        ":"
SEMICOLON:
        ";"
COMA:
        ","
DOUBLE:
        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("E" | "e") (ADDITION | SUBSTRACTION)? INT)?
INT:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
COMMENT:
        "/*" ANY* "*/"
ADDITION:
        "+"
SUBSTRACTION:
        "-"
DIVISION:
        "/"
EXPONENT:
        "**"
MULTIPLICATION:
        "*"
LEFTPARENTHESIS:
        "("
RIGHTPARENTHESIS:
        ")"
LEFTCURLY:
        "{"
RIGHTCURLY:
        "}"
EQUALITY:
        "=="
NONEQUALITY:
        "!="
DIFFERENTOREQUAL:
        "<="
        ">="
STRICTLYDIFFERENT:
        "<"
        ">"
CONJUNCTION:
        "/\\"
DISJUNCTION:
        "\\/"
QUESTIONMARK:
        "?"
DONE:
        "done"
SKIPTOKEN:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
CONST:
        "const"
VAR:
        "var"
PROCEDURE:
        "proc"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
TYPEINT:
        "int"
TYPEDOUBLE:
        "double"
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
