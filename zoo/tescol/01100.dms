program = TROLLEY constidentifier CONTAINS declaration CHECKOUT statements DONE SEMICOLON ;
program = TROLLEY constidentifier CONTAINS CHECKOUT statements DONE SEMICOLON ;
dec = constdec ;
dec = vardec ;
dec = procdec ;
declaration = dec+ ;
constdec = CONST constidentifier COLON type DEFINE expression SEMICOLON ;
vardec = VAR IDENTIFIER COLON type SEMICOLON ;
procdec = PROCEDURE id::IDENTIFIER LEFTPARENTHESIS ((RIGHTPARENTHESIS COLON type DEFINE statements) | (ids::IDENTIFIER COLON type (COMA ids::IDENTIFIER COLON type)* RIGHTPARENTHESIS COLON type DEFINE statements)) ;
procedure = IDENTIFIER LEFTPARENTHESIS ( | (expression (COMA expression)*)) RIGHTPARENTHESIS ;
stat = skip ;
stat = assign ;
stat = cond ;
stat = loop ;
statements = stat ;
statements = LEFTCURLY stat+ RIGHTCURLY SEMICOLON ;
skip = SKIPTOKEN SEMICOLON ;
assign = IDENTIFIER DEFINE expression SEMICOLON ;
cond = IF expression THEN dothen::statements ELSE doelse::statements ;
loop = WHILE expression DO statements ;
expression = condExp ;
condExp = disjunct ((QUESTIONMARK exp1::condExp COLON exp2::condExp) | ) ;
disjunct = conjunct ((DISJUNCTION conjunct)+ | ) ;
conjunct = comparison ((CONJUNCTION comparison)+ | ) ;
comparison = a2::addition booleanSymbols a1::addition ;
comparison = addition ;
addition = substract ((ADDITION substract)+ | ) ;
substract = multipli ((SUBSTRACTION multipli)+ | ) ;
multipli = divide ((MULTIPLICATION divide)+ | ) ;
divide = exponent ((DIVISION exponent)+ | ) ;
exponent = atom ((EXPONENT atom) | ) ;
atom = number ;
atom = procedure ;
atom = IDENTIFIER ;
atom = LEFTPARENTHESIS condExp RIGHTPARENTHESIS ;
atom = SUBSTRACTION condExp ;
type = TYPEINT ;
type = TYPEDOUBLE ;
booleanSymbols = EQUALITY ;
booleanSymbols = NONEQUALITY ;
booleanSymbols = DIFFERENTOREQUAL ;
booleanSymbols = STRICTLYDIFFERENT ;
constidentifier = CONSTID ;
identifier = ID ;
identifier = constidentifier ;
number = ADDITION? INT ;
number = ADDITION? DOUBLE ;
number = SUBSTRACTION INT ;
number = SUBSTRACTION DOUBLE ;
DEFINE = ':=' ;
COLON = ':' ;
SEMICOLON = ';' ;
COMA = ',' ;
DOUBLE = INT? '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* (('E' | 'e') (ADDITION | SUBSTRACTION)? INT)? ;
INT = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
COMMENT = '/*' ANY* '*/' ;
ADDITION = '+' ;
SUBSTRACTION = '-' ;
DIVISION = '/' ;
EXPONENT = '**' ;
MULTIPLICATION = '*' ;
LEFTPARENTHESIS = '(' ;
RIGHTPARENTHESIS = ')' ;
LEFTCURLY = '{' ;
RIGHTCURLY = '}' ;
EQUALITY = '==' ;
NONEQUALITY = '!=' ;
DIFFERENTOREQUAL = '<=' ;
DIFFERENTOREQUAL = '>=' ;
STRICTLYDIFFERENT = '<' ;
STRICTLYDIFFERENT = '>' ;
CONJUNCTION = '/\\' ;
DISJUNCTION = '\\/' ;
QUESTIONMARK = '?' ;
DONE = 'done' ;
SKIPTOKEN = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
CONST = 'const' ;
VAR = 'var' ;
PROCEDURE = 'proc' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
TYPEINT = 'int' ;
TYPEDOUBLE = 'double' ;
CONSTID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
