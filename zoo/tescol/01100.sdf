module Main

exports
  sorts
        Program Dec Declaration Constdec Vardec Procdec Procedure Stat Statements Skip Assign Cond Loop Expression CondExp Disjunct Conjunct Comparison Addition Substract Multipli Divide Exponent Atom Type BooleanSymbols Constidentifier Identifier Number DEFINE COLON SEMICOLON COMA DOUBLE INT COMMENT ADDITION SUBSTRACTION DIVISION EXPONENT MULTIPLICATION LEFTPARENTHESIS RIGHTPARENTHESIS LEFTCURLY RIGHTCURLY EQUALITY NONEQUALITY DIFFERENTOREQUAL STRICTLYDIFFERENT CONJUNCTION DISJUNCTION QUESTIONMARK DONE SKIPTOKEN TROLLEY CHECKOUT CONTAINS CONST VAR PROCEDURE IF THEN ELSE WHILE DO TYPEINT TYPEDOUBLE CONSTID ID WS 
  context-free syntax
        TROLLEY Constidentifier CONTAINS Declaration CHECKOUT Statements DONE SEMICOLON -> Program
        TROLLEY Constidentifier CONTAINS CHECKOUT Statements DONE SEMICOLON -> Program

        Constdec -> Dec
        Vardec -> Dec
        Procdec -> Dec

        Dec+ -> Declaration

        CONST Constidentifier COLON Type DEFINE Expression SEMICOLON -> Constdec

        VAR Identifier COLON Type SEMICOLON -> Vardec

        PROCEDURE id::Identifier LEFTPARENTHESIS ((RIGHTPARENTHESIS COLON Type DEFINE Statements) | (ids::Identifier COLON Type (COMA ids::Identifier COLON Type)* RIGHTPARENTHESIS COLON Type DEFINE Statements)) -> Procdec

        Identifier LEFTPARENTHESIS ( | (Expression (COMA Expression)*)) RIGHTPARENTHESIS -> Procedure

        Skip -> Stat
        Assign -> Stat
        Cond -> Stat
        Loop -> Stat

        Stat -> Statements
        LEFTCURLY Stat+ RIGHTCURLY SEMICOLON -> Statements

        SKIPTOKEN SEMICOLON -> Skip

        Identifier DEFINE Expression SEMICOLON -> Assign

        IF Expression THEN dothen::Statements ELSE doelse::Statements -> Cond

        WHILE Expression DO Statements -> Loop

        CondExp -> Expression

        Disjunct ((QUESTIONMARK exp1::CondExp COLON exp2::CondExp) | ) -> CondExp

        Conjunct ((DISJUNCTION Conjunct)+ | ) -> Disjunct

        Comparison ((CONJUNCTION Comparison)+ | ) -> Conjunct

        a2::Addition BooleanSymbols a1::Addition -> Comparison
        Addition -> Comparison

        Substract ((ADDITION Substract)+ | ) -> Addition

        Multipli ((SUBSTRACTION Multipli)+ | ) -> Substract

        Divide ((MULTIPLICATION Divide)+ | ) -> Multipli

        Exponent ((DIVISION Exponent)+ | ) -> Divide

        Atom ((EXPONENT Atom) | ) -> Exponent

        Number -> Atom
        Procedure -> Atom
        Identifier -> Atom
        LEFTPARENTHESIS CondExp RIGHTPARENTHESIS -> Atom
        SUBSTRACTION CondExp -> Atom

        TYPEINT -> Type
        TYPEDOUBLE -> Type

        EQUALITY -> BooleanSymbols
        NONEQUALITY -> BooleanSymbols
        DIFFERENTOREQUAL -> BooleanSymbols
        STRICTLYDIFFERENT -> BooleanSymbols

        CONSTID -> Constidentifier

        ID -> Identifier
        Constidentifier -> Identifier

        ADDITION? INT -> Number
        ADDITION? DOUBLE -> Number
        SUBSTRACTION INT -> Number
        SUBSTRACTION DOUBLE -> Number

        ":=" -> DEFINE

        ":" -> COLON

        ";" -> SEMICOLON

        "," -> COMA

        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("E" | "e") (ADDITION | SUBSTRACTION)? INT)? -> DOUBLE

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT

        "/*" ANY* "*/" -> COMMENT

        "+" -> ADDITION

        "-" -> SUBSTRACTION

        "/" -> DIVISION

        "**" -> EXPONENT

        "*" -> MULTIPLICATION

        "(" -> LEFTPARENTHESIS

        ")" -> RIGHTPARENTHESIS

        "{" -> LEFTCURLY

        "}" -> RIGHTCURLY

        "==" -> EQUALITY

        "!=" -> NONEQUALITY

        "<=" -> DIFFERENTOREQUAL
        ">=" -> DIFFERENTOREQUAL

        "<" -> STRICTLYDIFFERENT
        ">" -> STRICTLYDIFFERENT

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        "?" -> QUESTIONMARK

        "done" -> DONE

        "skip" -> SKIPTOKEN

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROCEDURE

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        "int" -> TYPEINT

        "double" -> TYPEDOUBLE

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CONSTID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        (" " | "\t" | "\r" | "\n")+ -> WS
