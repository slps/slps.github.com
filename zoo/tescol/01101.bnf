program:
        trolley checkout
trolley:
        TROLLEY varIDs CONTAINS decleration
checkout:
        CHECKOUT OPENBRACKET statement* CLOSEDBRACKET SEMI DONE SEMI
decleration:
        (const_dec | var_dec | proc_dec)*
const_dec:
        CONSTANT conIDs COLON TYPE BECOMES mix_fix SEMI
var_dec:
        VAR varIDs COLON TYPE SEMI
proc_dec:
        PROCEDURE proc_para COLON TYPE proc_becomes
proc_para:
        varIDs OPENPARENTHESIS (parameter COMMA?)* CLOSEDPARENTHESIS
parameter:
        varIDs COLON TYPE
proc_becomes:
        BECOMES cond_statements
atom:
        procedure_call
        CID
        ID
        OPENPARENTHESIS mix_fix CLOSEDPARENTHESIS
        INT
        DOUBLE
negation:
        SUB atom
        atom
exponential:
        negation (EXP negation)*
multiplication_division:
        exponential ((MUL | DIV) exponential)*
arithmetic_expression:
        multiplication_division ((ADD | SUB) multiplication_division)*
bool_atom:
        arithmetic_expression ((NONEQUALITY | EQUALITY | MOREOREQUAL | LESSOREQUAL | MORETHEN | LESSTHEN) arithmetic_expression)*
bool_conjunction:
        bool_atom (CONJUNCTION bool_atom)*
bool_disjunction:
        bool_conjunction (DISJUNCTION bool_conjunction)*
mix_fix:
        bool_disjunction (MIX_FIX arithmetic_expression COLON atom)?
procedure_call:
        varIDs OPENPARENTHESIS parameters CLOSEDPARENTHESIS SEMI
parameters:
        mix_fix (COMMA mix_fix)*
statement:
        conditional
        loop
        assignment
        skip
        procedure_call
skip:
        SKIP SEMI
conditional:
        IF OPENPARENTHESIS bool_disjunction CLOSEDPARENTHESIS then_statement else_statement
then_statement:
        THEN cond_statements
else_statement:
        ELSE cond_statements
loop:
        WHILE bool_disjunction do_statement
do_statement:
        DO cond_statements
cond_statements:
        OPENBRACKET statement* CLOSEDBRACKET
        statement
assignment:
        varIDs BECOMES mix_fix SEMI
varIDs:
        CID
        ID
conIDs:
        CID
DOUBLE:
        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") (ADD | SUB)? INT)?
INT:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
COMMENT:
        BEGINCOMMENT ANY* ENDCOMMENT
TYPE:
        "int"
        "double"
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
VAR:
        "var"
CONSTANT:
        "const"
PROCEDURE:
        "proc"
TROLLY:
        "trolly"
COMMA:
        ","
SEMI:
        ";"
COLON:
        ":"
ADD:
        "+"
SUB:
        "-"
DIV:
        "/"
MUL:
        "*"
EXP:
        "**"
BECOMES:
        ":="
MIX_FIX:
        "?"
EQUALITY:
        "=="
NONEQUALITY:
        "!="
LESSTHEN:
        "<"
MORETHEN:
        ">"
LESSOREQUAL:
        "<="
MOREOREQUAL:
        ">="
CONJUNCTION:
        "/\\"
DISJUNCTION:
        "\\/"
BEGINCOMMENT:
        "/*"
ENDCOMMENT:
        "*/"
OPENBRACKET:
        "{"
CLOSEDBRACKET:
        "}"
OPENPARENTHESIS:
        "("
CLOSEDPARENTHESIS:
        ")"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
CID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
