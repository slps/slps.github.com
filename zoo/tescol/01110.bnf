prog:
        TROLLEY CID CONTAINS declaration* checkoutStat
declaration:
        constDec
        varDec
        procDec
checkoutStat:
        CHECKOUT statement DONE SEMI
constDec:
        CONST name::CID COLON t::type COLON_EQUALS c::mixFix SEMI
varDec:
        VAR name::ID COLON t::type SEMI
procDec:
        PROC name::ID LPAREN (a::ID COLON a_t::type (COMMA b::ID COLON b_t::type)*)? RPAREN COLON r_t::type COLON_EQUALS c::statement
statement:
        assignment
        ifStat
        loopStat
        skipStat
        LBRACE statement+ RBRACE SEMI
skipStat:
        SKIP SEMI
assignment:
        (CID | ID) COLON_EQUALS mixFix SEMI
startStat:
        TROLLEY CID CONTAINS
type:
        (INT | DOUBLE)?
atom:
        INT_NUMBER
        DOUBLE_NUMBER
        ID
        CID
        procCall
        LPAREN mixFix RPAREN
procCall:
        (name::ID | name::CID) LPAREN (a::mixFix (COMMA b::mixFix)*)? RPAREN
negation:
        "-"
unary:
        ("+" | negation)* atom
expoExpr:
        unary (EXPONENTIATION unary)*
multDivExpr:
        expoExpr ((MULTIPLICATION | DIVISION) expoExpr)*
addSubExpr:
        multDivExpr ((ADDITION | SUBTRACTION) multDivExpr)*
relation:
        addSubExpr ((EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER_EQUAL | GREATER) addSubExpr)*
conjDisjunExpr:
        relation ((CONJUNCTION | DISJUNCTION) relation)*
mixFix:
        a::conjDisjunExpr QUESTION b::conjDisjunExpr COLON c::conjDisjunExpr
        conjDisjunExpr
ifStat:
        IF a::mixFix THEN b::statement ELSE c::statement
        IF a::mixFix THEN b::statement
loopStat:
        WHILE a::mixFix DO b::statement
SEMI:
        ";"
COMMA:
        ","
COLON:
        ":"
QUESTION:
        "?"
EQUALITY:
        "=="
NON_EQUALITY:
        "!="
LESS:
        "<"
LESS_EQUAL:
        "<="
GREATER_EQUAL:
        ">="
GREATER:
        ">"
CONJUNCTION:
        "/\\"
DISJUNCTION:
        "\\/"
COLON_EQUALS:
        ":="
ADDITION:
        "+"
SUBTRACTION:
        "-"
DIVISION:
        "/"
MULTIPLICATION:
        "*"
EXPONENTIATION:
        "**"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
DONE:
        "done"
TROLLEY:
        "trolley"
CONTAINS:
        "contains"
SKIP:
        "skip"
CHECKOUT:
        "checkout"
INT:
        "int"
DOUBLE:
        "double"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
LBRACE:
        "{"
RBRACE:
        "}"
LPAREN:
        "("
RPAREN:
        ")"
INT_NUMBER:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE_NUMBER:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INT_NUMBER)?
CID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
COMMENT:
        "/*" ANY* "*/"
