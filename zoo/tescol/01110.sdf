module Main

exports
  sorts
        Prog Declaration CheckoutStat ConstDec VarDec ProcDec Statement SkipStat Assignment StartStat Type Atom ProcCall Negation Unary ExpoExpr MultDivExpr AddSubExpr Relation ConjDisjunExpr MixFix IfStat LoopStat SEMI COMMA COLON QUESTION EQUALITY NON-EQUALITY LESS LESS-EQUAL GREATER-EQUAL GREATER CONJUNCTION DISJUNCTION COLON-EQUALS ADDITION SUBTRACTION DIVISION MULTIPLICATION EXPONENTIATION IF THEN ELSE WHILE DO DONE TROLLEY CONTAINS SKIP CHECKOUT INT DOUBLE CONST VAR PROC LBRACE RBRACE LPAREN RPAREN INT-NUMBER DOUBLE-NUMBER CID ID WS COMMENT 
  context-free syntax
        TROLLEY CID CONTAINS Declaration* CheckoutStat -> Prog

        ConstDec -> Declaration
        VarDec -> Declaration
        ProcDec -> Declaration

        CHECKOUT Statement DONE SEMI -> CheckoutStat

        CONST name::CID COLON t::Type COLON-EQUALS c::MixFix SEMI -> ConstDec

        VAR name::ID COLON t::Type SEMI -> VarDec

        PROC name::ID LPAREN (a::ID COLON a_t::Type (COMMA b::ID COLON b_t::Type)*)? RPAREN COLON r_t::Type COLON-EQUALS c::Statement -> ProcDec

        Assignment -> Statement
        IfStat -> Statement
        LoopStat -> Statement
        SkipStat -> Statement
        LBRACE Statement+ RBRACE SEMI -> Statement

        SKIP SEMI -> SkipStat

        (CID | ID) COLON-EQUALS MixFix SEMI -> Assignment

        TROLLEY CID CONTAINS -> StartStat

        (INT | DOUBLE)? -> Type

        INT-NUMBER -> Atom
        DOUBLE-NUMBER -> Atom
        ID -> Atom
        CID -> Atom
        ProcCall -> Atom
        LPAREN MixFix RPAREN -> Atom

        (name::ID | name::CID) LPAREN (a::MixFix (COMMA b::MixFix)*)? RPAREN -> ProcCall

        "-" -> Negation

        ("+" | Negation)* Atom -> Unary

        Unary (EXPONENTIATION Unary)* -> ExpoExpr

        ExpoExpr ((MULTIPLICATION | DIVISION) ExpoExpr)* -> MultDivExpr

        MultDivExpr ((ADDITION | SUBTRACTION) MultDivExpr)* -> AddSubExpr

        AddSubExpr ((EQUALITY | NON-EQUALITY | LESS | LESS-EQUAL | GREATER-EQUAL | GREATER) AddSubExpr)* -> Relation

        Relation ((CONJUNCTION | DISJUNCTION) Relation)* -> ConjDisjunExpr

        a::ConjDisjunExpr QUESTION b::ConjDisjunExpr COLON c::ConjDisjunExpr -> MixFix
        ConjDisjunExpr -> MixFix

        IF a::MixFix THEN b::Statement ELSE c::Statement -> IfStat
        IF a::MixFix THEN b::Statement -> IfStat

        WHILE a::MixFix DO b::Statement -> LoopStat

        ";" -> SEMI

        "," -> COMMA

        ":" -> COLON

        "?" -> QUESTION

        "==" -> EQUALITY

        "!=" -> NON-EQUALITY

        "<" -> LESS

        "<=" -> LESS-EQUAL

        ">=" -> GREATER-EQUAL

        ">" -> GREATER

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        ":=" -> COLON-EQUALS

        "+" -> ADDITION

        "-" -> SUBTRACTION

        "/" -> DIVISION

        "*" -> MULTIPLICATION

        "**" -> EXPONENTIATION

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        "done" -> DONE

        "trolley" -> TROLLEY

        "contains" -> CONTAINS

        "skip" -> SKIP

        "checkout" -> CHECKOUT

        "int" -> INT

        "double" -> DOUBLE

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "{" -> LBRACE

        "}" -> RBRACE

        "(" -> LPAREN

        ")" -> RPAREN

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT-NUMBER

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INT-NUMBER)? -> DOUBLE-NUMBER

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        (" " | "\t" | "\r" | "\n")+ -> WS

        "/*" ANY* "*/" -> COMMENT
