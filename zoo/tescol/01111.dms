program = progTree+ ;
progTree = TROLLEY CONSTID CONTAINS declarations* CHECKOUT stat DONE SEMI ;
declarations = CONST constDec SEMI ;
declarations = VAR varDec SEMI ;
declarations = PROC procDec ;
constDec = c::CONSTID COLON number DEFINEDAS arithmeticExpression ;
varDec = v::VARANDPROCID COLON number ;
procDec = p::VARANDPROCID OPAR paramList? CPAR COLON number DEFINEDAS stat ;
paramList = varDec (COMMA varDec)* ;
stat = conditionalStat ;
stat = loopStat ;
stat = assignStat SEMI ;
stat = SKIP SEMI ;
stat = LPAR stat+ RPAR SEMI ;
assignStat = VARANDPROCID DEFINEDAS arithmeticExpression ;
conditionalStat = IF boolExpr THEN stat ELSE stat ;
loopStat = WHILE boolExpr DO stat ;
atom = CONSTID ;
atom = VARANDPROCID ;
atom = ('+' | '-')? INTVALUE ;
atom = ('+' | '-')? DOUBLEVALUE ;
atom = applyProc ;
atom = OPAR arithmeticExpression CPAR ;
arithmeticExpression = disjBool (QUESTION arithmeticExpression COLON arithmeticExpression)? ;
disjBool = conjBool (DISJUNCTION conjBool)* ;
conjBool = boolExpr (CONJUNCTION boolExpr)* ;
boolExpr = subExpr (operations subExpr)? ;
subExpr = addExpr (SUBTRACTION addExpr)* ;
addExpr = mulExpr (ADDITION mulExpr)* ;
mulExpr = divExpr (MULTIPLICATION divExpr)* ;
divExpr = expExpr (DIVISION expExpr)* ;
expExpr = atom (EXPONENTION atom)* ;
applyProc = VARANDPROCID OPAR subExprList CPAR ;
subExprList = arithmeticExpression (COMMA arithmeticExpression)* ;
number = INTKEYWORD ;
number = DOUBLEKEYWORD ;
comment = COMMENT ;
operations = EQUALITY ;
operations = NONEQUALITY ;
operations = LESSTHAN ;
operations = LESSTHANOREQUAL ;
operations = GREATERTHAN ;
operations = GREATERTHANOREQUAL ;
INTVALUE = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLEVALUE = INTVALUE? '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* (('e' | 'E') ('+' | '-')? INTVALUE)? ;
DONE = 'done' ;
DO = 'do' ;
TROLLEY = 'trolley' ;
PROC = 'proc' ;
CONTAINS = 'contains' ;
CHECKOUT = 'checkout' ;
SKIP = 'skip' ;
CONST = 'const' ;
VAR = 'var' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
INTKEYWORD = 'int' ;
DOUBLEKEYWORD = 'double' ;
COLON = ':' ;
DEFINEDAS = ':=' ;
SEMI = ';' ;
OPAR = '(' ;
CPAR = ')' ;
COMMA = ',' ;
LPAR = '{' ;
RPAR = '}' ;
UNDER = '_' ;
DIVISION = '/' ;
ADDITION = '+' ;
SUBTRACTION = '-' ;
EXPONENTION = '**' ;
MULTIPLICATION = '*' ;
QUESTION = '?' ;
EQUALITY = '==' ;
NONEQUALITY = '!=' ;
LESSTHAN = '<' ;
LESSTHANOREQUAL = '<=' ;
GREATERTHAN = '>' ;
GREATERTHANOREQUAL = '>=' ;
DISJUNCTION = '\\/' ;
CONJUNCTION = '/\\' ;
COMMENT = '/*' ANY* '*/' ;
CONSTID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
VARANDPROCID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = ('\t' | '|' | '\n' | '\r' | ' ' | '\f')+ ;
