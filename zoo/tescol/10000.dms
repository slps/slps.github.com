prog = TROLLEY CID CONTAINS NEWLINE* decl* CHECKOUT NEWLINE* stat DONE SEMI ;
decl = VAR ID COLON (INT | DOUBLE) SEMI NEWLINE* ;
decl = CONST CID COLON (INT | DOUBLE) COLON_EQUALS condExpr SEMI NEWLINE* ;
decl = PROC a::ID LPAREN (decl (COMMA decl)*)? RPAREN COLON_EQUALS stat SEMI NEWLINE* ;
stat = condExpr ;
stat = SKIP ;
stat = assign ;
stat = multStat ;
stat = ifthenelse ;
stat = whileloop ;
ifthenelse = IF LPAREN boolExpr RPAREN THEN stat (SEMI ELSE stat)? ;
whileloop = WHILE LPAREN boolExpr RPAREN DO stat ;
assign = a::(CID | ID) COLON_EQUALS condExpr ;
multStat = LBRACE NEWLINE* stat (SEMI NEWLINE* stat)* NEWLINE* RBRACE SEMI ;
condExpr = boolExpr (QUESTION condExpr COLON condExpr)? ;
boolExpr = andExpr (DISJUNCTION andExpr)* ;
andExpr = compExpr (CONJUNCTION compExpr)* ;
compExpr = expr ((GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | GREATER | LESS) expr)? ;
expr = multExpr ((ADDITION | SUBTRACTION) multExpr)* ;
multExpr = expoExpr ((MULTIPLICATION | DIVISION) expoExpr)* ;
expoExpr = atom EXPONENTIATION? ;
atom = INT_NUMBER ;
atom = DOUBLE_NUMBER ;
atom = a::(CID | ID) (LPAREN (expr (COMMA expr)*)? RPAREN)? ;
atom = LPAREN condExpr RPAREN ;
NEWLINE = '\r'? '\n' ;
SEMI = ';' ;
COMMA = ',' ;
COLON = ':' ;
QUESTION = '?' ;
EQUALITY = '==' ;
NON_EQUALITY = '!=' ;
LESS = '<' ;
LESS_EQUAL = '<=' ;
GREATER_EQUAL = '>=' ;
GREATER = '>' ;
CONJUNCTION = '/\\' ;
DISJUNCTION = '\\/' ;
COLON_EQUALS = ':=' ;
ADDITION = '+' ;
SUBTRACTION = '-' ;
DIVISION = '/' ;
MULTIPLICATION = '*' ;
EXPONENTIATION = '**' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
DONE = 'done' ;
TROLLEY = 'trolley' ;
CONTAINS = 'contains' ;
SKIP = 'skip' ;
CHECKOUT = 'checkout' ;
INT = 'int' ;
DOUBLE = 'double' ;
CONST = 'const' ;
VAR = 'var' ;
PROC = 'proc' ;
LBRACE = '{' ;
RBRACE = '}' ;
LPAREN = '(' ;
RPAREN = ')' ;
INT_NUMBER = ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLE_NUMBER = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* (('e' | 'E') INT_NUMBER)? ;
CID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
COMMENT = '/*' ANY* '*/' ;
