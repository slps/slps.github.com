module Main

exports
  sorts
        Prog Decl Stat Ifthenelse Whileloop Assign MultStat CondExpr BoolExpr AndExpr CompExpr Expr MultExpr ExpoExpr Atom NEWLINE SEMI COMMA COLON QUESTION EQUALITY NON-EQUALITY LESS LESS-EQUAL GREATER-EQUAL GREATER CONJUNCTION DISJUNCTION COLON-EQUALS ADDITION SUBTRACTION DIVISION MULTIPLICATION EXPONENTIATION IF THEN ELSE WHILE DO DONE TROLLEY CONTAINS SKIP CHECKOUT INT DOUBLE CONST VAR PROC LBRACE RBRACE LPAREN RPAREN INT-NUMBER DOUBLE-NUMBER CID ID WS COMMENT 
  context-free syntax
        TROLLEY CID CONTAINS NEWLINE* Decl* CHECKOUT NEWLINE* Stat DONE SEMI -> Prog

        VAR ID COLON (INT | DOUBLE) SEMI NEWLINE* -> Decl
        CONST CID COLON (INT | DOUBLE) COLON-EQUALS CondExpr SEMI NEWLINE* -> Decl
        PROC a::ID LPAREN (Decl (COMMA Decl)*)? RPAREN COLON-EQUALS Stat SEMI NEWLINE* -> Decl

        CondExpr -> Stat
        SKIP -> Stat
        Assign -> Stat
        MultStat -> Stat
        Ifthenelse -> Stat
        Whileloop -> Stat

        IF LPAREN BoolExpr RPAREN THEN Stat (SEMI ELSE Stat)? -> Ifthenelse

        WHILE LPAREN BoolExpr RPAREN DO Stat -> Whileloop

        a::(CID | ID) COLON-EQUALS CondExpr -> Assign

        LBRACE NEWLINE* Stat (SEMI NEWLINE* Stat)* NEWLINE* RBRACE SEMI -> MultStat

        BoolExpr (QUESTION CondExpr COLON CondExpr)? -> CondExpr

        AndExpr (DISJUNCTION AndExpr)* -> BoolExpr

        CompExpr (CONJUNCTION CompExpr)* -> AndExpr

        Expr ((GREATER-EQUAL | LESS-EQUAL | EQUALITY | NON-EQUALITY | GREATER | LESS) Expr)? -> CompExpr

        MultExpr ((ADDITION | SUBTRACTION) MultExpr)* -> Expr

        ExpoExpr ((MULTIPLICATION | DIVISION) ExpoExpr)* -> MultExpr

        Atom EXPONENTIATION? -> ExpoExpr

        INT-NUMBER -> Atom
        DOUBLE-NUMBER -> Atom
        a::(CID | ID) (LPAREN (Expr (COMMA Expr)*)? RPAREN)? -> Atom
        LPAREN CondExpr RPAREN -> Atom

        "\r"? "\n" -> NEWLINE

        ";" -> SEMI

        "," -> COMMA

        ":" -> COLON

        "?" -> QUESTION

        "==" -> EQUALITY

        "!=" -> NON-EQUALITY

        "<" -> LESS

        "<=" -> LESS-EQUAL

        ">=" -> GREATER-EQUAL

        ">" -> GREATER

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        ":=" -> COLON-EQUALS

        "+" -> ADDITION

        "-" -> SUBTRACTION

        "/" -> DIVISION

        "*" -> MULTIPLICATION

        "**" -> EXPONENTIATION

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        "done" -> DONE

        "trolley" -> TROLLEY

        "contains" -> CONTAINS

        "skip" -> SKIP

        "checkout" -> CHECKOUT

        "int" -> INT

        "double" -> DOUBLE

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "{" -> LBRACE

        "}" -> RBRACE

        "(" -> LPAREN

        ")" -> RPAREN

        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT-NUMBER

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INT-NUMBER)? -> DOUBLE-NUMBER

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        (" " | "\t" | "\r" | "\n")+ -> WS

        "/*" ANY* "*/" -> COMMENT
