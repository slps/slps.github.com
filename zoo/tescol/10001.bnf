prog:
        stat+
stat:
        expr SEMI
        trolley
        checkout
        assignment
        ifstat
        whilestat
        SKIP SEMI
        LBRACE stat+ RBRACE
        SEMI
type:
        INT
        DOUBLE
def:
        CONST n::cid COLON t::type COLON_EQUALS e::expr SEMI
        VAR vartypedef SEMI
        procedure SEMI
vartypedef:
        id COLON (INT | DOUBLE)
condExpr:
        boolExpr (QUESTION condExpr COLON condExpr)?
boolExpr:
        andExpr (DISJUNCTION andExpr)*
andExpr:
        compExpr (CONJUNCTION compExpr)*
compExpr:
        expr ((GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | LESS | GREATER) expr)?
expr:
        multExpr ((ADDITION | SUBTRACTION) multExpr)*
multExpr:
        atom ((MULTIPLICATION | DIVISION | EXPONENTIATION) atom)*
ID:
        "id"
id:
        i::IDENT
cid:
        i::CIDENT
atom:
        INT_NUMBER
        DOUBLE_NUMBER
        id
        cid
        LPAREN condExpr RPAREN
        proccall
trolley:
        TROLLEY cid CONTAINS def*
checkout:
        CHECKOUT stat SEMI? DONE SEMI
assignment:
        id COLON_EQUALS condExpr SEMI
ifstat:
        IF e::condExpr THEN ts::stat ELSE es::stat
whilestat:
        WHILE e::condExpr DO s::stat
ARGLIST:
        "arglist"
PROCBODY:
        "procbody"
procedure:
        PROC i::id LPAREN (a::vartypedef (COMMA a::vartypedef)*)? RPAREN COLON_EQUALS s::stat
CALL:
        "call"
proccall:
        i::id LPAREN (a::atom (COMMA a::atom)*)? RPAREN
SEMI:
        ";"
COMMA:
        ","
COLON:
        ":"
QUESTION:
        "?"
EQUALITY:
        "=="
NON_EQUALITY:
        "!="
LESS:
        "<"
LESS_EQUAL:
        "<="
GREATER_EQUAL:
        ">="
GREATER:
        ">"
CONJUNCTION:
        "/\\"
DISJUNCTION:
        "\\/"
COLON_EQUALS:
        ":="
ADDITION:
        "+"
SUBTRACTION:
        "-"
DIVISION:
        "/"
MULTIPLICATION:
        "*"
EXPONENTIATION:
        "**"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
DONE:
        "done"
TROLLEY:
        "trolley"
CONTAINS:
        "contains"
SKIP:
        "skip"
CHECKOUT:
        "checkout"
INT:
        "int"
DOUBLE:
        "double"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
LBRACE:
        "{"
RBRACE:
        "}"
LPAREN:
        "("
RPAREN:
        ")"
INT_NUMBER:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE_NUMBER:
        INT_NUMBER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT_NUMBER)?
CIDENT:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
IDENT:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
COMMENT:
        "/*" ANY* "*/"
