program = TROLLEY ID CONTAINS declaration+ CHECKOUT statement SEMI DONE SEMI ;
declaration = (constdecl | vardecl | procdecl) SEMI ;
constdecl = CONST ID COLON type DEF arithmeticExpression ;
vardecl = VAR ID COLON type ;
procdecl = PROC ID LPAREN parameterList RPAREN COLON type DEF statement ;
parameterList = ID COLON type (COMMA ID COLON type)* ;
arithmeticExpression = procedureApplication (conditionalExpression QUESTION arithmeticExpression COLON arithmeticExpression)? ;
procedureApplication = arithmetic (ID LPAREN expressionList RPAREN)? ;
expressionList = arithmeticExpression (COMMA arithmeticExpression)* ;
arithmetic = number (arithmeticOperator number)* ;
number = INT ;
number = DOUBLE ;
number = ID ;
number = LPAREN conditionalExpression RPAREN ;
conditionalExpression = booleanExpression (QUESTION conditional COLON conditional)? ;
booleanExpression = conjExpression (CONJUNC conjExpression)* ;
conjExpression = disjExpression (DISJUNC disjExpression)* ;
disjExpression = expression (relationalOperator expression)? ;
expression = number (arithmeticOperator number)* ;
statement = SKIP ;
statement = assignment ;
statement = conditional ;
statement = loop ;
statement = statementList ;
assignment = ID DEF arithmeticExpression ;
conditional = IF booleanExpression THEN statement ELSE statement ;
loop = WHILE booleanExpression DO statement ;
statementList = CLPAREN statement SEMI (statement SEMI)* CRPAREN ;
operator = DEF ;
operator = QUESTION ;
operator = CONJUNC ;
operator = DISJUNC ;
operator = arithmeticOperator ;
operator = relationalOperator ;
arithmeticOperator = ADD ;
arithmeticOperator = SUBTRACT ;
arithmeticOperator = DIVIDE ;
arithmeticOperator = MULTIPLY ;
arithmeticOperator = EXPON ;
relationalOperator = EQUAL ;
relationalOperator = NOTEQUAL ;
relationalOperator = MORETHAN ;
relationalOperator = LESSTHAN ;
relationalOperator = MORETHANEQUAL ;
relationalOperator = LESSTHANEQUAL ;
type = INTKEYWORD ;
type = DOUBLEKEYWORD ;
CONST = 'const' ;
VAR = 'var' ;
PROC = 'proc' ;
INTKEYWORD = 'int' ;
DOUBLEKEYWORD = 'double' ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
CMT = '/*' ANY* '*/' ;
INT = ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLE = INT? '.' (('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* | (('e' | 'E') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+)) ;
LPAREN = '(' ;
RPAREN = ')' ;
CLPAREN = '{' ;
CRPAREN = '}' ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
SEMI = ';' ;
COLON = ':' ;
COMMA = ',' ;
DEF = ':=' ;
QUESTION = '?' ;
ADD = '+' ;
SUBTRACT = '-' ;
DIVIDE = '/' ;
MULTIPLY = '*' ;
EXPON = '**' ;
EQUAL = '==' ;
NOTEQUAL = '!=' ;
MORETHAN = '>' ;
LESSTHAN = '<' ;
MORETHANEQUAL = '>=' ;
LESSTHANEQUAL = '<=' ;
CONJUNC = '/\\' ;
DISJUNC = '\\/' ;
