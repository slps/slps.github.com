program:
        TROLLEY CONSTANT CONTAINS declaration* CHECKOUT statementlist SEMI DONE SEMI
TROLLEY:
        "trolley"
CONSTANT:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
CONTAINS:
        "contains"
declaration:
        consdec
        vardec
        procdec
consdec:
        CONST CONSTANT COLON type DEFAS aexpr SEMI
CONST:
        "const"
COLON:
        ":"
type:
        INTEGER
        DOUBLE
INTEGER:
        "int"
DOUBLE:
        "double"
DEFAS:
        ":="
aexpr:
        cexpr
cexpr:
        bexpr (QM cexpr COLON cexpr)?
bexpr:
        con (DISJUN con)*
con:
        ropexpr (CONJUN ropexpr)*
ropexpr:
        expr (rop expr)?
expr:
        multExpr ((PLUS | MINUS) multExpr)*
        procapp
multExpr:
        expon ((MULT | DIV) expon)*
expon:
        sign (EXPON sign)*
sign:
        (MINUS | PLUS)? atom
MINUS:
        "-"
PLUS:
        "+"
atom:
        number
        VARIABLE
        CONSTANT
        LPAR cexpr RPAR
number:
        INT
        DUB
INT:
        "0"
        ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*
DUB:
        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INT)?
VARIABLE:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
LPAR:
        "("
RPAR:
        ")"
EXPON:
        "**"
MULT:
        "*"
DIV:
        "/"
procapp:
        VARIABLE LPAR aexprlist RPAR
aexprlist:
        aexpr (COMMA aexpr)*
COMMA:
        ","
rop:
        EQ
        NEQ
        LESS
        MORE
        LESSEQ
        MOREEQ
EQ:
        "=="
NEQ:
        "!="
LESS:
        "<"
MORE:
        ">"
LESSEQ:
        "<="
MOREEQ:
        ">="
CONJUN:
        "/\\"
DISJUN:
        "\\/"
QM:
        "?"
SEMI:
        ";"
vardec:
        VAR parameter SEMI
VAR:
        "var"
parameter:
        VARIABLE COLON type
procdec:
        PROC VARIABLE LPAR paramlist RPAR COLON type DEFAS statementlist SEMI
PROC:
        "proc"
paramlist:
        parameter (COMMA parameter)*
statementlist:
        statement
        LCPAR statement (SEMI statement)* RCPAR
statement:
        SKIP
        assignment
        conditional
        loop
SKIP:
        "skip"
assignment:
        VARIABLE DEFAS aexpr
conditional:
        IF bexpr THEN statementlist ELSE statementlist
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
loop:
        WHILE bexpr DO statementlist
WHILE:
        "while"
DO:
        "do"
LCPAR:
        "{"
RCPAR:
        "}"
CHECKOUT:
        "checkout"
DONE:
        "done"
