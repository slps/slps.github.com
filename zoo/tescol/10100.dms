prog = NEWLINE* TROLLEY NEWLINE* CID NEWLINE* CONTAINS NEWLINE* declarations NEWLINE* statement NEWLINE* SEMI NEWLINE* DONE NEWLINE* SEMI ;
statement = statementList ;
statement = condStatement ;
statement = expression ;
statement = assignment ;
statement = loop ;
statement = SKIP ;
loop = WHILE expression DO statement ;
paramlist = LPAREN (ID COLON type (COMMA ID COLON type)*)? RPAREN ;
individual_declaration = CONST CID COLON type COLON_EQUALS expression ;
individual_declaration = VAR ID COLON type ;
individual_declaration = PROC ID paramlist COLON type COLON_EQUALS statement ;
declarations = (individual_declaration NEWLINE*)* CHECKOUT ;
statementList = LBRACE statement (SEMI statement NEWLINE*)* RBRACE ;
assignment = ID COLON_EQUALS expression ;
type = INT ;
type = DOUBLE ;
atom = INT_NUMBER ;
atom = DOUBLE_NUMBER ;
atom = ID ;
atom = CID ;
atom = LPAREN expression RPAREN ;
multExpression = atom ((DIVISION | MULTIPLICATION | EXPONENTIATION) atom)* ;
addExpression = multExpression ((ADDITION | SUBTRACTION) multExpression)* ;
relationalExpression = addExpression ((GREATER_EQUAL | GREATER | LESS_EQUAL | LESS | EQUALITY | NON_EQUALITY) addExpression)? ;
orExpression = relationalExpression (DISJUNCTION relationalExpression)* ;
andExpression = orExpression (CONJUNCTION orExpression)* ;
expression = andExpression (QUESTION andExpression COLON andExpression)? ;
condStatement = IF expression THEN statement ELSE statement ;
NEWLINE = '\r'? '\n' ;
SEMI = ';' ;
COMMA = ',' ;
COLON = ':' ;
QUESTION = '?' ;
EQUALITY = '==' ;
NON_EQUALITY = '!=' ;
LESS = '<' ;
LESS_EQUAL = '<=' ;
GREATER_EQUAL = '>=' ;
GREATER = '>' ;
CONJUNCTION = '/\\' ;
DISJUNCTION = '\\/' ;
COLON_EQUALS = ':=' ;
ADDITION = '+' ;
SUBTRACTION = '-' ;
DIVISION = '/' ;
MULTIPLICATION = '*' ;
EXPONENTIATION = '**' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
DONE = 'done' ;
TROLLEY = 'trolley' ;
CONTAINS = 'contains' ;
SKIP = 'skip' ;
CHECKOUT = 'checkout' ;
INT = 'int' ;
DOUBLE = 'double' ;
CONST = 'const' ;
VAR = 'var' ;
PROC = 'proc' ;
LBRACE = '{' ;
RBRACE = '}' ;
LPAREN = '(' ;
RPAREN = ')' ;
INT_NUMBER = ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLE_NUMBER = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* (('e' | 'E') INT_NUMBER)? ;
CID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
COMMENT = '/*' ANY* '*/' ;
