program:
        TROLLEY CONSTANTID CONTAINS declaration* CHECKOUT mainstatement SEMI DONE SEMI
declaration:
        variabledec
        constantdec
        proceduredec
variabledec:
        VARIABLE ID COLON type SEMI
constantdec:
        CONSTANT CONSTANTID COLON type ASSIGN condExpr SEMI
proceduredec:
        PROCEDURE pid1::ID PARENOPEN (pid2::ID COLON type (COMMA pid3::ID COLON type)*)* PARENCLOSE COLON type ASSIGN mainstatement SEMI
type:
        INT
        FLOAT
condExpr:
        boolExpr (MIXFIX condExpr COLON condExpr)?
boolExpr:
        andExpr (DISJUNCTION andExpr)*
andExpr:
        compExpr (CONJUNCTION compExpr)*
compExpr:
        expr ((GREATEREQUAL | LESSEQUAL | GREATER | LESS | EQUALITY | NONEQUALITY) expr)*
expr:
        multExpr ((ADDITION | SUBTRACTION) multExpr)*
multExpr:
        exponExpr ((MULTIPLICATION | DIVISION) exponExpr)*
exponExpr:
        unaryneg EXPONENTIATION*
unaryneg:
        SUBTRACTION* atom
atom:
        INTEGER
        FLOATINGPOINT
        CONSTANTID
        ID
        PARENOPEN condExpr PARENCLOSE
        procedureList
procedureList:
        ID PARENOPEN id1::condExpr (COMMA id2::condExpr)* PARENCLOSE
mainstatement:
        EPSILON
        statement
        STATEMENTOPEN statement (SEMI statement)* STATEMENTCLOSE
statement:
        SKIP
        ID ASSIGN condExpr
        IF boolExpr THEN statement ELSE statement
        WHILE boolExpr DO statement
SEMI:
        ";"
COMMA:
        ","
ASSIGN:
        ":="
DECIMAL:
        "."
STATEMENTOPEN:
        "{"
STATEMENTCLOSE:
        "}"
PARENOPEN:
        "("
PARENCLOSE:
        ")"
ADDITION:
        "+"
SUBTRACTION:
        "-"
DIVISION:
        "/"
MULTIPLICATION:
        "*"
EXPONENTIATION:
        "**"
MIXFIX:
        "?"
COLON:
        ":"
EQUALITY:
        "=="
NONEQUALITY:
        "!="
GREATER:
        ">"
GREATEREQUAL:
        ">="
LESS:
        "<"
LESSEQUAL:
        "<="
CONJUNCTION:
        "/\\"
DISJUNCTION:
        "\\/"
INT:
        "int"
FLOAT:
        "double"
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
CONSTANT:
        "const"
VARIABLE:
        "var"
PROCEDURE:
        "proc"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
CONSTANTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
INTEGER:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
FLOATINGPOINT:
        INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ (("e" | "E") (ADDITION | SUBTRACTION)* INTEGER)?
WS:
        (" " | "\t" | "\r" | "\n")+
COMMENT:
        "/*" ANY* "*/"
