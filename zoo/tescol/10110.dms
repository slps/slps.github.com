program = TROLLEY cidentifier CONTAINS dec* CHECKOUT CURLY_L (statement (SEMI statement)*)? CURLY_R SEMI DONE SEMI EOF ;
identifier = ID ;
identifier = CID ;
cidentifier = CID ;
whitespace = WS ;
comment = COMMENT ;
COMMENT = '/*' ANY* '*/' ;
operator = ADD ;
operator = SUBTRACT ;
operator = MULTIPLY ;
operator = DIVIDE ;
operator = EXPONENTIATION ;
operator = EQUAL ;
comparator = EQUALITY ;
comparator = NON_EQUALITY ;
comparator = LESS_THAN ;
comparator = GREATER_THAN ;
comparator = LESS_THAN_EQ ;
comparator = GREATER_THAN_EQ ;
ADD = '+' ;
SUBTRACT = '-' ;
MULTIPLY = '*' ;
DIVIDE = '/' ;
EXPONENTIATION = MULTIPLY '*' ;
EQUAL = '=' ;
CONJ = '/\\' ;
DISJ = '\\/' ;
EQUALITY = '==' ;
NON_EQUALITY = '!=' ;
LESS_THAN = '<' ;
GREATER_THAN = '>' ;
LESS_THAN_EQ = '<=' ;
GREATER_THAN_EQ = '>=' ;
QUESTION = '?' ;
EXPONENT = ('e' | 'E') ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLE = INT '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* EXPONENT? ;
DOUBLE = '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ EXPONENT? ;
DOUBLE = INT EXPONENT ;
DOUBLE = '.' ;
INT = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
PROC = 'proc' ;
DO = 'do' ;
WHILE = 'while' ;
KEY_INT = 'int' ;
KEY_DOUBLE = 'double' ;
VAR = 'var' ;
CONST = 'const' ;
SEMI = ';' ;
COMMA = ',' ;
COLON = ':' ;
CURLY_L = '{' ;
CURLY_R = '}' ;
DEFINED_AS = ':=' ;
RPAR = ')' ;
LPAR = '(' ;
CID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n' | '\f')+ ;
type = 'int' ;
type = 'double' ;
var = 'var' IDENTIFIER COLON type SEMI ;
constant = 'const' cidentifier COLON type DEFINED_AS expr SEMI ;
proc = 'proc' IDENTIFIER '(' IDENTIFIER COLON type (COMMA IDENTIFIER COLON type)* ')' COLON type DEFINED_AS statement* SEMI ;
negation = '-' ;
condExpr = boolExpr (QUESTION condExpr COLON condExpr)? ;
boolExpr = andExpr (DISJ andExpr)* ;
andExpr = compExpr (CONJ compExpr)* ;
compExpr = expr (comparator expr)? ;
expr = negation? expr2 ;
expr2 = multExpr ((ADD | SUBTRACT) multExpr)* ;
multExpr = powerExpr ((MULTIPLY | DIVIDE) powerExpr)* ;
powerExpr = atom (EXPONENTIATION atom)* ;
atom = INT ;
atom = DOUBLE ;
atom = ID ;
atom = CID ;
atom = LPAR condExpr RPAR ;
atom = procedure_expr ;
cond_expr = QUESTION boolExpr QUESTION expr COLON expr ;
procedure_expr = IDENTIFIER LPAR expr (COMMA expr)* RPAR ;
dec = constant ;
dec = var ;
dec = proc ;
conditional = IF condExpr THEN statement ELSE statement ;
assignment = IDENTIFIER DEFINED_AS expr ;
statement = SKIP ;
statement = conditional ;
statement = loop ;
statement = assignment ;
statement = cond_expr ;
statement = CURLY_L (SKIP | conditional | loop | assignment | cond_expr) (SEMI statement)* CURLY_R ;
loop = WHILE boolExpr DO statement ;
EOF = ;
