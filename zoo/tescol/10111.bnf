prog:
        KW_TROLLEY ID_GENERAL KW_CONTAINS decl* KW_CHECKOUT statement KW_DONE SYM_SEMI
mixfix:
        predicate (SYM_QM mixfix SYM_COLON mixfix)?
predicate:
        pred_term (SYM_OR pred_term)*
pred_term:
        pred_base (SYM_AND pred_base)*
pred_base:
        expr (comparator expr)*
expr:
        subtraction_subexpr (SYM_ADD subtraction_subexpr)*
subtraction_subexpr:
        term (SYM_SUB term)*
term:
        div_subterm (SYM_MULT div_subterm)*
div_subterm:
        molecule (SYM_DIV molecule)*
molecule:
        atom (SYM_EXP molecule)?
atom:
        immediate
        v::varproc_id
        proc_call
        parenthesised
decl:
        (const_decl | var_decl) SYM_SEMI
        proc_decl
const_decl:
        KW_CONST id::ID_GENERAL SYM_COLON t::type SYM_ASS e::expr
var_decl:
        KW_VAR id::varproc_id SYM_COLON t::type (SYM_ASS expr)?
proc_decl:
        KW_PROC id::varproc_id param_decl_list SYM_COLON type SYM_ASS statement
param_and_type:
        varproc_id SYM_COLON type
param_decl_list:
        SYM_OPEN_PAREN (param_and_type (SYM_COMMA param_and_type)*)? SYM_CLOSE_PAREN
statement:
        KW_SKIP SYM_SEMI
        a::varproc_id SYM_ASS c::mixfix SYM_SEMI
        SYM_OPEN_BRACE statement+ SYM_CLOSE_BRACE SYM_SEMI
        KW_IF mixfix KW_THEN statement KW_ELSE statement
        KW_WHILE mixfix KW_DO statement
comparator:
        SYM_EQ
        SYM_INEQ
        SYM_GT
        SYM_NS_GT
        SYM_LT
        SYM_NS_LT
parenthesised:
        SYM_OPEN_PAREN mixfix SYM_CLOSE_PAREN
type:
        KW_TYPE_INT
        KW_TYPE_DOUBLE
varproc_id:
        ID_VARPROC
        ID_GENERAL
arg_list:
        SYM_OPEN_PAREN (expr (SYM_COMMA expr)*)? SYM_CLOSE_PAREN
proc_call:
        id::varproc_id l::arg_list
immediate:
        integerNum
        doubleNum
integerNum:
        (SYM_ADD | SYM_SUB)? INT
doubleNum:
        (SYM_ADD | SYM_SUB)? DOUBLE
DOUBLE:
        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT?
INT:
        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
KW_TYPE_INT:
        "int"
KW_TYPE_DOUBLE:
        "double"
KW_DONE:
        "done"
KW_SKIP:
        "skip"
KW_IF:
        "if"
KW_THEN:
        "then"
KW_ELSE:
        "else"
KW_WHILE:
        "while"
KW_DO:
        "do"
KW_TROLLEY:
        "trolley"
KW_CHECKOUT:
        "checkout"
KW_CONTAINS:
        "contains"
KW_CONST:
        "const"
KW_VAR:
        "var"
KW_PROC:
        "proc"
COMMENT:
        "/*" ANY* "*/"
WS:
        (" " | "\t" | "\r" | "\n")+
SYM_SEMI:
        ";"
SYM_COMMA:
        ","
SYM_COLON:
        ":"
SYM_QM:
        "?"
SYM_ASS:
        ":="
SYM_OPEN_PAREN:
        "("
SYM_CLOSE_PAREN:
        ")"
SYM_OPEN_BRACE:
        "{"
SYM_CLOSE_BRACE:
        "}"
SYM_EXP:
        "**"
SYM_ADD:
        "+"
SYM_SUB:
        "-"
SYM_MULT:
        "*"
SYM_DIV:
        "/"
SYM_AND:
        "/\\"
SYM_OR:
        "\\/"
SYM_EQ:
        "=="
SYM_INEQ:
        "!="
SYM_LT:
        "<"
SYM_GT:
        ">"
SYM_NS_LT:
        "<="
SYM_NS_GT:
        ">="
ID_GENERAL:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID_VARPROC:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
EXPONENT:
        ("e" | "E") (SYM_ADD | SYM_SUB)? INT
