module Main

exports
  sorts
        Prog Mixfix Predicate Pred-term Pred-base Expr Subtraction-subexpr Term Div-subterm Molecule Atom Decl Const-decl Var-decl Proc-decl Param-and-type Param-decl-list Statement Comparator Parenthesised Type Varproc-id Arg-list Proc-call Immediate IntegerNum DoubleNum DOUBLE INT KW-TYPE-INT KW-TYPE-DOUBLE KW-DONE KW-SKIP KW-IF KW-THEN KW-ELSE KW-WHILE KW-DO KW-TROLLEY KW-CHECKOUT KW-CONTAINS KW-CONST KW-VAR KW-PROC COMMENT WS SYM-SEMI SYM-COMMA SYM-COLON SYM-QM SYM-ASS SYM-OPEN-PAREN SYM-CLOSE-PAREN SYM-OPEN-BRACE SYM-CLOSE-BRACE SYM-EXP SYM-ADD SYM-SUB SYM-MULT SYM-DIV SYM-AND SYM-OR SYM-EQ SYM-INEQ SYM-LT SYM-GT SYM-NS-LT SYM-NS-GT ID-GENERAL ID-VARPROC EXPONENT 
  context-free syntax
        KW-TROLLEY ID-GENERAL KW-CONTAINS Decl* KW-CHECKOUT Statement KW-DONE SYM-SEMI -> Prog

        Predicate (SYM-QM Mixfix SYM-COLON Mixfix)? -> Mixfix

        Pred-term (SYM-OR Pred-term)* -> Predicate

        Pred-base (SYM-AND Pred-base)* -> Pred-term

        Expr (Comparator Expr)* -> Pred-base

        Subtraction-subexpr (SYM-ADD Subtraction-subexpr)* -> Expr

        Term (SYM-SUB Term)* -> Subtraction-subexpr

        Div-subterm (SYM-MULT Div-subterm)* -> Term

        Molecule (SYM-DIV Molecule)* -> Div-subterm

        Atom (SYM-EXP Molecule)? -> Molecule

        Immediate -> Atom
        v::Varproc-id -> Atom
        Proc-call -> Atom
        Parenthesised -> Atom

        (Const-decl | Var-decl) SYM-SEMI -> Decl
        Proc-decl -> Decl

        KW-CONST id::ID-GENERAL SYM-COLON t::Type SYM-ASS e::Expr -> Const-decl

        KW-VAR id::Varproc-id SYM-COLON t::Type (SYM-ASS Expr)? -> Var-decl

        KW-PROC id::Varproc-id Param-decl-list SYM-COLON Type SYM-ASS Statement -> Proc-decl

        Varproc-id SYM-COLON Type -> Param-and-type

        SYM-OPEN-PAREN (Param-and-type (SYM-COMMA Param-and-type)*)? SYM-CLOSE-PAREN -> Param-decl-list

        KW-SKIP SYM-SEMI -> Statement
        a::Varproc-id SYM-ASS c::Mixfix SYM-SEMI -> Statement
        SYM-OPEN-BRACE Statement+ SYM-CLOSE-BRACE SYM-SEMI -> Statement
        KW-IF Mixfix KW-THEN Statement KW-ELSE Statement -> Statement
        KW-WHILE Mixfix KW-DO Statement -> Statement

        SYM-EQ -> Comparator
        SYM-INEQ -> Comparator
        SYM-GT -> Comparator
        SYM-NS-GT -> Comparator
        SYM-LT -> Comparator
        SYM-NS-LT -> Comparator

        SYM-OPEN-PAREN Mixfix SYM-CLOSE-PAREN -> Parenthesised

        KW-TYPE-INT -> Type
        KW-TYPE-DOUBLE -> Type

        ID-VARPROC -> Varproc-id
        ID-GENERAL -> Varproc-id

        SYM-OPEN-PAREN (Expr (SYM-COMMA Expr)*)? SYM-CLOSE-PAREN -> Arg-list

        id::Varproc-id l::Arg-list -> Proc-call

        IntegerNum -> Immediate
        DoubleNum -> Immediate

        (SYM-ADD | SYM-SUB)? INT -> IntegerNum

        (SYM-ADD | SYM-SUB)? DOUBLE -> DoubleNum

        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? -> DOUBLE

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT

        "int" -> KW-TYPE-INT

        "double" -> KW-TYPE-DOUBLE

        "done" -> KW-DONE

        "skip" -> KW-SKIP

        "if" -> KW-IF

        "then" -> KW-THEN

        "else" -> KW-ELSE

        "while" -> KW-WHILE

        "do" -> KW-DO

        "trolley" -> KW-TROLLEY

        "checkout" -> KW-CHECKOUT

        "contains" -> KW-CONTAINS

        "const" -> KW-CONST

        "var" -> KW-VAR

        "proc" -> KW-PROC

        "/*" ANY* "*/" -> COMMENT

        (" " | "\t" | "\r" | "\n")+ -> WS

        ";" -> SYM-SEMI

        "," -> SYM-COMMA

        ":" -> SYM-COLON

        "?" -> SYM-QM

        ":=" -> SYM-ASS

        "(" -> SYM-OPEN-PAREN

        ")" -> SYM-CLOSE-PAREN

        "{" -> SYM-OPEN-BRACE

        "}" -> SYM-CLOSE-BRACE

        "**" -> SYM-EXP

        "+" -> SYM-ADD

        "-" -> SYM-SUB

        "*" -> SYM-MULT

        "/" -> SYM-DIV

        "/\\" -> SYM-AND

        "\\/" -> SYM-OR

        "==" -> SYM-EQ

        "!=" -> SYM-INEQ

        "<" -> SYM-LT

        ">" -> SYM-GT

        "<=" -> SYM-NS-LT

        ">=" -> SYM-NS-GT

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID-GENERAL

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID-VARPROC

        ("e" | "E") (SYM-ADD | SYM-SUB)? INT -> EXPONENT
