program = TROLLEY CONSTID contains checkout done ;
contains = CONTAINS ((procdeclaration | constdeclaration | vardeclaration) SEMI)* ;
checkout = CHECKOUT statement SEMI ;
done = DONE SEMI ;
varid = CONSTID ;
varid = VARID ;
assignment = name::id DEFINEDAS exp::expression ;
constdeclaration = CONST name::CONSTID COLON t::type DEFINEDAS exp::expression ;
vardeclaration = VAR name::varid COLON t::type ;
procdeclaration = PROC name::varid LPAREN params::parameterlist RPAREN COLON t::type DEFINEDAS content::statement ;
parameterlist = name::varid COLON t::type (COMMA params::parameterlist)? ;
parameterlist =  ;
statement = SKIP ;
statement = LBRACE statement (SEMI statement)* SEMI? RBRACE ;
statement = assignment ;
statement = ifstatement ;
statement = whilestatement ;
ifstatement = IF exp::expression THEN statement ELSE statement ;
whilestatement = WHILE exp::expression DO statement ;
expression = e::mixfix ;
mixfix = e::conjunction (QUESTION t::mixfix COLON f::mixfix)? ;
conjunction = l::disjunction (AND r::disjunction)* ;
disjunction = l::comparison (OR r::comparison)* ;
comparison = l::addition_exp (c::conditional r::addition_exp)? ;
addition_exp = l::multiply_exp ((o::PLUS | o::MINUS) r::multiply_exp)* ;
multiply_exp = l::exp_exp ((o::MUL | o::FSLASH) r::exp_exp)* ;
exp_exp = l::atom_exp (EXP r::atom_exp)* ;
atom_exp = e::unary_exp ;
atom_exp = LPAREN exp::expression RPAREN ;
atom_exp = proc::proccall ;
unary_exp = MINUS? (num::number | var::id) ;
proccall = proc::varid LPAREN args::argumentlist RPAREN ;
argumentlist = exp::expression (COMMA args::argumentlist)? ;
argumentlist =  ;
conditional = t::EQUALITY ;
conditional = t::INEQUALITY ;
conditional = t::LANGLE ;
conditional = t::RANGLE ;
conditional = t::LTEQUALS ;
conditional = t::GTEQUALS ;
number = f::FLOAT ;
number = i::INT ;
number = u::UINT ;
id = name::(CONSTID | VARID) ;
SEMI = ';' ;
COLON = ':' ;
EQUALS = '=' ;
COMMA = ',' ;
PLUS = '+' ;
MINUS = '-' ;
MUL = '*' ;
EXP = '**' ;
FSLASH = '/' ;
LPAREN = '(' ;
RPAREN = ')' ;
QUESTION = '?' ;
BANG = '!' ;
LANGLE = '<' ;
RANGLE = '>' ;
LBRACE = '{' ;
RBRACE = '}' ;
AND = '/\\' ;
OR = '\\/' ;
DEFINEDAS = COLON EQUALS ;
GTEQUALS = RANGLE EQUALS ;
LTEQUALS = LANGLE EQUALS ;
EQUALITY = EQUALS EQUALS ;
INEQUALITY = BANG EQUALS ;
DONE = 'done' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
PROC = 'proc' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
SKIP = 'skip' ;
VAR = 'var' ;
CONST = 'const' ;
type = TINT ;
type = TDOUBLE ;
TINT = 'int' ;
TDOUBLE = 'double' ;
CONSTID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
VARID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
UINT = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
INT = ('+' | '-')? UINT ;
FLOAT = INT? '.' UINT? EXPONENT? ;
EXPONENT = ('e' | 'E') INT ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
COMMENT = '/*' ANY* '*/' ;
