program = progTree+ ;
progTree = TROLLEY CONSTID CONTAINS declarations* CHECKOUT stat DONE SEMI ;
declarations = CONST constDec SEMI ;
declarations = VAR varDec SEMI ;
declarations = PROC procDec SEMI ;
constDec = CONSTID COLON type DEFINEDAS subExpr ;
varDec = v1::smallId COLON type ;
procDec = p1::smallId LEFTPAR paramList RIGHTPAR COLON type DEFINEDAS stat ;
paramList = varDec (COMMA varDec)* ;
stat = conditionalStat ;
stat = loopStat ;
stat = assignStat ;
stat = LEFTBRACE stat (SEMI stat)* RIGHTBRACE SEMI ;
stat = SKIP ;
assignStat = smallId DEFINEDAS condExpr ;
conditionalStat = IF boolExpr THEN stat ELSE stat ;
loopStat = WHILE boolExpr DO stat ;
atom = CONSTID ;
atom = ID ;
atom = INT ;
atom = DOUBLE ;
atom = LEFTPAR condExpr RIGHTPAR ;
atom = applyProc ;
condExpr = boolExpr (QUESTION condExpr COLON condExpr)? ;
boolExpr = andExpr (DISJUNCTION andExpr)* ;
andExpr = compExpr (CONJUNCTION compExpr)* ;
compExpr = subExpr ((EQUALITY | NOTEQUAL | LESSTHAN | LESSTHANEQUAL | MORETHAN | MORETHANEQUAL) subExpr)? ;
subExpr = addExpr (MINUS addExpr)* ;
addExpr = mulExpr (PLUS mulExpr)* ;
mulExpr = divExpr (MULTIPLY divExpr)* ;
divExpr = expExpr (DIVIDE expExpr)* ;
expExpr = atom (EXPONENTIATION atom)* ;
smallId = CONSTID ;
smallId = ID ;
applyProc = smallId LEFTPAR exprList RIGHTPAR ;
exprList = compExpr (COMMA compExpr)* ;
type = INTEGER ;
type = FLOATDOUBLE ;
SEMI = ';' ;
COLON = ':' ;
COMMA = ',' ;
QUESTION = '?' ;
DEFINEDAS = ':=' ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
CONST = 'const' ;
VAR = 'var' ;
PROC = 'proc' ;
INTEGER = 'int' ;
FLOATDOUBLE = 'double' ;
COMMENT = '/*' ANY* '*/' ;
LEFTBRACE = '{' ;
RIGHTBRACE = '}' ;
LEFTPAR = '(' ;
RIGHTPAR = ')' ;
INT = ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLE = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* (('e' | 'E') INT)? ;
EXPONENT = ('e' | 'E') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
PLUS = '+' ;
MINUS = '-' ;
EXPONENTIATION = '**' ;
MULTIPLY = '*' ;
DIVIDE = '/' ;
EQUALITY = '==' ;
NOTEQUAL = '!=' ;
LESSTHAN = '<' ;
LESSTHANEQUAL = '<=' ;
MORETHAN = '>' ;
MORETHANEQUAL = '>=' ;
CONJUNCTION = '/\\' ;
DISJUNCTION = '\\/' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
CONSTID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
ID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
