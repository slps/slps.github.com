program:
        TROLLEY CONST_ID declarations statements DONE SEMI
dec_var:
        VAR ids COLON dec_types SEMI
declarations:
        CONTAINS (dec_const | dec_var | dec_proc)*
dec_const:
        CONST CONST_ID COLON dec_types DEFAS expr SEMI
ids:
        ID
        CONST_ID
dec_proc:
        PROC ID LPAR param_list COLON dec_types DEFAS statement SEMI
dec_types:
        TYPE_INT
        TYPE_DOUBLE
param_list:
        param_element? (COMMA param_element)*
param_element:
        ID COLON dec_types
statements:
        CHECKOUT statement SEMI
statement:
        assign
        SKIP
        conditional
        loop
        statement_group
statement_group:
        LCB statement (SEMI statement)* RCB
assign:
        ids DEFAS expr
conditional:
        IF exp_bools THEN statement ELSE statement
loop:
        WHILE exp_bools DO statement
expr:
        exp_bools (QMARK expr COLON expr)?
exp_bools:
        exp_and (DISJ exp_and)*
exp_and:
        exp_comp (CONJ exp_comp)*
exp_comp:
        exp_addsub ((COND_COMP_GREATE | COND_COMP_GREAT | COND_COMP_LESS | COND_COMP_LESSE | COND_EQUAL | COND_NONEQUAL) exp_addsub)?
exp_addsub:
        exp_multi ((ARITH_ADD | ARITH_SUB) exp_multi)*
exp_multi:
        exp_exp ((ARITH_MUL | ARITH_DIV) exp_exp)*
exp_exp:
        atom (ARITH_EXP atom)*
atom:
        INT
        DOUBLE
        ids argument_list?
        LPAR expr RPAR
argument_list:
        LPAR (expr (COMMA expr)*)? RPAR
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
DEFAS:
        ":="
SEMI:
        ";"
COLON:
        ":"
COMMA:
        ","
TYPE_INT:
        "int"
TYPE_DOUBLE:
        "double"
INT:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)?
LPAR:
        "("
RPAR:
        ")"
LCB:
        "{"
RCB:
        "}"
QMARK:
        "?"
ARITH_ADD:
        "+"
ARITH_SUB:
        "-"
ARITH_MUL:
        "*"
ARITH_DIV:
        "/"
ARITH_EXP:
        "**"
COND_EQUAL:
        "=="
COND_NONEQUAL:
        "!="
COND_COMP_GREAT:
        "<"
COND_COMP_GREATE:
        "<="
COND_COMP_LESS:
        ">"
COND_COMP_LESSE:
        ">="
CONJ:
        "/\\"
DISJ:
        "\\/"
WS:
        (" " | "\t" | "\r" | "\n")+
COMMENT:
        "/*" ANY* "*/"
CONST_ID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
