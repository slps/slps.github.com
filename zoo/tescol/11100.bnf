program:
        TROLLEY CONSTID CONTAINS (definition SEMI?)* CHECKOUT statement SEMI? DONE SEMI
definition:
        CONST CONSTID COLON type ASSIGNMENT expression
        VAR ID COLON type
        PROC ID LEFTBRACKET parameters? RIGHTBRACKET COLON type ASSIGNMENT statement
statement:
        SKIP SEMI
        ID ASSIGNMENT expression SEMI
        IF boolexp THEN statement ELSE statement
        WHILE boolexp DO statement
        LEFTBRACE statement+ RIGHTBRACE
atom:
        procedurecall
        ID
        CONSTID
        LEFTBRACKET expression RIGHTBRACKET
        value
unary:
        t::MINUS* atom
mult:
        t::unary (MULTIPLIER unary)*
addition:
        t::mult (addop mult)*
predicate:
        t::addition (COMPARISON u::addition)?
boolexp:
        t::predicate (BOOLOPERATOR u::predicate)*
expression:
        boolexp (QMARK t::mult COLON f::mult)?
procedurecall:
        ID LEFTBRACKET arguments? RIGHTBRACKET
arguments:
        expression (COMMA expression)*
parameter:
        ID COLON type
parameters:
        parameter (COMMA parameter)*
addop:
        PLUS
        MINUS
type:
        INTTYPE
        DOUBLETYPE
value:
        INT
        DOUBLE
COMMENT:
        "/*" ANY* "*/"
TROLLEY:
        "trolley"
CONTAINS:
        "contains"
CHECKOUT:
        "checkout"
DONE:
        "done"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
SKIP:
        "skip"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
INTTYPE:
        "int"
DOUBLETYPE:
        "double"
TRUE:
        "true"
FALSE:
        "false"
MULTIPLIER:
        "**"
        "/"
        "*"
PLUS:
        "+"
MINUS:
        "-"
BOOLOPERATOR:
        "/\\"
        "\\/"
COMPARISON:
        "=="
        "!="
        "<="
        ">="
        "<"
        ">"
ASSIGNMENT:
        ":="
COLON:
        ":"
SEMI:
        ";"
COMMA:
        ","
QMARK:
        "?"
LEFTBRACKET:
        "("
RIGHTBRACKET:
        ")"
LEFTBRACE:
        "{"
RIGHTBRACE:
        "}"
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
INT:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE:
        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INT)?
WS:
        (" " | "\t" | "\r" | "\n")+
