module Main

exports
  sorts
        Program Definition Statement Atom Unary Mult Addition Predicate Boolexp Expression Procedurecall Arguments Parameter Parameters Addop Type Value COMMENT TROLLEY CONTAINS CHECKOUT DONE CONST VAR PROC SKIP IF THEN ELSE WHILE DO INTTYPE DOUBLETYPE TRUE FALSE MULTIPLIER PLUS MINUS BOOLOPERATOR COMPARISON ASSIGNMENT COLON SEMI COMMA QMARK LEFTBRACKET RIGHTBRACKET LEFTBRACE RIGHTBRACE CONSTID ID INT DOUBLE WS 
  context-free syntax
        TROLLEY CONSTID CONTAINS (Definition SEMI?)* CHECKOUT Statement SEMI? DONE SEMI -> Program

        CONST CONSTID COLON Type ASSIGNMENT Expression -> Definition
        VAR ID COLON Type -> Definition
        PROC ID LEFTBRACKET Parameters? RIGHTBRACKET COLON Type ASSIGNMENT Statement -> Definition

        SKIP SEMI -> Statement
        ID ASSIGNMENT Expression SEMI -> Statement
        IF Boolexp THEN Statement ELSE Statement -> Statement
        WHILE Boolexp DO Statement -> Statement
        LEFTBRACE Statement+ RIGHTBRACE -> Statement

        Procedurecall -> Atom
        ID -> Atom
        CONSTID -> Atom
        LEFTBRACKET Expression RIGHTBRACKET -> Atom
        Value -> Atom

        t::MINUS* Atom -> Unary

        t::Unary (MULTIPLIER Unary)* -> Mult

        t::Mult (Addop Mult)* -> Addition

        t::Addition (COMPARISON u::Addition)? -> Predicate

        t::Predicate (BOOLOPERATOR u::Predicate)* -> Boolexp

        Boolexp (QMARK t::Mult COLON f::Mult)? -> Expression

        ID LEFTBRACKET Arguments? RIGHTBRACKET -> Procedurecall

        Expression (COMMA Expression)* -> Arguments

        ID COLON Type -> Parameter

        Parameter (COMMA Parameter)* -> Parameters

        PLUS -> Addop
        MINUS -> Addop

        INTTYPE -> Type
        DOUBLETYPE -> Type

        INT -> Value
        DOUBLE -> Value

        "/*" ANY* "*/" -> COMMENT

        "trolley" -> TROLLEY

        "contains" -> CONTAINS

        "checkout" -> CHECKOUT

        "done" -> DONE

        "const" -> CONST

        "var" -> VAR

        "proc" -> PROC

        "skip" -> SKIP

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        "int" -> INTTYPE

        "double" -> DOUBLETYPE

        "true" -> TRUE

        "false" -> FALSE

        "**" -> MULTIPLIER
        "/" -> MULTIPLIER
        "*" -> MULTIPLIER

        "+" -> PLUS

        "-" -> MINUS

        "/\\" -> BOOLOPERATOR
        "\\/" -> BOOLOPERATOR

        "==" -> COMPARISON
        "!=" -> COMPARISON
        "<=" -> COMPARISON
        ">=" -> COMPARISON
        "<" -> COMPARISON
        ">" -> COMPARISON

        ":=" -> ASSIGNMENT

        ":" -> COLON

        ";" -> SEMI

        "," -> COMMA

        "?" -> QMARK

        "(" -> LEFTBRACKET

        ")" -> RIGHTBRACKET

        "{" -> LEFTBRACE

        "}" -> RIGHTBRACE

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CONSTID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> ID

        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INT

        INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") INT)? -> DOUBLE

        (" " | "\t" | "\r" | "\n")+ -> WS
