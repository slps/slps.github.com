prog:
        TROLLEY constantidentifier CONTAINS declaration* CHECKOUT statement DONE SEMI
declaration:
        constdeclaration
        vardeclaration
        procdeclaration
constdeclaration:
        CONST constantidentifier COLON type DEFINED expression SEMI
vardeclaration:
        VAR varprocidentifier COLON type SEMI
procdeclaration:
        PROC varprocidentifier parameterlist COLON type DEFINED statement SEMI
parameterlist:
        PARENTHESISL (parameter (COMMA parameter)*)? PARENTHESISR
parameter:
        varprocidentifier COLON type
statement:
        SKIP SEMI
        assignment
        conditional
        loop
        groupedstatement
groupedstatement:
        BRACKETL statement+ BRACKETR SEMI
assignment:
        varprocidentifier DEFINED ae::expression SEMI
conditional:
        IF booleanexpression THEN statement ELSE statement
loop:
        WHILE booleanexpression DO statement
expression:
        p1::procedureapplication
        b1::booleanexpression (QUESTION expression COLON expression)?
booleanexpression:
        an1::andexpression (DISJUNCTION andexpression)*
andexpression:
        c1::compexpression (CONJUNCTION compexpression)*
compexpression:
        ar1::arithexpression (ROP arithexpression)?
arithexpression:
        m1::multdivexpression ((ADDITION | SUBTRACTION) m2::multdivexpression)*
multdivexpression:
        a1::atom ((EXPONENTIATION | DIVISION | MULTIPLICATION) a2::atom)*
atom:
        constantidentifier
        varprocidentifier
        number
        PARENTHESISL expression PARENTHESISR
procedureapplication:
        varprocidentifier PARENTHESISL arguments PARENTHESISR
arguments:
        e1::expression (COMMA e2::expression)*
number:
        INTEGER
        DOUBLE
type:
        INT
        DBLE
constantidentifier:
        CONSTID
varprocidentifier:
        VARPROCID
SEMI:
        ";"
COLON:
        ":"
COMMA:
        ","
DEFINED:
        ":="
QUESTION:
        "?"
BRACKETL:
        "{"
BRACKETR:
        "}"
PARENTHESISL:
        "("
PARENTHESISR:
        ")"
CONJUNCTION:
        "/\\"
DISJUNCTION:
        "\\/"
ADDITION:
        "+"
SUBTRACTION:
        "-"
DIVISION:
        "/"
MULTIPLICATION:
        "*"
EXPONENTIATION:
        "**"
ROP:
        "=="
        "!="
        "<"
        "<="
        ">="
        ">"
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
INT:
        "int"
DBLE:
        "double"
VAR:
        "var"
PROC:
        "proc"
CONST:
        "const"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
INTEGER:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+
DOUBLE:
        INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT?
EXPONENT:
        ("e" | "E") INTEGER
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
VARPROCID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
COMMENT:
        "/*" ANY* "*/"
