module Main

exports
  sorts
        Prog Declaration Constdeclaration Vardeclaration Procdeclaration Parameterlist Parameter Statement Groupedstatement Assignment Conditional Loop Expression Booleanexpression Andexpression Compexpression Arithexpression Multdivexpression Atom Procedureapplication Arguments Number Type Constantidentifier Varprocidentifier SEMI COLON COMMA DEFINED QUESTION BRACKETL BRACKETR PARENTHESISL PARENTHESISR CONJUNCTION DISJUNCTION ADDITION SUBTRACTION DIVISION MULTIPLICATION EXPONENTIATION ROP DONE SKIP TROLLEY CHECKOUT CONTAINS INT DBLE VAR PROC CONST IF THEN ELSE WHILE DO INTEGER DOUBLE EXPONENT CONSTID VARPROCID WS COMMENT 
  context-free syntax
        TROLLEY Constantidentifier CONTAINS Declaration* CHECKOUT Statement DONE SEMI -> Prog

        Constdeclaration -> Declaration
        Vardeclaration -> Declaration
        Procdeclaration -> Declaration

        CONST Constantidentifier COLON Type DEFINED Expression SEMI -> Constdeclaration

        VAR Varprocidentifier COLON Type SEMI -> Vardeclaration

        PROC Varprocidentifier Parameterlist COLON Type DEFINED Statement SEMI -> Procdeclaration

        PARENTHESISL (Parameter (COMMA Parameter)*)? PARENTHESISR -> Parameterlist

        Varprocidentifier COLON Type -> Parameter

        SKIP SEMI -> Statement
        Assignment -> Statement
        Conditional -> Statement
        Loop -> Statement
        Groupedstatement -> Statement

        BRACKETL Statement+ BRACKETR SEMI -> Groupedstatement

        Varprocidentifier DEFINED ae::Expression SEMI -> Assignment

        IF Booleanexpression THEN Statement ELSE Statement -> Conditional

        WHILE Booleanexpression DO Statement -> Loop

        p1::Procedureapplication -> Expression
        b1::Booleanexpression (QUESTION Expression COLON Expression)? -> Expression

        an1::Andexpression (DISJUNCTION Andexpression)* -> Booleanexpression

        c1::Compexpression (CONJUNCTION Compexpression)* -> Andexpression

        ar1::Arithexpression (ROP Arithexpression)? -> Compexpression

        m1::Multdivexpression ((ADDITION | SUBTRACTION) m2::Multdivexpression)* -> Arithexpression

        a1::Atom ((EXPONENTIATION | DIVISION | MULTIPLICATION) a2::Atom)* -> Multdivexpression

        Constantidentifier -> Atom
        Varprocidentifier -> Atom
        Number -> Atom
        PARENTHESISL Expression PARENTHESISR -> Atom

        Varprocidentifier PARENTHESISL Arguments PARENTHESISR -> Procedureapplication

        e1::Expression (COMMA e2::Expression)* -> Arguments

        INTEGER -> Number
        DOUBLE -> Number

        INT -> Type
        DBLE -> Type

        CONSTID -> Constantidentifier

        VARPROCID -> Varprocidentifier

        ";" -> SEMI

        ":" -> COLON

        "," -> COMMA

        ":=" -> DEFINED

        "?" -> QUESTION

        "{" -> BRACKETL

        "}" -> BRACKETR

        "(" -> PARENTHESISL

        ")" -> PARENTHESISR

        "/\\" -> CONJUNCTION

        "\\/" -> DISJUNCTION

        "+" -> ADDITION

        "-" -> SUBTRACTION

        "/" -> DIVISION

        "*" -> MULTIPLICATION

        "**" -> EXPONENTIATION

        "==" -> ROP
        "!=" -> ROP
        "<" -> ROP
        "<=" -> ROP
        ">=" -> ROP
        ">" -> ROP

        "done" -> DONE

        "skip" -> SKIP

        "trolley" -> TROLLEY

        "checkout" -> CHECKOUT

        "contains" -> CONTAINS

        "int" -> INT

        "double" -> DBLE

        "var" -> VAR

        "proc" -> PROC

        "const" -> CONST

        "if" -> IF

        "then" -> THEN

        "else" -> ELSE

        "while" -> WHILE

        "do" -> DO

        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> INTEGER

        INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? -> DOUBLE

        ("e" | "E") INTEGER -> EXPONENT

        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> CONSTID

        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* -> VARPROCID

        (" " | "\t" | "\r" | "\n")+ -> WS

        "/*" ANY* "*/" -> COMMENT
