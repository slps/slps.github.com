prog:
        stat+
stat:
        compilationUnit
type:
        INT
        DOUBLE
compilationUnit:
        TROLLEY CONSTID CONTAINS de::declarations CHECKOUT s::statement SEMI DONE SEMI
declarations:
        (constDeclaration | varDeclaration | proDeclaration)+
constDeclaration:
        CONST CONSTID COLON t::type COLON_EQUALS ar::arithmeticExpr SEMI
varDeclaration:
        VAR ID COLON t::type SEMI
proDeclaration:
        PROC ID LPAREN p1::parameterList RPAREN COLON t::type COLON_EQUALS s1::statement SEMI
parameterList:
        parameterElement ("," parameterElement)*
parameterElement:
        id::ID COLON t::type
listofStatement:
        "{" singleStatement (SEMI s::singleStatement)+ "}"
singleStatement:
        skipStm
        loopStm
        condStm
        a::assgStm
statement:
        e::singleStatement
        b::listofStatement
skipStm:
        SKIP
loopStm:
        WHILE LPAREN? e::booleanExpr RPAREN? DO? s::statement
condStm:
        IF LPAREN? a::booleanExpr RPAREN? THEN? b::statement (ELSE c::statement)?
assgStm:
        ID COLON_EQUALS a1::arithmeticExpr
arithmeticExpr:
        conditionalExpr
        a::applyProcedure
applyProcedure:
        ID LPAREN expressionList RPAREN
expressionList:
        arithmeticExpr ("," arithmeticExpr)*
conditionalExpr:
        booleanExpr (QUESTION conditionalExpr COLON conditionalExpr)?
booleanExpr:
        conjunctionExpression (DISJUNCTION conjunctionExpression)*
conjunctionExpression:
        equalityExpression (CONJUNCTION equalityExpression)*
equalityExpression:
        relationalExpression ((EQUALITY | NON_EQUALITY) relationalExpression)?
relationalExpression:
        addtExpr ((LESS_EQUAL | GREATER_EQUAL | LESS | GREATER) addtExpr)?
addtExpr:
        multExpr ((ADDITION | SUBTRACTION) multExpr)*
multExpr:
        unaryExpr ((MULTIPLICATION | DIVISION | EXPONENTIATION) unaryExpr)*
unaryExpr:
        "-" atom
        atom
atom:
        INTEGER
        FLOAT
        CONSTID
        "(" conditionalExpr ")"
        applyProcedure
        ID
SEMI:
        ";"
COMMA:
        ","
COLON:
        ":"
QUESTION:
        "?"
EQUALITY:
        "=="
NON_EQUALITY:
        "!="
LESS:
        "<"
LESS_EQUAL:
        "<="
GREATER_EQUAL:
        ">="
GREATER:
        ">"
CONJUNCTION:
        "/\\"
DISJUNCTION:
        "\\/"
COLON_EQUALS:
        ":="
ADDITION:
        "+"
SUBTRACTION:
        "-"
DIVISION:
        "/"
MULTIPLICATION:
        "*"
EXPONENTIATION:
        "**"
IF:
        "if"
THEN:
        "then"
ELSE:
        "else"
WHILE:
        "while"
DO:
        "do"
DONE:
        "done"
TROLLEY:
        "trolley"
CONTAINS:
        "contains"
SKIP:
        "skip"
CHECKOUT:
        "checkout"
INT:
        "int"
DOUBLE:
        "double"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
LBRACE:
        "{"
RBRACE:
        "}"
LPAREN:
        "("
RPAREN:
        ")"
CONSTID:
        ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
ID:
        ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z") ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")*
WS:
        (" " | "\t" | "\n" | "\r")+
INTEGER:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9") ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*
FLOAT:
        ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("e" | "E") ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)?
COMMENTS:
        "/*" ANY* "*/"
