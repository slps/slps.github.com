program = TROLLEY CONSTID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI ;
id = CONSTID ;
id = VARID ;
declaration = constant_declaration ;
declaration = variable_declaration ;
declaration = procedure_declaration ;
constant_declaration = CONST CONSTID COLON type ASSIGN expression SEMI ;
variable_declaration = VAR id COLON type SEMI ;
procedure_declaration = PROC id LPAREN param_list RPAREN COLON type ASSIGN statement SEMI ;
param_list = (id COLON type (COMMA id COLON type)*)? ;
type = INT ;
type = DOUBLE ;
term = INT_NUMBER ;
term = DOUBLE_NUMBER ;
term = LPAREN expression RPAREN ;
term = id ;
term = proc ;
proc = id LPAREN (term (COMMA term)*)? RPAREN ;
unary = negation* term ;
negation = SUBTRACTION ;
expon = unary (EXPONENTIATION unary)* ;
mult = expon ((MULTIPLICATION | DIVISION) expon)* ;
add = mult ((ADDITION | SUBTRACTION) mult)* ;
relational = add (relational_op add)* ;
conjunction = relational (CONJUNCTION relational)* ;
disjunction = conjunction (DISJUNCTION conjunction)* ;
expression = disjunction (MIXFIX expression COLON expression)? ;
relational_op = EQUAL ;
relational_op = NONEQUAL ;
relational_op = GREATER ;
relational_op = GREATER_EQUAL ;
relational_op = LESS ;
relational_op = LESS_EQUAL ;
statement = single_statement ;
statement = multiple_statement ;
single_statement = SKIP ;
single_statement = assignment ;
single_statement = conditional ;
single_statement = loop ;
assignment = id ASSIGN expression ;
conditional = IF expression THEN statement ELSE statement ;
loop = WHILE expression DO statement ;
multiple_statement = LBRACE single_statement (SEMI single_statement)* RBRACE ;
SEMI = ';' ;
COLON = ':' ;
ASSIGN = ':=' ;
LPAREN = '(' ;
RPAREN = ')' ;
LBRACE = '{' ;
RBRACE = '}' ;
COMMA = ',' ;
ADDITION = '+' ;
SUBTRACTION = '-' ;
DIVISION = '/' ;
MULTIPLICATION = '*' ;
EXPONENTIATION = '**' ;
EQUAL = '==' ;
NONEQUAL = '!=' ;
GREATER = '>' ;
GREATER_EQUAL = '>=' ;
LESS = '<' ;
LESS_EQUAL = '<=' ;
CONJUNCTION = '/\\' ;
DISJUNCTION = '\\/' ;
MIXFIX = '?' ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
VAR = 'var' ;
CONST = 'const' ;
PROC = 'proc' ;
INT = 'int' ;
DOUBLE = 'double' ;
IF = 'if' ;
THEN = 'then' ;
ELSE = 'else' ;
WHILE = 'while' ;
DO = 'do' ;
CONSTID = ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
VARID = ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_')* ;
NEWLINE = '\r'? '\n' ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
COMMENT = '/*' ANY* '*/' ;
INT_NUMBER = ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ ;
DOUBLE_NUMBER = (('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+)? '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+? (('e' | 'E') ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+)? ;
