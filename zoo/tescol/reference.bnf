program:
        TROLLEY CONSTID CONTAINS (declaration SEMI)* CHECKOUT statement SEMI DONE SEMI
declaration:
        constDecl
        varDecl
        procDecl
constDecl:
        CONST CONSTID COLON t::type DEFAS e::expression
varDecl:
        VAR (a::ID | a::CONSTID) COLON t::type
procDecl:
        PROC (a::ID | a::CONSTID) LPAR p::paramList RPAR COLON t::type DEFAS st::statement
term:
        LPAR expression RPAR
        CONSTID p::procApp
        ID p::procApp
unary:
        SUB* term
exp:
        a::unary (EXP unary)*
mult:
        a::exp (MULTOP b::exp)*
add:
        a::mult ((ADD | SUB) b::mult)*
relation:
        a::add (RELOP b::add)?
equality:
        a::relation (EQOP b::relation)?
disj:
        a::equality (DISJUNC b::equality)*
conj:
        a::disj (CONJUNC b::disj)*
expression:
        a::conj (TE b::expression COLON c::expression)?
procApp:
        EPSILON
        LPAR appList RPAR
appList:
        EPSILON
        e::expression (COMMA f::expression)*
number:
        INTEGER
        DOUBLE
assign:
        (a::ID | a::CONSTID) DEFAS e::expression
condSt:
        IF e::expression THEN statement ELSE statement
loop:
        WHILE e::expression DO statement
paramList:
        EPSILON
        p::paramElem (COMMA q::paramElem)*
paramElem:
        ID COLON type
statement:
        stmtElem
        stmtList
stmtList:
        LBRACE s::stmtElem (SEMI t::stmtElem)* RBRACE
stmtElem:
        SKIP
        assign
        condSt
        loop
type:
        INT
        DOUB
DONE:
        "done"
SKIP:
        "skip"
TROLLEY:
        "trolley"
CHECKOUT:
        "checkout"
CONTAINS:
        "contains"
CONST:
        "const"
VAR:
        "var"
PROC:
        "proc"
IF:
        "if"
THEN:
        "then"
WHILE:
        "while"
DO:
        "do"
ELSE:
        "else"
INT:
        "int"
DOUB:
        "double"
COLON:
        ":"
DEFAS:
        ":="
COMMA:
        ","
SEMI:
        ";"
LPAR:
        "("
RPAR:
        ")"
LBRACE:
        "{"
RBRACE:
        "}"
ADD:
        "+"
SUB:
        "-"
MULTOP:
        MULT
        DIV
MULT:
        "*"
DIV:
        "/"
EXP:
        "**"
DISJUNC:
        "/\\"
CONJUNC:
        "\\/"
RELOP:
        LT
        LTE
        GT
        GTE
EQOP:
        ET
        NET
ET:
        "=="
NET:
        "!="
LT:
        "<"
LTE:
        "<="
GT:
        ">"
GTE:
        ">="
TE:
        "?"
DIGIT:
        "0"
        "1"
        "2"
        "3"
        "4"
        "5"
        "6"
        "7"
        "8"
        "9"
UPPER:
        "A"
        "B"
        "C"
        "D"
        "E"
        "F"
        "G"
        "H"
        "I"
        "J"
        "K"
        "L"
        "M"
        "N"
        "O"
        "P"
        "Q"
        "R"
        "S"
        "T"
        "U"
        "V"
        "W"
        "X"
        "Y"
        "Z"
LOWER:
        "a"
        "b"
        "c"
        "d"
        "e"
        "f"
        "g"
        "h"
        "i"
        "j"
        "k"
        "l"
        "m"
        "n"
        "o"
        "p"
        "q"
        "r"
        "s"
        "t"
        "u"
        "v"
        "w"
        "x"
        "y"
        "z"
INTEGER:
        ("+" | "-")? DIGIT+
DOUBLE:
        INTEGER? "." DIGIT* (("e" | "E") INTEGER)?
CONSTID:
        UPPER (UPPER | DIGIT | "_")*
ID:
        (UPPER | LOWER) (UPPER | LOWER | DIGIT | "_")*
WS:
        (" " | "\t" | "\r" | "\n")+
