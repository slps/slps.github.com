program = TROLLEY CONSTID CONTAINS (declaration SEMI)* CHECKOUT statement SEMI DONE SEMI ;
declaration = constDecl ;
declaration = varDecl ;
declaration = procDecl ;
constDecl = CONST CONSTID COLON t::type DEFAS e::expression ;
varDecl = VAR (a::ID | a::CONSTID) COLON t::type ;
procDecl = PROC (a::ID | a::CONSTID) LPAR p::paramList RPAR COLON t::type DEFAS st::statement ;
term = LPAR expression RPAR ;
term = CONSTID p::procApp ;
term = ID p::procApp ;
unary = SUB* term ;
exp = a::unary (EXP unary)* ;
mult = a::exp (MULTOP b::exp)* ;
add = a::mult ((ADD | SUB) b::mult)* ;
relation = a::add (RELOP b::add)? ;
equality = a::relation (EQOP b::relation)? ;
disj = a::equality (DISJUNC b::equality)* ;
conj = a::disj (CONJUNC b::disj)* ;
expression = a::conj (TE b::expression COLON c::expression)? ;
procApp =  ;
procApp = LPAR appList RPAR ;
appList =  ;
appList = e::expression (COMMA f::expression)* ;
number = INTEGER ;
number = DOUBLE ;
assign = (a::ID | a::CONSTID) DEFAS e::expression ;
condSt = IF e::expression THEN statement ELSE statement ;
loop = WHILE e::expression DO statement ;
paramList =  ;
paramList = p::paramElem (COMMA q::paramElem)* ;
paramElem = ID COLON type ;
statement = stmtElem ;
statement = stmtList ;
stmtList = LBRACE s::stmtElem (SEMI t::stmtElem)* RBRACE ;
stmtElem = SKIP ;
stmtElem = assign ;
stmtElem = condSt ;
stmtElem = loop ;
type = INT ;
type = DOUB ;
DONE = 'done' ;
SKIP = 'skip' ;
TROLLEY = 'trolley' ;
CHECKOUT = 'checkout' ;
CONTAINS = 'contains' ;
CONST = 'const' ;
VAR = 'var' ;
PROC = 'proc' ;
IF = 'if' ;
THEN = 'then' ;
WHILE = 'while' ;
DO = 'do' ;
ELSE = 'else' ;
INT = 'int' ;
DOUB = 'double' ;
COLON = ':' ;
DEFAS = ':=' ;
COMMA = ',' ;
SEMI = ';' ;
LPAR = '(' ;
RPAR = ')' ;
LBRACE = '{' ;
RBRACE = '}' ;
ADD = '+' ;
SUB = '-' ;
MULTOP = MULT ;
MULTOP = DIV ;
MULT = '*' ;
DIV = '/' ;
EXP = '**' ;
DISJUNC = '/\\' ;
CONJUNC = '\\/' ;
RELOP = LT ;
RELOP = LTE ;
RELOP = GT ;
RELOP = GTE ;
EQOP = ET ;
EQOP = NET ;
ET = '==' ;
NET = '!=' ;
LT = '<' ;
LTE = '<=' ;
GT = '>' ;
GTE = '>=' ;
TE = '?' ;
DIGIT = '0' ;
DIGIT = '1' ;
DIGIT = '2' ;
DIGIT = '3' ;
DIGIT = '4' ;
DIGIT = '5' ;
DIGIT = '6' ;
DIGIT = '7' ;
DIGIT = '8' ;
DIGIT = '9' ;
UPPER = 'A' ;
UPPER = 'B' ;
UPPER = 'C' ;
UPPER = 'D' ;
UPPER = 'E' ;
UPPER = 'F' ;
UPPER = 'G' ;
UPPER = 'H' ;
UPPER = 'I' ;
UPPER = 'J' ;
UPPER = 'K' ;
UPPER = 'L' ;
UPPER = 'M' ;
UPPER = 'N' ;
UPPER = 'O' ;
UPPER = 'P' ;
UPPER = 'Q' ;
UPPER = 'R' ;
UPPER = 'S' ;
UPPER = 'T' ;
UPPER = 'U' ;
UPPER = 'V' ;
UPPER = 'W' ;
UPPER = 'X' ;
UPPER = 'Y' ;
UPPER = 'Z' ;
LOWER = 'a' ;
LOWER = 'b' ;
LOWER = 'c' ;
LOWER = 'd' ;
LOWER = 'e' ;
LOWER = 'f' ;
LOWER = 'g' ;
LOWER = 'h' ;
LOWER = 'i' ;
LOWER = 'j' ;
LOWER = 'k' ;
LOWER = 'l' ;
LOWER = 'm' ;
LOWER = 'n' ;
LOWER = 'o' ;
LOWER = 'p' ;
LOWER = 'q' ;
LOWER = 'r' ;
LOWER = 's' ;
LOWER = 't' ;
LOWER = 'u' ;
LOWER = 'v' ;
LOWER = 'w' ;
LOWER = 'x' ;
LOWER = 'y' ;
LOWER = 'z' ;
INTEGER = ('+' | '-')? DIGIT+ ;
DOUBLE = INTEGER? '.' DIGIT* (('e' | 'E') INTEGER)? ;
CONSTID = UPPER (UPPER | DIGIT | '_')* ;
ID = (UPPER | LOWER) (UPPER | LOWER | DIGIT | '_')* ;
WS = (' ' | '\t' | '\r' | '\n')+ ;
