Element = ModelElement ;
ModelElement = GeneralizableElement ;
ModelElement = Namespace ;
ModelElement = Feature ;
ModelElement = AssociationEnd ;
ModelElement = Relationship ;
ModelElement = Parameter ;
ModelElement = Instance ;
ModelElement = Action ;
ModelElement = AttributeLink ;
ModelElement = Link ;
ModelElement = Argument ;
ModelElement = LinkEnd ;
ModelElement = Stimulus ;
ModelElement = Message ;
ModelElement = Interaction ;
ModelElement = InteractionInstanceSet ;
ModelElement = CollaborationInstanceSet ;
Classifier = Signal ;
Classifier = ClassifierRole ;
Feature = StructuralFeature ;
Feature = BehavioralFeature ;
StructuralFeature = Attribute ;
AssociationEnd = AssociationEndRole ;
AssociationEnd = association::Association specification::Classifier+ participant::Classifier qualifier::Attribute+ isNavigable::Boolean ordering::OrderingKind aggregation::AggregationKind targetScope::ScopeKind multiplicity::Multiplicity changeability::ChangeableKind ;
Relationship = Generalization ;
Association = AssociationRole ;
Association = connection::AssociationEnd ;
Attribute = associationEnd::AssociationEnd initialValue::Expression ;
BehavioralFeature = Operation ;
BehavioralFeature = Reception ;
Operation = concurrency::CallConcurrencyKind isRoot::Boolean isLeaf::Boolean isAbstract::Boolean specification::String ;
Parameter = type::Classifier behavioralFeature::BehavioralFeature defaultValue::Expression kind::ParameterDirectionKind ;
Generalization = parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
AggregationKind = ak_none:: ;
AggregationKind = ak_aggregate:: ;
AggregationKind = ak_composite:: ;
ChangeableKind = ck_changeable:: ;
ChangeableKind = ck_frozen:: ;
ChangeableKind = ck_addOnly:: ;
OrderingKind = ok_unordered:: ;
OrderingKind = ok_ordered:: ;
CallConcurrencyKind = cck_sequential:: ;
CallConcurrencyKind = cck_guarded:: ;
CallConcurrencyKind = cck_concurrent:: ;
ParameterDirectionKind = pdk_in:: ;
ParameterDirectionKind = pdk_inout:: ;
ParameterDirectionKind = pdk_out:: ;
ParameterDirectionKind = pdk_return:: ;
ScopeKind = sk_instance:: ;
ScopeKind = sk_classifier:: ;
VisibilityKind = vk_public:: ;
VisibilityKind = vk_protected:: ;
VisibilityKind = vk_private:: ;
VisibilityKind = vk_package:: ;
Multiplicity = range::MultiplicityRange+ ;
MultiplicityRange = multiplicity::Multiplicity lower::Integer upper::Integer ;
Expression = BooleanExpression ;
Expression = ObjectSetExpression ;
Expression = ActionExpression ;
Expression = IterationExpression ;
Expression = language::String body::String ;
BooleanExpression = ;
ObjectSetExpression = ;
ActionExpression = ;
IterationExpression = ;
Instance = Object ;
Instance = DataValue ;
Instance = ComponentInstance ;
Instance = NodeInstance ;
Instance = SubsystemInstance ;
Signal = Exception ;
Action = CreateAction ;
Action = DestroyAction ;
Action = UninterpretedAction ;
Action = CallAction ;
Action = SendAction ;
Action = ActionSequence ;
Action = ReturnAction ;
Action = TerminateAction ;
CreateAction = instantiation::Classifier ;
DestroyAction = actualArgument::Argument+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
UninterpretedAction = actualArgument::Argument+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
AttributeLink = instance::Instance value::Instance linkEnd::LinkEnd attribute::Attribute ;
Object = ownedInstance::Instance+ linkEnd::LinkEnd+ classifier::Classifier+ componentInstance::ComponentInstance slot::AttributeLink+ ownedLink::Link+ ;
Link = association::Association connection::LinkEnd ;
LinkObject = ;
DataValue = ownedInstance::Instance+ linkEnd::LinkEnd+ classifier::Classifier+ componentInstance::ComponentInstance slot::AttributeLink+ ownedLink::Link+ ;
CallAction = operation::Operation ;
SendAction = signal::Signal ;
ActionSequence = action::Action+ ;
Argument = action::Action value::Expression ;
Reception = signal::Signal specification::String isRoot::Boolean isLeaf::Boolean isAbstract::Boolean ;
LinkEnd = link::Link qualifiedValue::AttributeLink+ instance::Instance associationEnd::AssociationEnd ;
ReturnAction = actualArgument::Argument+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
TerminateAction = actualArgument::Argument+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Stimulus = argument::Instance+ communicationLink::Link receiver::Instance dispatchAction::Action sender::Instance ;
Exception = ;
ComponentInstance = resident::Instance+ nodeInstance::NodeInstance ;
NodeInstance = resident::ComponentInstance+ ;
SubsystemInstance = ownedInstance::Instance+ linkEnd::LinkEnd+ classifier::Classifier+ componentInstance::ComponentInstance slot::AttributeLink+ ownedLink::Link+ ;
Collaboration = usedCollaboration::Collaboration+ representedOperation::Operation representedClassifier::Classifier interaction::Interaction+ constrainingElement::ModelElement+ ;
ClassifierRole = availableContents::ModelElement+ base::Classifier+ conformingInstance::Instance+ availableFeature::Feature+ multiplicity::Multiplicity ;
AssociationRole = base::Association conformingLink::Link+ message::Message+ multiplicity::Multiplicity ;
AssociationEndRole = base::AssociationEnd availableQualifier::Attribute+ collaborationMultiplicity::Multiplicity ;
Message = interaction::Interaction conformingStimulus::Stimulus+ action::Action communicationConnection::AssociationRole activator::Message receiver::ClassifierRole sender::ClassifierRole predecessor::Message+ ;
Interaction = message::Message+ context::Collaboration ;
InteractionInstanceSet = interaction::Interaction context::CollaborationInstanceSet participatingStimulus::Stimulus+ ;
CollaborationInstanceSet = collaboration::Collaboration constrainingElement::ModelElement+ participatingInstance::Instance+ interactionInstanceSet::InteractionInstanceSet+ participatingLink::Link+ ;
