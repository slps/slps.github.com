Signal = Exception ;
Signal = Exception ;
Action = CreateAction ;
Action = DestroyAction ;
Action = UninterpretedAction ;
Action = CallAction ;
Action = SendAction ;
Action = ActionSequence ;
Action = ReturnAction ;
Action = TerminateAction ;
CreateAction = instantiation::Classifier ;
DestroyAction = actualArgument::Argument+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
UninterpretedAction = actualArgument::Argument+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
CallAction = operation::Operation ;
SendAction = signal::Signal ;
ActionSequence = action::Action+ ;
Argument = action::Action value::Expression ;
Reception = signal::Signal specification::String isRoot::Boolean isLeaf::Boolean isAbstract::Boolean ;
ReturnAction = actualArgument::Argument+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
TerminateAction = actualArgument::Argument+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Exception =  ;
CallConcurrencyKind = cck_sequential:: ;
CallConcurrencyKind = cck_guarded:: ;
CallConcurrencyKind = cck_concurrent:: ;
ParameterDirectionKind = pdk_in:: ;
ParameterDirectionKind = pdk_inout:: ;
ParameterDirectionKind = pdk_out:: ;
ParameterDirectionKind = pdk_return:: ;
ScopeKind = sk_instance:: ;
ScopeKind = sk_classifier:: ;
VisibilityKind = vk_public:: ;
VisibilityKind = vk_protected:: ;
VisibilityKind = vk_private:: ;
VisibilityKind = vk_package:: ;
Expression = BooleanExpression ;
Expression = ObjectSetExpression ;
Expression = ActionExpression ;
Expression = IterationExpression ;
Expression = TimeExpression ;
Expression = language::String body::String ;
BooleanExpression = language::String body::String ;
ObjectSetExpression = language::String body::String ;
ActionExpression = language::String body::String ;
IterationExpression = language::String body::String ;
TimeExpression = language::String body::String ;
PseudostateKind = pk_choice:: ;
PseudostateKind = pk_deepHistory:: ;
PseudostateKind = pk_fork:: ;
PseudostateKind = pk_initial:: ;
PseudostateKind = pk_join:: ;
PseudostateKind = pk_junction:: ;
PseudostateKind = pk_shallowHistory:: ;
StateMachine = context::ModelElement submachineState::SubmachineState+ top::State transitions::Transition+ ;
Event = TimeEvent ;
Event = CallEvent ;
Event = SignalEvent ;
Event = ChangeEvent ;
StateVertex = State ;
StateVertex = Pseudostate ;
StateVertex = SynchState ;
StateVertex = StubState ;
State = CompositeState ;
State = SimpleState ;
State = FinalState ;
TimeEvent = when::TimeExpression ;
CallEvent = operation::Operation ;
SignalEvent = signal::Signal ;
Transition = target::StateVertex trigger::Event stateMachine::StateMachine source::StateVertex effect::Action guard::Guard ;
CompositeState = SubmachineState ;
CompositeState = subvertex::StateVertex+ isConcurrent::Boolean ;
ChangeEvent = changeExpression::BooleanExpression ;
Guard = transition::Transition expression::BooleanExpression ;
Pseudostate = kind::PseudostateKind ;
SimpleState = deferrableEvent::Event+ internalTransition::Transition+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
SubmachineState = submachine::StateMachine ;
SynchState = bound::Integer ;
StubState = referenceState::String ;
FinalState = deferrableEvent::Event+ internalTransition::Transition+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
Boolean = 'true' ;
Boolean = 'false' ;
Integer = INT ;
String = STR ;
Element = ModelElement ;
ModelElement = Action ;
ModelElement = Argument ;
ModelElement = StateMachine ;
ModelElement = Event ;
ModelElement = StateVertex ;
ModelElement = Transition ;
ModelElement = Guard ;
ModelElement = GeneralizableElement ;
ModelElement = Namespace ;
ModelElement = Feature ;
ModelElement = Relationship ;
ModelElement = Parameter ;
GeneralizableElement = Classifier ;
Namespace = Classifier ;
Classifier = Signal ;
Feature = BehavioralFeature ;
Relationship = Generalization ;
BehavioralFeature = Reception ;
BehavioralFeature = Operation ;
Operation = concurrency::CallConcurrencyKind isRoot::Boolean isLeaf::Boolean isAbstract::Boolean specification::String ;
Parameter = type::Classifier behavioralFeature::BehavioralFeature defaultValue::Expression kind::ParameterDirectionKind ;
Generalization = parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
