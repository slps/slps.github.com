program = prolog element ;
prolog = dtd_body ;
dtd_body = misc* doctypedecl? ;
misc = comment ;
misc = pi ;
misc = space ;
misc = newline ;
doctypedecl = '<!DOCTYPE' spaces name spaces sp_external_id? spaces declbody? spaces '>' spaces ;
declbody = '[' decl* ']' ;
literal = charlit ;
literal = stringlit ;
pi = '<?' pitarget sub1_pi? '?>' ;
pitarget = name ;
sub1_pi = spaces token ;
sub2_pi = token '?>' token ;
sp_external_id = spaces external_id ;
external_id = exid_sys ;
external_id = exid_pub ;
exid_sys = 'SYSTEM' spaces literal ;
exid_pub = 'PUBLIC' spaces literal spaces literal ;
decl = markupdecl ;
decl = '%' name ';' ;
decl = spaces ;
markupdecl = elementdecl ;
markupdecl = attlistdecl ;
markupdecl = entitydecl ;
markupdecl = notationdecl ;
markupdecl = pi ;
markupdecl = comment ;
elementdecl = '<!ELEMENT' spaces name spaces contentspec spaces '>' spaces ;
contentspec = 'EMPTY' ;
contentspec = 'ANY' ;
contentspec = mixed ;
contentspec = children ;
children = children_body repetition? ;
repetition = '?' ;
repetition = '*' ;
repetition = '+' ;
children_body = choice ;
children_body = seq ;
choice = '(' spaces cp choice_item choice_item* spaces ')' ;
choice_item = spaces '|' spaces cp ;
cp = cp_body repetition? ;
cp_body = name ;
cp_body = choice ;
cp_body = seq ;
seq = '(' spaces cp more_cps* spaces ')' ;
more_cps = spaces ',' spaces cp ;
mixed = pcdata_or_name ;
mixed = pcdata ;
pcdata_or_name = '(' spaces '#PCDATA' more_names* spaces ')*' ;
more_names = spaces '|' spaces name ;
pcdata = '(' spaces '#PCDATA' spaces ')' ;
attlistdecl = '<!ATTLIST' spaces name attdef* spaces '>' spaces ;
attdef = spaces name spaces atttype spaces defaultdecl ;
atttype = stringtype ;
atttype = tokenizedtype ;
atttype = enumeratedtype ;
stringtype = 'CDATA' ;
tokenizedtype = 'ID' ;
tokenizedtype = 'IDREF' ;
tokenizedtype = 'IDREFS' ;
tokenizedtype = 'ENTITY' ;
tokenizedtype = 'ENTITIES' ;
tokenizedtype = 'NMTOKEN' ;
tokenizedtype = 'NMTOKENS' ;
enumeratedtype = notationtype ;
enumeratedtype = enumeration ;
notationtype = 'NOTATION' spaces '(' spaces name more_names* spaces ')' ;
enumeration = '(' spaces nmtoken more_nmtokens* spaces ')' ;
nmtoken = name ;
nmtoken = dname ;
more_nmtokens = spaces '|' spaces nmtoken ;
defaultdecl = '#REQUIRED' ;
defaultdecl = '#IMPLIED' ;
defaultdecl = fixed? attvalue ;
fixed = '#FIXED' spaces ;
attvalue = stringlit ;
attvalue = charlit ;
attvalue = longstringlit ;
attvalue = longcharlit ;
longstringlit = '"' not_dquote* '"' ;
not_dquote = token ;
longcharlit = ''' not_quote* ''' ;
not_quote = token ;
entitydecl = gedecl ;
entitydecl = pedecl ;
gedecl = '<!ENTITY' spaces name spaces entitydef spaces '>' spaces ;
pedecl = '<!ENTITY' spaces '%' spaces name spaces pedef spaces '>' spaces ;
entitydef = entityvalue ;
entitydef = external_id ndatadecl? ;
pedef = entityvalue ;
pedef = external_id ;
ndatadecl = spaces 'NDATA' spaces name ;
entityvalue = charlit ;
entityvalue = stringlit ;
entityvalue = longstringlit ;
entityvalue = longcharlit ;
notationdecl = '<!NOTATION' spaces name spaces exid_or_pubid spaces '>' spaces ;
exid_or_pubid = external_id ;
exid_or_pubid = 'PUBLIC' spaces literal ;
spaces = space_or_newline* ;
space_or_newline = space ;
space_or_newline = newline ;
element = empty_elem_tag spaces ;
element = tag_content spaces ;
tag_content = stag IN content EX etag ;
empty_elem_tag = '<' name spaces attribute* '/>' ;
attribute = spaces name '=' attvalue spaces ;
stag = '<' name spaces attribute* '>' ;
content = spaces chardata* spaces sub1_content* spaces ;
sub1_content = spaces sub2_content spaces chardata* spaces ;
sub2_content = element ;
sub2_content = reference ;
sub2_content = cdsect ;
sub2_content = pi ;
sub2_content = comment ;
sub2_content = regexp ;
chardata = token ;
etag = '</' name spaces '>' ;
cdata = token ;
cdata = comment ;
cdend = ']' ']' '>' ;
reference = '&' name ';' ;
reference = charref ;
cdsect = '<!' '[' 'CDATA' '[' cdata* cdend ;
