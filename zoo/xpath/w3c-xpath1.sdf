module Main

exports
  sorts
        LocationPath AbsoluteLocationPath RelativeLocationPath Step AxisSpecifier AxisName NodeTest Predicate PredicateExpr AbbreviatedAbsoluteLocationPath AbbreviatedRelativeLocationPath AbbreviatedStep AbbreviatedAxisSpecifier Expr PrimaryExpr FunctionCall Argument UnionExpr PathExpr FilterExpr OrExpr AndExpr EqualityExpr RelationalExpr AdditiveExpr MultiplicativeExpr UnaryExpr ExprToken Number Operator OperatorName MultiplyOperator VariableReference NameTest NodeType ExprWhitespace Digits 
  context-free syntax
        RelativeLocationPath -> LocationPath
        AbsoluteLocationPath -> LocationPath {cons(NT-LocationPath)}

        "/" RelativeLocationPath? -> AbsoluteLocationPath
        AbbreviatedAbsoluteLocationPath -> AbsoluteLocationPath {cons(NT-AbsoluteLocationPath)}

        Step -> RelativeLocationPath
        RelativeLocationPath "/" Step -> RelativeLocationPath
        AbbreviatedRelativeLocationPath -> RelativeLocationPath {cons(NT-RelativeLocationPath)}

        AxisSpecifier NodeTest Predicate* -> Step
        AbbreviatedStep -> Step {cons(NT-Step)}

        AxisName "::" -> AxisSpecifier
        AbbreviatedAxisSpecifier -> AxisSpecifier {cons(NT-AxisSpecifier)}

        "ancestor" -> AxisName
        "ancestor-or-self" -> AxisName
        "attribute" -> AxisName
        "child" -> AxisName
        "descendant" -> AxisName
        "descendant-or-self" -> AxisName
        "following" -> AxisName
        "following-sibling" -> AxisName
        "namespace" -> AxisName
        "parent" -> AxisName
        "preceding" -> AxisName
        "preceding-sibling" -> AxisName
        "self" -> AxisName {cons(NT-AxisName)}

        NameTest -> NodeTest
        NodeType "(" ")" -> NodeTest
        "processing-instruction" "(" Literal ")" -> NodeTest {cons(NT-NodeTest)}

        "[" PredicateExpr "]" -> Predicate {cons(NT-Predicate)}

        Expr -> PredicateExpr {cons(NT-PredicateExpr)}

        "//" RelativeLocationPath -> AbbreviatedAbsoluteLocationPath {cons(NT-AbbreviatedAbsoluteLocationPath)}

        RelativeLocationPath "//" Step -> AbbreviatedRelativeLocationPath {cons(NT-AbbreviatedRelativeLocationPath)}

        "." -> AbbreviatedStep
        ".." -> AbbreviatedStep {cons(NT-AbbreviatedStep)}

        "@"? -> AbbreviatedAxisSpecifier {cons(NT-AbbreviatedAxisSpecifier)}

        OrExpr -> Expr {cons(NT-Expr)}

        VariableReference -> PrimaryExpr
        "(" Expr ")" -> PrimaryExpr
        Literal -> PrimaryExpr
        Number -> PrimaryExpr
        FunctionCall -> PrimaryExpr {cons(NT-PrimaryExpr)}

        FunctionName "(" (Argument ("," Argument)*)? ")" -> FunctionCall {cons(NT-FunctionCall)}

        Expr -> Argument {cons(NT-Argument)}

        PathExpr -> UnionExpr
        UnionExpr "|" PathExpr -> UnionExpr {cons(NT-UnionExpr)}

        LocationPath -> PathExpr
        FilterExpr -> PathExpr
        FilterExpr "/" RelativeLocationPath -> PathExpr
        FilterExpr "//" RelativeLocationPath -> PathExpr {cons(NT-PathExpr)}

        PrimaryExpr -> FilterExpr
        FilterExpr Predicate -> FilterExpr {cons(NT-FilterExpr)}

        AndExpr -> OrExpr
        OrExpr "or" AndExpr -> OrExpr {cons(NT-OrExpr)}

        EqualityExpr -> AndExpr
        AndExpr "and" EqualityExpr -> AndExpr {cons(NT-AndExpr)}

        RelationalExpr -> EqualityExpr
        EqualityExpr "=" RelationalExpr -> EqualityExpr
        EqualityExpr "!=" RelationalExpr -> EqualityExpr {cons(NT-EqualityExpr)}

        AdditiveExpr -> RelationalExpr
        RelationalExpr "<" AdditiveExpr -> RelationalExpr
        RelationalExpr ">" AdditiveExpr -> RelationalExpr
        RelationalExpr "<=" AdditiveExpr -> RelationalExpr
        RelationalExpr ">=" AdditiveExpr -> RelationalExpr {cons(NT-RelationalExpr)}

        MultiplicativeExpr -> AdditiveExpr
        AdditiveExpr "+" MultiplicativeExpr -> AdditiveExpr
        AdditiveExpr "-" MultiplicativeExpr -> AdditiveExpr {cons(NT-AdditiveExpr)}

        UnaryExpr -> MultiplicativeExpr
        MultiplicativeExpr MultiplyOperator UnaryExpr -> MultiplicativeExpr
        MultiplicativeExpr "div" UnaryExpr -> MultiplicativeExpr
        MultiplicativeExpr "mod" UnaryExpr -> MultiplicativeExpr {cons(NT-MultiplicativeExpr)}

        UnionExpr -> UnaryExpr
        "-" UnaryExpr -> UnaryExpr {cons(NT-UnaryExpr)}

        "(" -> ExprToken
        ")" -> ExprToken
        "[" -> ExprToken
        "]" -> ExprToken
        "." -> ExprToken
        ".." -> ExprToken
        "@" -> ExprToken
        "," -> ExprToken
        "::" -> ExprToken
        NameTest -> ExprToken
        NodeType -> ExprToken
        Operator -> ExprToken
        FunctionName -> ExprToken
        AxisName -> ExprToken
        Literal -> ExprToken
        Number -> ExprToken
        VariableReference -> ExprToken {cons(NT-ExprToken)}

        Digits ("." Digits?)? -> Number
        "." Digits -> Number {cons(NT-Number)}

        OperatorName -> Operator
        MultiplyOperator -> Operator
        "/" -> Operator
        "//" -> Operator
        "|" -> Operator
        "+" -> Operator
        "-" -> Operator
        "=" -> Operator
        "!=" -> Operator
        "<" -> Operator
        "<=" -> Operator
        ">" -> Operator
        ">=" -> Operator {cons(NT-Operator)}

        "and" -> OperatorName
        "or" -> OperatorName
        "mod" -> OperatorName
        "div" -> OperatorName {cons(NT-OperatorName)}

        "*" -> MultiplyOperator {cons(NT-MultiplyOperator)}

        "$" QName -> VariableReference {cons(NT-VariableReference)}

        "*" -> NameTest
        NCName ":" "*" -> NameTest
        QName -> NameTest {cons(NT-NameTest)}

        "comment" -> NodeType
        "text" -> NodeType
        "processing-instruction" -> NodeType
        "node" -> NodeType {cons(NT-NodeType)}

        S -> ExprWhitespace {cons(NT-ExprWhitespace)}

        ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ -> Digits {cons(NT-Digits)}
